gun-10000001,콜트 리볼버
gun-40000001,Saru//cAimi Tanaka//c
gun-50000001,Type                       Revolver//n//nWeight                     1//c048 g (with 7½" barrel)//n//nLength                     11" (279 mm – with 5½" barrel);//n//n                           12.5" (318 mm – with 7½" barrel)//n//nCartridge                  .45 Colt//c .44-40 WCF//c .38-40 WCF//c//n//n                           .32-20 WCF//c .38 Colt and many others//c//n//n                           including .22 LR//c .38 Special//c//n//n                           .357 Magnum and .44 Special//n//nAction                     Single-action revolver//n//nFeed system                6-shot Cylinder
gun-60000001,
gun-10000002,M1911
gun-40000002,spirtie//cEriko Matsui//c
gun-50000002,Type                       Semi-automatic pistol//n//nWeight                    2.44 lb (1//c105 g) empty//c w/magazine//n//nLength                    8.25 in (210 mm)//n//nBarrel length           Government model: 5.03 in (127 mm)//n//n                              Commander model: 4.25 in (108 mm)//n//n                              Officer's ACP model: 3.5 in (89 mm)//n//nCartridge                .45 ACP (11.43 mm)//n//nAction                     Short recoil operation//n//nMuzzle velocity        825 ft/s (251 m/s)//n//nFeed system            7-round standard detachable box magazine
gun-60000002,
gun-10000003,M9
gun-40000003,M.vv//cAya Suzaki//c
gun-50000003,Type                       Semi-automatic pistol//n//nWeight                     952 g (33.6 oz)//n//n                           1//c162 g (41.0 oz) loaded//n//nLength                     217 mm (8.5 in)//n//nBarrel length              125 mm (4.9 in)//n//nCartridge                  9×19mm Parabellum//n//nAction                     Short recoil//n//nMuzzle velocity            381 m/s (1//c250 ft/s)//n//nEffective firing range     50 m//n//nFeed system                15-round detachable box magazine//n//nSights                     Iron sights
gun-60000003,
gun-10000005,나강 리볼버
gun-40000005,X布//cNarumi Sinohara//c
gun-50000005,Type                       Revolver//n//nWeight                    1.8 lb (0.8 kg)//n//nLength                    10.5 in (235 mm)//n//nBarrel length           4.5 in (114 mm)//n//nCartridge                7.62×38mmR (7.62mm Nagant)//n//nCaliber                    7.62mm//n//nAction                     Double action//n//nRate of fire              14-21 rounds/min//n//nMuzzle velocity        1//c070 ft/s (327 m/s)//n//nEffective firing range50 yds (46 m) //n//nFeed system            7-round cylinder//n//nSights                     Fixed front post and rear notch
gun-60000005,
gun-10000006,토카레프
gun-40000006,废人//cHiromi Sakuma//c
gun-50000006,Type                       Semi-automatic pistol//n//nWeight                     854 g (30.1 oz)//n//nLength                     194 mm (7.6 in)//n//nBarrel length              116 mm (4.6 in)//n//nHeight                     134 mm (5.3 in)//n//nCartridge                  7.62×25mm Tokarev//n//nAction                     Short recoil actuated//c //n//n                           locked breech//c single action//n//nMuzzle velocity            480 m/s (1//c575 ft/s)//n//nEffective firing range     50 m //n//nFeed system                8-round detachable box magazine//n//nSights                     Front blade//c rear notch//n//n                           156 mm (6.1 in) sight radius
gun-60000006,
gun-10000007,스테츠킨
gun-40000007,鳗鱼子//cEri Kitamura//c
gun-50000007,Type                       Machine Pistol//n//nWeight                     1.22 kg (2.69 lbs)//n//nLength                     225 mm (8.86 in)//n//nBarrel length              140 mm (5.51 in)//n//nCartridge                  9×18mm Makarov//n//n                           9×19mm Parabellum.//n//nAction                     blowback//n//nRate of fire               750 rounds/minute//n//nMuzzle velocity            340 m/s (9×18mm Makarov)//n//nEffective firing range     50 m (9×18mm Makarov)//n//nMaximum firing range       200 m//n//nFeed system                20-round detachable box magazine
gun-60000007,
gun-10000008,마카로프
gun-40000008,河马//cUesaka Sumire//c
gun-50000008,Type                       Semi-automatic pistol//n//nWeight                     730 g (26 oz)//n//nLength                     161.5 mm (6.36 in)//n//nBarrel length              93.5 mm (3.68 in)//n//nWidth                      29.4 mm (1.16 in)//n//nCartridge                  9×18mm Makarov//n//nAction                     Blowback//n//nMuzzle velocity            315 m/s (1//c030 ft/s)//n//nEffective firing range     50 m (55 yd)//n//nFeed system                8-round detachable box magazine //n//n                           (10- and 12-round available on //n//n                           the latest Russian models)//n//nSights                     Blade front//c notch rear (drift adjustable)
gun-60000008,
gun-10000009,P38
gun-40000009,とり//cTooru Kanae//c
gun-50000009,Type                       Semi-automatic pistol//n//nWeight                     800 g (1 lb 12 oz)//n//nLength                     216 mm (8.5 in)//n//nBarrel length              125 mm (4.9 in)//n//nCartridge                  9×19mm Parabellum//n//nAction                     Short recoil//c locked breech//n//nMuzzle velocity            365 m/s (1//c200 ft/s)//n//nEffective firing range     Sights set for 50 m (55 yd)//n//nFeed system                8-round detachable single-stack magazine//n//nSights                     Rear notch and front blade post
gun-60000009,
gun-10000010,PPK
gun-40000010,堀森//cAsuka Ito//c
gun-50000010,Type                       Semi-automatic pistol//n//nWeight                     590 g (21 oz) (PPK 7.65×17mm Browning SR/.32 ACP)//n//nLength                     155 mm (6.1 in) (PPK)//n//nBarrel length              83 mm (3.3 in) (PPK//c PPK/S//c PPK-L))  //n//nWidth                      25 mm (1.0 in) (PPK)      //n//nHeight                     100 mm (3.9 in) (PPK)//n//nCartridge                  7.65×17mm Browning SR (.32 ACP)//n//n                           9×17mm Short (.380 ACP)//n//n                           .22 Long Rifle//n//n                           6.35×15mm Browning SR (.25 ACP)//n//n                           9×18mm Ultra (PP-Super)//n//nAction                     Straight blowback//n//nMuzzle velocity            244 m/s (800.5 ft/s) (PPK/PPK/S 9×17mm Short/.380 ACP)//n//n                           308 m/s (1//c010.5 ft/s)//n//n                           (PPK/PPK/S/PPK-L 7.65×17mm Browning SR/.32 ACP)//n//nFeed system                PPK: 8+1 (.22 LR)//c 7+1 (.32 ACP)//n//nSights                     Fixed iron sights//c rear notch and front blade
gun-60000010,
gun-10000011,P08
gun-40000011,防弹乳牛//cTakao Koizumi//c
gun-50000011,Type                       Semi-automatic pistol//n//nWeight                     871 grams (1.92 pounds)//n//nLength                     222 mm (8.74 in)//n//nBarrel length              95–200 mm//n//n                           (3.74–7.87 in)//n//nCartridge                  7.65×21mm Parabellum//n//n                           9×19mm Parabellum//n//n                           .45 ACP (very rare)//n//nAction                     Toggle-locked//c short recoil//n//nRate of fire               20 RPM//n//nMuzzle velocity            350–400 m/s (1148–1312 f/s; 9mm//c 100 mm barrel)//n//nEffective firing range     50 m (9mm//c 100 mm barrel; short barrel)//n//nFeed system                8-round detachable box magazine//c //n//n                           32-round detachable drum//n//nSights                     Iron sights
gun-60000011,
gun-10000012,C96
gun-40000012,林檎愛す//cAyaka Itatani//c
gun-50000012,Type                       Semi-automatic //n//nWeight                     1//c130 g (40 oz)//n//nLength                     312 mm (12.3 in) (pre-Bolo)//n//n                           271 mm (10.7 in) (post-Bolo)//n//nBarrel length              140 mm (5.5 in) (pre-Bolo)//n//n                           99 mm (3.9 in) (post-Bolo)//n//nCartridge                  7.63×25mm Mauser//n//n                           9×19mm Parabellum//n//n                           .45 ACP (China)//n//n                           9 mm Mauser Export (rare)//n//n                           8.15mm Mauser (experimental)//n//n                           8mm Gasser//n//nAction                     Short recoil//n//nMuzzle velocity            425 m/s (1//c394 ft/s)//n//nEffective firing range     150–200m//n//nFeed system                10-round internal magazine fed by //n//n                           stripper clip or removable magazine//n//nSights                     V-notch rear tangent sight adjustable up//n//n                           to 1000 meters//c inverted V front sight
gun-60000012,
gun-10000013,92식
gun-40000013,莲子//cSuzuko Mimori//c
gun-50000013,Type                       Semi-automatic pistol//n//nWeight                     760 g//n//nLength                     190 mm (7.48 in)//n//nBarrel length              111 mm (4.33 in)//n//nWidth                      35 mm//n//nHeight                     135 mm//n//nCartridge                  5.8×21mm DAP92//n//n                           9×19mm Parabellum//n//nAction                     Short recoil//c locked breech//c//n//n                           rotating barrel lock//n//nMuzzle velocity            350 m/s (1//c150 ft/s) (9×19mm Parabellum)//n//nEffective firing range     50 meters (9×19mm Parabellum)//n//nFeed system //n//n                           Detachable box magazine; capacities://n//n                           15 rounds (9×19mm)//n//n                           20 rounds (5.8×21mm)//n//nSights                     Fixed//c 3-dot type
gun-60000013,
gun-10000014,아스트라 리볼버
gun-40000014,spirtie//cSora Amamiya//c
gun-50000014,Type                       Revolver//n//nWeight                     1.15kg//n//nLength                     212mm//n//nBarrel length              98mm//n//nCartridge                  9mm//n//nAction                     Double action//n//nMuzzle velocity            220 m/s//n//nEffective firing range     25m //n//nFeed system                6-round cylinder//n//nSights                     Fixed front post and rear notch
gun-60000014,
gun-10000015,글록17
gun-40000015,Rain Lan//cSora Tokui//c
gun-50000015,Type                       Semi-automatic pistol//n//nWeight                     625 g //n//nLength                     202 mm //n//nBarrel length              114 mm //n//nCartridge                  9×19 mm Parabellum//n//nAction                     Short recoil//c locked breech//c tilting barrel//n//nMuzzle velocity            375 m/s (1//c230 ft/s) //n//nEffective firing range     50 m//n//nFeed system                Box magazine//c see Variants for capacities//n//nSights                     Fixed//c adjustable and tritium-illuminated handgun night sights
gun-60000015,
gun-10000016,톰슨
gun-40000016,NS//cRisa Taneda//c
gun-50000016,Type                       Submachine gun//n//nWeight                     10.8 lb (4.9 kg) empty//n//nLength                     33.5 in (850 mm) //n//nBarrel length              10.5 in (270 mm)//n//n                           12 in (300 mm) (with cutts compensator)//n//nCartridge                  .45 ACP (11.43×23mm)//n//nAction                     Blowback//c Blish Lock//n//nRate of fire               600–725 rpm //n//nMuzzle velocity            935 ft/s (285 m/s)//n//nEffective firing range     160 feet (50 m)
gun-60000016,
gun-10000017,M3
gun-40000017,november//cNozomi Amane//c
gun-50000017,Type                       Submachine gun//n//nWeight                     8.15 lb (3.70 kg)//n//nLength                     29.8 in (760 mm) stock extended / //n//n                           22.8 in (579.1 mm) stock collapsed//n//nBarrel length              8 in (203.2 mm)//n//nCartridge                  .45 ACP (11.43x23 mm)//n//n                           9×19mm Parabellum//n//nAction                     Blowback//c open bolt//n//nRate of fire               450 rounds/min cyclic//n//nMuzzle velocity            920 ft/s (280 m/s)//n//nEffective firing range     Sights fixed to 100 yards (91 m)//n//nFeed system                30-round detachable box magazine//n//nSights                     Fixed rear peep sight and blade foresight//c//n//n                           calibrated to 100 yards for caliber//n//n                           .45 M1911 ball ammunition
gun-60000017,
gun-10000018,MAC-10
gun-40000018,SA//cOgura Yui//c
gun-50000018,Type                       Machine Pistol//n//nWeight                     2.84 kg (6.26 pounds) empty without suppressor//n//nLength                     269 mm (10.7 inches) with stock removed//n//n                           295 mm (11.6 inches) with stock retracted//n//n                           548 mm (1 foot 9.6 inches) with stock extended//n//n                           545 mm (1 foot 9.45 inches) with stock retracted//n//n                           w/suppressor//n//n                           798 mm (2 feet 7.4 inches) with stock extended with//n//n                           suppressor//n//nBarrel length              146 mm (4.49 inches)//n//nCartridge                  .45 ACP (11.43x23mm)//n//n                           9×19mm Parabellum//n//nAction                     Straight blowback//n//nRate of fire               1//c250 rounds/min. (9mm)//n//n                           1//c090 rounds/min. (.45 ACP)//n//n                           1//c380 rounds/min. (.380 ACP)//n//nMuzzle velocity            366 meters/second (1//c201 feet/second) for 9mm//n//n                           280 meters/second (919 feet/second) for .45 ACP//n//nEffective firing range     50 meters (.45 ACP)//n//n                           70 meters (9×19mm Parabellum)//n//nMaximum firing range       100 meters (for .45 ACP)//n//nFeed system                30-round detachable box magazine (.45 ACP)//n//n                           32-round detachable box magazine (9mm)//n//nSights                     Iron sights
gun-60000018,
gun-10000019,FMG-9
gun-40000019,NorthAbyssor//cSerizawa Yuu//c
gun-50000019,Type                       Submachine gun//n//nWeight                     0.5 kg (1.1 lb)//n//nLength                     503 mm (19.8 in) (extended)//n//n                           262 mm (10.3 in) (folded)//n//nBarrel                     length 168 mm//n//nCartridge                  9×19mm Parabellum//n//nAction                     Blowback//n//nMuzzle                     velocity 380 m/s//n//nFeed system                32-round box magazine or 33 round box magazine
gun-60000019,
gun-10000020,Vector
gun-40000020,SA//cSaori Hayami//c
gun-50000020,Type                       Submachine gun//n//nWeight                     6 lb (2.7 kg) (SMG & SBR/SO)//n//n                           7 lb (3.2 kg) (CRB/SO)//n//nLength                     24.3 in (620 mm) (SMG & SBR/SO)//n//n                           16 in (410 mm) w/stock folded//n//n                           34.8 in (880 mm) (CRB/SO)//n//n                           26.5 in (670 mm) w/stock folded//n//nBarrel length              5.5 in (140 mm) (SMG//c SBR/SO//c SDP)//n//n                           16 in (410 mm) (CRB/SO)//n//n                           18.6 in (470 mm) (CRB/SO @ Canada)//n//nCartridge                  .45 ACP (11.43x23 mm)//n//nAction                     Delayed blowback//c closed bolt//n//nRate of fire               Prototype: 1//c500 rounds per minute//n//n                           Vector SMG: 1//c200 RPM//n//n                           Civilian models: semi-auto only//n//nEffective firing range     55 yards (70 yards with 16 inch barrel)//n//nFeed system                10 & 13-round detachable box magazine//n//n                           25-round w/optional "MagEx 25+" extension//n//nSights                     Flip-up iron//n//n                           MIL-STD-1913 rail provided for optics
gun-60000020,
gun-10000021,PPSh-41
gun-40000021,和茶//cUesaka Sumire//c
gun-50000021,Type                       Submachine Gun//n//nWeight                     3.63 kg (8.0 lb) (without magazine)//n//nLength                     843 mm (33.2 in)//n//nBarrel length              269 mm (10.6 in)//n//nCartridge                  7.62×25mm Tokarev//n//nAction                     Blowback//c open bolt//n//nRate of fire               900 to over 1000 rounds/min//n//nMuzzle velocity            488 m/s (1//c600.6 ft/s)//n//nEffective firing range     125 - 150 m//n//nMaximum firing range       200m - 250m //n//nFeed system                35-round box magazine or 71-round drum magazine//n//nSights                     Iron sights
gun-60000021,
gun-10000022,PPS-43
gun-40000022,两卡车//cUesaka Sumire//c
gun-50000022,Type                       Submachine Gun//n//nWeight                     3.04 kg (6.7 lb)//n//nLength                     820 mm (32.3 in) stock extended / 615 mm (24.2 in) stock folded//n//nBarrel length              243 mm (9.6 in)//n//nCartridge                  7.62×25mm Tokarev//n//nAction                     Blowback//c open bolt//n//nRate of fire               500-600 rounds/min (cyclic rate)//n//n                           100 rounds/min (effective rate)//n//nMuzzle velocity            Approx. 500 m/s (1//c640 ft/s)//n//nEffective firing range     100 m - 150 m//n//nMaximum firing range       200 m//n//nFeed system                35-round detachable box magazine//n//nSights                     Flip rear sight//c fixed blade front sight
gun-60000022,
gun-10000023,PP-90
gun-40000023,NIXOO//cShiki Aoki//c
gun-50000023,Type                       Submachine Gun//n//nWeight                     1.83 kg (4.03 lb) (empty)//n//n                           2.23 kg (4.9 lb) (loaded)//n//nLength                     490 mm (19.3 in) (unfolded)//n//nBarrel length              200 mm//n//nCartridge                  9×18mm Makarov//n//nAction                     Blowback//n//nRate of fire               600–700 rounds/min//n//nMuzzle velocity            Approx. 320 m/s (1//c050 ft/s)//n//nEffective firing range     100 meters//n//nFeed system                30-round detachable box magazine//n//nSights                     Rear notch//c post front sight
gun-60000023,
gun-10000024,PP-2000
gun-40000024,NoriZC//cTamari Hinata//c
gun-50000024,Type                       Submachine gun//n//n                           automatique//n//nWeight                     1.4 kg (3.09 lb)//n//nLength                     555 mm (21.9 in) stock extended//n//n                           340 mm (13.4 in) stock folded//n//nBarrel length              182 mm (7.2 in)//n//nWidth                      34 mm (1.3 in)//n//nCartridge                  9×19mm Parabellum//n//n                           9×19mm 7N21 +P+//n//n                           9×19mm 7N31 +P+//n//nAction                     Straight blowback//n//nRate of fire               600–800 rounds/min//n//nEffective firing range     100 m (9×19mm Parabellum)//c 200 m (9×19mm 7N31 +P+)//n//nFeed system                20 or 44-round detachable box magazine//n//nSights                     Front post//c rear notch; //n//n                           MIL-STD-1913 rail provided for optics
gun-60000024,
gun-10000025,MP40
gun-40000025,废人//cEriko Matsui//c
gun-50000025,Type                       Submachine gun//n//nWeight                     3.97 kg (8.75 lb)//n//nLength                     833 mm (32.8 in) stock extended / //n//n                           630 mm (24.8 in) stock folded//n//nBarrel                     length 251 mm (9.9 in)//n//nCartridge                  9×19mm Parabellum//n//nAction                     Straight blowback//c open bolt//n//nRate of fire               500–550 rounds/min//n//nMuzzle velocity            400 m/s (1//c312 ft/s)//n//nEffective firing range     100 – 200 m//n//nMaximum firing range       200 m//n//nFeed system                32-round detachable box magazine //n//n                           64-round with dual magazines//n//nSights                     Hooded front blade
gun-60000025,
gun-10000026,MP5
gun-40000026,Saru//cNaomi Mukaiyama//c
gun-50000026,Type                       Submachine gun//n//nWeight                     2.7 kg (6.0 lb) fixed stock ///n//n                           2.85 kg (6.3 lb) retractable stock //n//nLength                     660 mm (26.0 in) stock extended ///n//n                           490 mm (19.3 in) stock collapsed //n//nBarrel length              225 mm (8.9 in) //n//nWidth                      50 mm (2.0 in) //n//nHeight                     260 mm (10.2 in) //n//nCartridge                  9×19mm Parabellum//n//n                           10mm Auto (MP5/10)//n//n                           .40 S&W (MP5/40)//n//nAction                     Roller-delayed blowback//c closed bolt//n//nMuzzle velocity            425 m/s (1//c394 ft/s) (MP5/10)//n//n                           315 m/s (1//c033 ft/s) (MP5/40)//n//nEffective firing range     125 m (410 ft) (MP5/10)//n//n                           100 m (328 ft) (MP5/40)//n//nFeed system                15- or 30- round detachable box magazine//c //n//n                           100-round Beta C-Mag drum magazine//n//nSights                     Iron sights. Rear: rotary drum; front: hooded post 
gun-60000026,
gun-10000027,스콜피온
gun-40000027,SA//cEriko Matsui//c
gun-50000027,Type                       Submachine gun//n//nWeight                     1.30 kg (2.87 lb) (vz. 61)//n//nLength                     517 mm (20.4 in) stock extended//n//n                           270 mm (10.6 in) stock folded//n//nWidth                      43 mm (1.7 in) (vz. 61//c vz. 61 E)//n//n                           49 mm (1.9 in) (vz. 82//c vz. 83)//n//nCartridge                  .32 ACP (7.65×17mm Browning SR) (vz. 61//c vz. 61 E)//n//nAction                     Blowback//c closed bolt//n//nRate of fire               850 rounds/min (vz. 61//c vz. 61 E)//n//nMuzzle velocity            320 m/s (1//c050 ft/s) (vz. 61//c vz. 61 E//c vz. 82)//n//nEffective firing range     50–150 m(vz. 61//c .32 ACP)//n//nFeed system                10 or 20-round curved magazine//c //n//n                           straight box magazine in 9 mm variants//n//nSights                     Adjustable front post//c flip-up rear sight//n//n                           148 mm (5.8 in) sight radius
gun-60000027,
gun-10000029,스텐MkⅡ
gun-40000029,真名//cKami Daimon//c
gun-50000029,Type                       Submachine gun//n//nWeight                     3.2 kg (7.1 lb)//n//nLength                     760 mm (30 in)//n//nBarrel length              196 mm (7.7 in)//n//nCartridge                  9×19mm Parabellum//n//nAction                     Blowback-operated//c Open bolt//n//nRate of fire               version dependent; ~500-round/min//n//nMuzzle velocity //n//n                           365 m/s (1//c198 ft/s)//n//n                           305 m/s (1//c001 ft/s) (suppressed models)//n//nEffective firing range     100 m//n//nFeed system                32-round detachable box magazine//n//nSights                     fixed peep rear//c post front
gun-60000029,
gun-10000031,베레타 38형
gun-40000031,ALLENES//cHaruka Takahashi//c
gun-50000031,Type                       Submachine gun//n//nWeight                     MAB 38A: 4.2 kg (empty)//n//n                           MAB 38/42: 3.27 kg (empty)//n//n                           MAB 38/49: 3.25 kg (empty)//n//nLength                     MAB 38A: 946mm//n//n                           MAB 38/42: 800mm//n//n                           MAB 38/49: 798mm//n//nBarrel length              MAB 38A: 315mm//n//n                           MAB 38/42: 213mm//n//n                           MAB 38/49: 210mm//n//nCartridge                  9×19mm Parabellum//n//nAction                     Blowback//n//nRate of fire               600 rpm//n//nMuzzle velocity            429 m/s (1//c407.1 ft/s)//n//nEffective firing range     250 m (273.4 yd)//n//nFeed system                10//c 20//c 30//c or 40-Round Detachable Box Magazine
gun-60000031,
gun-10000032,마이크로 우지
gun-40000032,死盖//cSaori Onishi//c
gun-50000032,Type                       Submachine gun//n//nWeight                     3.5 kg (7.72 lb)//n//nLength                     445 mm (17.5 in) stockless//n//n                           470 mm (18.5 in) folding stock collapsed//n//n                           640 mm (25 in) folding stock extended//n//nBarrel length              260 mm (10.2 in)//n//nCartridge                  9×19mm Parabellum//n//n                           .22 LR//n//n                           .45 ACP//n//n                           .41 AE//n//nAction                     Blowback//c open bolt//n//nRate of fire               600 rounds/min//n//nMuzzle velocity            400 m/s (9mm)//n//nEffective firing range     200 m//n//nFeed system                10 (.22 and .41 AE)//n//n                           16 (.45 ACP)//n//n                           20//c 25//c 32//c 40//c 50 (9 mm) magazines//n//nSights                     Iron sights
gun-60000032,
gun-10000033,m45
gun-40000033,TAMAXI//cMikako Takahashi//c
gun-50000033,Type                       Submachine gun//n//nWeight                     3.35 kg without magazine//n//nLength                     550/808 mm//n//nBarrel length              212 mm//n//nCartridge                  9×19mm m/39B//n//nCalibre                    9mm//n//nAction                     Simple (straight) Blowback//n//nRate of fire               600 round/min//n//nMuzzle velocity            425 m/s//n//nEffective firing range     250 m//n//nFeed                       system 36-round box magazine//n//nFeed                       system 36-round box magazine
gun-60000033,
gun-10000034,M1 개런드
gun-40000034,哈路卡//cRisa Taneda//c
gun-50000034,Type                       Semi-automatic rifle//n//nWeight                     9.5 lb (4.31 kg) to 11.6 lb (5.3 kg)//n//nLength                     43.5 in (1//c100 mm)//n//nBarrel length              24 in (609.6 mm)//n//nCartridge                  .30-06 Springfield (7.62×63mm)//n//n                           7.62×51mm NATO (.308 Winchester) //n//n                           (Used by the U.S. Navy and some commercial//n//n                           companies to modernize the M1 and//n//n                           increase performance)//n//nAction                     Gas-operated//c rotating bolt//n//nRate of fire               40−50 rounds/min//n//nMuzzle velocity            2//c800 ft/s (853 m/s)//n//nEffective firing range     500 yd (457 m)//n//nFeed system                8-round en-bloc clip//c //n//n                           nternal magazine//n//nSights                     Rear sight: adjustable aperture//n//n                           front sight: wing protected post
gun-60000034,
gun-10000035,M1A1
gun-40000035,哈路卡//cSuzuko Mimori//c
gun-50000035,Type                       Carbine //n//nWeight                     5.2 lb (2.4 kg) //n//nLength                     35.6 in (900 mm)//n//nBarrel length              18 in (460 mm)//n//nCartridge                  .30 Carbine//n//nAction                     Gas-operated (short-stroke piston)//c rotating bolt//n//nRate of fire               850–900 rounds/min //n//nMuzzle velocity            1//c990 ft/s (607 m/s)//n//nEffective firing range     300 yd (270 m)//n//nFeed system                15- or 30-round detachable box magazine//n//nSights                     Rear sight: aperture; L-type flip or adjustable//c front sight: wing-protected post
gun-60000035,
gun-10000036,스프링필드
gun-40000036,多元菌//cYui Horie//c
gun-50000036,Type                       Bolt-action rifle//n//nWeight                     3.94 kg (8.7 lb)//n//nLength                     1//c097 mm (43.2 in)//n//nBarrel length              610 mm (24 in)//n//nCartridge                  .30-03; .30-06 Springfield//n//nAction                     Bolt action//n//nRate of fire               20-30 rounds/min//n//nMuzzle velocity            854 metres per second (2//c800 ft/s)//n//nEffective firing range     914 metres (2//c999 ft)//n//nMaximum firing range       5//c029 metres (5//c500 yd) //n//n                           with .30 M1 Ball cartridge//n//nFeed system                5-round stripper clip//c //n//n                           25-round (Air Service variant) //n//n                           internal box magazine//n//nSights                     Flip-up rear sight graduated to//n//n                           2//c500 metres (2//c700 yd)//c //n//n                           barleycorn-type front sight//n//n                           M1903A3: Aperture rear sight//c //n//n                           barleycorn-type front sight//n//nBlade type                 Bayonet
gun-60000036,
gun-10000037,M14
gun-40000037,Rain Lan//cSaori Onishi //c
gun-50000037,Type                       Battle rifle//n//nWeight                     9.2 lb (4.1 kg) empty//n//n                           10.7 lb (5.2 kg) w/ loaded magazine//n//nLength                     44.3 in (1//c126 mm)//n//nBarrel length              22 in (559 mm)//n//nCartridge                  7.62×51mm NATO (.308 Winchester)//n//nAction                     Gas-operated//c rotating bolt//n//nRate of fire               700–750 rounds/min//n//nMuzzle velocity            850 m/s (2//c800 ft/s)//n//nEffective firing range     460 m (500 yd)//n//n                           800+ m (875+ yd) (with optics)//n//nFeed system                20-round detachable box magazine//n//nSights                     Aperture rear sight//c "barleycorn" front sight
gun-60000037,
gun-10000038,M21
gun-40000038,卑しい人间//cEri Kitamura//c
gun-50000038,Type                       Designated marksman rifle//n//nWeight                     5.27 kg (11.6 lb)//n//nLength                     1118 mm (44 in)//n//nBarrel length              560 mm (22 in)//n//nCartridge                  7.62×51mm NATO//n//nAction                     Gas-operated//c rotating bolt//n//nMuzzle velocity            853 m/s (2//c800 ft/s)//n//nEffective firing range     822 m (900 yd)//n//nFeed system                5-//c 10-//c or 20-round detachable box magazine//n//nSights                     Front: National Match front blade .062//n//n                           Rear: Match-grade hooded aperture with one-half minute                            adjustments for both windage and elevation.//n//n                           26¾ in sight radius.
gun-60000038,
gun-10000039,모신나강
gun-40000039,防弹乳牛//cUesaka Sumire//c
gun-50000039,Type                       Boltaction rifle//n//nWeight                     4 kg (8.8 lb)//n//nLength                     1//c232 mm (48.5 in)  //n//nBarrel length              730 mm (29 in) //n//nCartridge                  7.62×54mmR//n//nAction                     Bolt action//n//nRate of fire               10 rounds per minute//n//nMuzzle velocity            Light ball//c~865 m/s //n//nEffective firing range     500 m (550 yards)//n//nFeed system                5-round non-detachable magazine//c loaded individually or//n//n                           with five-round stripper clips.//n//nSights                     Rear: ladder//c graduated from 100 m to 2//c000 m
gun-60000039,
gun-10000040,SVT-38
gun-40000040,sola7764//cKaori Ide//c
gun-50000040,Type                       Semi-automatic Battle rifle//n//nWeight                     3.85 kilograms (8.5 lb) unloaded//n//nLength                     1//c226 millimetres (48.3 in)//n//nBarrel length              625 millimetres (24.6 in)//n//nCartridge                  7.62×54mmR//n//nAction                     Gas-operated short-stroke piston//c tilting bolt//n//nMuzzle velocity            830–840 m/s (2//c720–2//c760 ft/s)//n//nEffective firing range     500 metres (550 yd)//c 1//c000 metres (1//c100 yd)(with scope)//n//nFeed system                10-round detachable box magazine
gun-60000040,
gun-10000041,시모노프
gun-40000041,phantania//cAya Suzaki//c
gun-50000041,Type                       Semi-automatic Carbine//n//nWeight                     3.85 kg (8.5 lb)//n//nLength                     1//c020 mm (40 in)//n//nBarrel length              520 mm (20 in)//n//nCartridge                  7.62×39mm M43//n//nAction                     Short stroke gas piston//c//n//n                           tilting bolt//c self-loading//n//nRate of fire               Semi-automatic 35–40 (rd/min)//n//nMuzzle velocity            735 m/s (2//c411 ft/s)//n//nEffective firing range     400 metres (440 yd)//n//nFeed system                10 round stripper clip//cinternal box magazine//n//n                           and also reliable 20 round detachable box//n//n                           magazines are available as well.//n//nSights                     Hooded post front sight//c tangent notch //n//n                           rear sight graduated from 100 to 1//c000 meters.
gun-60000041,
gun-10000042,PTRD
gun-40000042,Evan揚//cAi Shimizu //c
gun-50000042,Type                       Anti-tank rifle//n//nWeight                     17.3 kg (38.1 lbs)//n//nLength                     2//c020 mm (79.5 in.)//n//nBarrel length              1//c350 mm (53.1 in.)//n//nCrew                       2//n//nCartridge                  14.5x114mm (B-32//c BS-41)//n//nAction                     Single-fire//n//nRate of fire               Single shot//cuser dependent//n//nMuzzle velocity            1//c114 m/s (3//c655 ft/s)  //n//nEffective firing range     300 m (on personnel targets//c dispersion of //n//n                           bullets on 300 meters 0//c36 m)//n//nMaximum firing range       1//c000 m//n//nFeed system                Single shot//c no magazine//n//nSights                     Front post//c rear notch 
gun-60000042,
gun-10000043,SVD
gun-40000043,幻象黑兔//cMinami Tanaka//c
gun-50000043,Type                       Semi-automatic sniper rifle//n//nWeight                     4.30 kg (9.48 lb) (with scope and unloaded magazine)//n//nLength                     1//c225 mm (48.2 in) //n//nBarrel length              620 mm (24.4 in)//n//nCartridge                  7.62×54mmR//n//nAction                     Gas-operated//c rotating bolt//n//nRate of fire               30 rounds/min//n//nMuzzle velocity            830 m/s (2//c723 ft/s) //n//nEffective firing range     800 m (875 yd)//n//nFeed system                10-round detachable box magazine//n//nSights                     PSO-1 telescopic sight//c 1PN51/1PN58 night vision sights and iron sights with an adjustable rear notch sight
gun-60000043,
gun-10000044,SV-98
gun-40000044,幻象黑兔//cMamiko Hanada//c
gun-50000044,Type                       Sniper rifle//n//nWeight                     5.8 kg (12.8 lb) w/o optical sight and silencer//n//n                           7.8 kg (17.2 lb) with optical sight and suppressor//n//nLength                     1//c200 mm (47.24 in)//n//n                           1//c375 mm (54.13 in) with suppressor//n//nBarrel length              650 mm (25.59 in) (4 grooves//c right-hand twist)//n//nCartridge                  7.62×54mmR//n//n                           7.62×51mm NATO//n//nCaliber                    7.62mm//n//nAction                     Bolt action//n//nMuzzle velocity            820 m/s (2//c690 ft/s)//n//nEffective firing range     600 m (656 yd) iron sights//n//n                           1//c000 m (1//c094 yd) optical sight//n//nFeed system                10-round detachable magazine//n//nSights                     Telescopic sight and iron sights
gun-60000044,
gun-10000046,Kar98k
gun-40000046,芙芙酱//cAi Kayano //c
gun-50000046,Type                       Bolt-action rifle//n//nWeight                     3.7 kg (8.2 lb) – 4.1 kg (9.0 lb)//n//nLength                     1//c110 mm (43.70 in)//n//nBarrel length              610 mm (24.02 in)//n//nCartridge                  7.92×57mm Mauser//n//nAction                     Bolt-action//n//nMuzzle velocity            760 m/s (2//c493 ft/s)//n//nEffective firing range     500 m (550 yd) with iron sights//n//n                           1//c000 m (1//c090 yd) with telescopic sight//n//nFeed system                5-round stripper clip//c internal magazine//n//nSights                     Iron sights or telescopic sight.
gun-60000046,
gun-10000047,G43
gun-40000047,河马//cNozomi Amane//c
gun-50000047,Type                       Semi-automatic rifle//n//nWeight                     4.4 kg (9.7 lbs)//n//nLength                     1130 mm (44.5 in )//n//nBarrel length              550 mm (21.5 inches)//n//nCartridge                  7.92×57mm Mauser//n//nAction                     Gas-operated//n//nMuzzle velocity            746–776 m/s (2//c448–2//c546 ft/s)//n//nEffective firing range     500 m//c 800 m with scope//n//nFeed system                10-round detachable box magazine//c stripper clip fed//n//nSights                     Iron sights//c Zf42 optical crosshair sight
gun-60000047,
gun-10000048,WA2000
gun-40000048,多元菌//cHaruka Tomatsu//c
gun-50000048,Type                       Semi-automatic Bullpup sniper rifle//n//nWeight                     2.31 kg (5.1 lb) empty (no scope)//n//n                           2.72 kg (6 lb) loaded (no scope)//n//n                           6.95 (6.6 lb) loaded (with scope)//n//nLength                     905 mm (35.6 in) //n//nBarrel length              650 mm (25.6 in)//n//nCartridge                  7.62×51mm NATO //n//n                           .300 Winchester Magnum //n//n                           7.5×55mm Swiss//n//nAction                     Gas-operated//c rotating bolt//n//nRate of fire               Semi-automatic//n//nEffective firing range     700 m (766 yds)//n//nFeed system                6-round detachable box magazine.//n//n                           A 10-round magazine was also made //n//n                           but never used nor exported.//n//nSights                     Schmidt & Bender 2.5–10X telescopic sight
gun-60000048,
gun-10000049,56식 반
gun-40000049,KAN//cRui Kariya//c
gun-50000049,Type                       Semi-automatic rifle//n//nWeight                     3.85 kg  //n//nLength                     1025 mm //n//nBarrel length              521 mm //n//nCartridge                  7.62 × 39mm//n//nAction                     Short stroke gas piston//c rotating bolt//n//nMuzzle velocity            730 m/s //n//nEffective firing range     400 m //n//nFeed system                10-round detachable box magazine
gun-60000049,
gun-10000050,리엔필드
gun-40000050,rei//cHaruka Tomatsu//c
gun-50000050,Type                       Bolt-action rifle//n//nWeight                     4 kg (8.8 lb)//n//nLength                     SMLE: 44 in (1//c118 mm)//n//nBarrel length              MLE: 30.2 in (767 mm)//n//n                           SMLE: 25.2 in (640 mm)//n//nCartridge                  .303 Mk VII SAA Ball//n//nAction                     Bolt-action//n//nRate of fire               20–30 aimed shots per minute//n//nMuzzle velocity            744 m/s (2//c441 ft/s)//n//nEffective firing range     550 yd (503 m)//n//nMaximum firing range       3//c000 yd (2//c743 m)//n//nFeed system                10-round magazine//c loaded with 5-round charger clips//n//nSights                     Sliding ramp rear sights//c fixed-post front sights//c//n//n                           "dial" long-range volley sights;//n//n                           telescopic sights on sniper models.
gun-60000050,
gun-10000051,FN-49
gun-40000051,Bison仓鼠//cMami Misaki//c
gun-50000051,Type                       Semi-Automatic Rifle//n//nWeight                     4.31 kg (9 lb 8 oz)//n//nLength                     1116 mm (43.5 in)//n//nBarrel length              590 mm (23.2 in)//n//nCartridge                  .30-06 Springfield//c//n//n                           7.92×57mm Mauser//c//n//n                           7×57mm Mauser//c//n//n                           7.62×51mm NATO//c//n//n                           7.65×53mm Argentine//n//nAction                     Gas-operated//c tilting bolt//n//nFeed system                10-round fixed box magazine//c//n//n                           20-round detachable box magazine in Argentine //n//n                           7.62 NATO conversions//n//nSights                     Iron sights
gun-60000051,
gun-10000052,BM59
gun-40000052,原子Dan//cTomoyo Chuujou//c
gun-50000052,Type                       Battle rifle//n//nWeight                     4.4 kg (9.70 lb)//n//nLength                     1//c095 mm (43.1 in)//n//nBarrel length              491 mm (19.3 in)//n//nCartridge                  7.62×51mm//n//nAction                     Gas-operated//c rotating bolt//n//nRate of fire               750 rounds per minute  //n//nFeed system                120-round detachable box magazine//n//nSights                     Rear aperture//c front post
gun-60000052,
gun-10000053,NTW-20
gun-40000053,RAN//cAi Kayano //c
gun-50000053,Type                       Anti-materiel rifle//n//nWeight                     31 kg //n//nLength                     1//c795 mm //n//nBarrel length              1//c000 mm//n//nCrew                       Two; rifle breaks down into two parts for //n//n                           transport and fits into two backpacks//n//n                           weighing 15kg each//c one containing the weapon //n//n                           receiver section//c while the other contains the //n//n                           barrel and ammunition//n//nCartridge                  20 × 82mm//n//nAction                     Bolt action//c recoiling barrel//n//nMuzzle velocity            720 m/s //n//nEffective firing range     1//c500m //n//nFeed system                3-round detachable box magazine //n//n                           (20 x 82mm and 14.5 x 114mm)//n//n                           Single shot (20 x 110mm)//n//nSights                     8 x 56 Lynx Telescopic sight
gun-60000053,
gun-10000054,M16A1
gun-40000054,海猫络合物//cYamane Nozomi//c
gun-50000054,Type                       Assault rifle//n//nWeight                     7.18 lb (3.26 kg) (unloaded)//n//n                           8.79 lb (3.99 kg) (loaded)//n//nLength                     39.5 in (1//c003 mm)//n//nBarrel length              20 in (508 mm)//n//nCartridge                  5.56×45mm NATO//n//nAction                     Gas-operated//c//n//n                           rotating bolt (direct impingement)//n//nRate of fire               12–15 rounds/min sustained//n//n                           45–60 rounds/min semi-automatic//n//n                           700–950 rounds/min cyclic//n//nMuzzle velocity            3//c110 ft/s (948 m/s)//n//nEffective firing range     550 m (601 yd) (point target)//n//n                           800 m (875 yd) (area target)//n//nMaximum firing range       3//c600 m (3//c937 yd)//n//nFeed system                20-round detachable box magazine://n//n                           0.211 lb (96 g) empty / 0.738 lb (335 g) full)//n//n                           30-round detachable box magazine://n//n                           0.257 lb (117 g) empty / 1.06 lb (480 g) full)//n//n                           Beta C-Mag 100-round double-lobed drum://n//n                           2.20 lb (1//c000 g) empty / 4.81 lb (2//c180 g) full)//n//nSights                     Iron sights
gun-60000054,
gun-10000055,M4A1
gun-40000055,海猫络合物//cHaruka Tomatsu//c
gun-50000055,Type                       Assault rifle//n//nWeight                     6.36 lb (2.88 kg) empty//n//n                           7.5 lb (3.4 kg) with 30 rounds//n//nLength                     33 in (840 mm) (stock extended)//n//n                           29.75 in (756 mm) (stock retracted)//n//nBarrel length              14.5 in (370 mm)//n//nCartridge                  5.56×45mm NATO//n//nCaliber                    5.56 mm (.223 in)//n//nBarrels                    1//n//nAction                     Gas-operated//c rotating bolt (Direct impingement)//n//nRate of fire               700–950 round/min cyclic//n//nMuzzle velocity            2//c900 ft/s (880 m/s)//n//nEffective firing range     500 m (550 yd)//n//nFeed system                30-round box magazine or other STANAG magazines.//n//n                           Other magazines with different //n//n                           capacities also available.//n//nSights                     Iron sights or various optics
gun-60000055,
gun-10000056,M4 SOPMODII
gun-40000056,海猫络合物//cYukari Tamura//c
gun-50000056,Type                       Assault rifle//n//nWeight                     6.36 lb (2.88 kg) empty//n//n                           7.5 lb (3.4 kg) with 30 rounds//n//nLength                     33 in (840 mm) (stock extended)//n//n                           29.75 in (756 mm) (stock retracted)//n//nBarrel length              14.5 in (370 mm)//n//nCartridge                  5.56×45mm NATO//n//nCaliber                    5.56 mm (.223 in)//n//nBarrels                    1//n//nAction                     Gas-operated//c rotating bolt (Direct impingement)//n//nRate of fire               700–950 round/min cyclic//n//nMuzzle velocity            2//c900 ft/s (880 m/s)//n//nEffective firing range     500 m (550 yd)//n//nFeed system                30-round box magazine or other STANAG magazines.//n//n                           Other magazines with different //n//n                           capacities also available.//n//nSights                     Iron sights or various optics
gun-60000056,
gun-10000057,ST AR-15
gun-40000057,LIN+//cEmiri Katou//c
gun-50000057,Type                       Semi-automatic rifle//n//nWeight                     2.27 kg–3.9 kg (5.5–8.5 lb)//n//nLength                     991 mm (39 in)//n//nBarrel length              24 inches (610 mm)//n//n                           20 inches (510 mm) (standard)//n//n                           18 inches (460 mm)//n//n                           16 inches (410 mm) (civilian standard)//n//n                           14.5 inches (370 mm) M4 Military Standard//n//n                           11.5 inches (290 mm)//n//n                           10 inches (250 mm)//n//n                           7 inches (180 mm)//n//n                           6.5 inches (170 mm)//n//nCartridge                  5.56×45mm NATO and others//n//nAction                     Direct impingement or Gas Piston / Via a Rotating bolt//n//nRate of fire               Depends on operator's speed when pulling trigger//n//nMuzzle velocity            975 m/s (3//c200 ft/s)//n//nEffective firing range     400–600 m (avg 547 yd)//n//nFeed system                Various STANAG magazines. 5–100-round capacity//n//nSights                     Adjustable front and rear iron sights
gun-60000057,
gun-10000058,AK-47
gun-40000058,厕所董事长//cRina Sato//c
gun-50000058,Type                       Assault rifle //n//nWeight                     Without magazine:3.47 kg (7.7 lb)//n//n                           Magazine//c empty:0.43 kg (0.95 lb) (early issue)//n//n                                           0.33 kg (0.73 lb) (steel)//n//n                                           0.25 kg (0.55 lb) (plastic)//n//n                                           0.17 kg (0.37 lb) (light alloy)//n//nLength                     Fixed wooden stock:880 mm (35 in)//n//n                           875 mm (34.4 in) folding stock extended//n//n                           645 mm (25.4 in) stock folded//n//nBarrel length              Overall length:415 mm (16.3 in)//n//n                           Rifled bore length:369 mm (14.5 in)//n//nCartridge                  7.62×39mm//n//nAction                     Gas-operated//c rotating bolt//n//nRate of fire               Cyclic rate of fire:600 rds/min//n//n                           Practical rate of fire:Semi-auto 40 rds/min//n//n                           Full-auto 100 rds/min//n//nMuzzle velocity            715 m/s (2//c350 ft/s)//n//nEffective firing range     350 m (380 yd)//n//nFeed system                30-round detachable box magazine//n//nSights                     100–800 m adjustable iron sights//n//n                           Sight radius:378 mm (14.9 in)
gun-60000058,
gun-10000060,AS Val
gun-40000060,防弹乳牛//cUesaka Sumire//c
gun-50000060,Type                       Assault Rifle //n//nWeight                     2.5 kg (5.51 lb) empty//n//nLength                     875 mm (34.4 in) stock extended//n//n                           615 mm (24.2 in) stock folded//n//nBarrel length              200 mm (7.9 in)//n//nCartridge                  9x39mm//n//nAction                     Gas-operated//c rotating bolt//n//nRate of fire               900 rounds/min//n//nMuzzle velocity            295 m/s (968 ft/s)//n//nEffective firing range     300 m//n//nMaximum firing range       400 m//n//nFeed system                20-round detachable box magazine//n//n                           (optional 10-round magazine from the VSS or//n//n                           30-round magazine from the SR-3M)//n//nSights                     Front post//c rear sector sight;//n//n                           day or night-time optics
gun-60000060,
gun-10000061,StG44
gun-40000061,八才//cAi Kayano //c
gun-50000061,Type                       Assault rifle//n//nWeight                     4.6 kg (10 lb) unloaded with magazine//n//n                           5.13 kg (11.3 lb) loaded//n//nLength                     94 cm (37 in)//n//nBarrel length              42 cm (16.5 in)//n//nCartridge                  7.92×33mm Kurz//c(aka. 7.9mm Kurz or Pistolenpatrone 43)//n//nAction                     Gas-operated//c tilting bolt//c full auto or semi-auto//n//nRate of fire               550–600 rounds/min//n//nMuzzle velocity            685 m/s (2//c247 ft/s)//n//nEffective firing range     300 m (automatic) 600 m (semi-automatic)//n//nFeed system                30-round detachable box magazine//n//nSights                     Adjustable sights//c rear: V-notch; front: hooded post
gun-60000061,
gun-10000062,G41
gun-40000062,NS//cRie Kugimiya//c
gun-50000062,Type                       Assault rifle//n//nWeight                     4.1 kg (9.04 lb)//n//nLength                     997 mm (39.3 in)//n//nBarrel length              450 mm (17.7 in)//n//nCartridge                  5.56×45mm NATO//n//nAction                     Roller delayed blowback//n//nRate of fire               850 rounds/min//n//nMuzzle velocity            920 m/s (3//c018 ft/s)//n//nEffective firing range     100—400 m sight adjustments//n//nFeed system                STANAG magazines//n//nSights                     Rotary rear diopter drum//c hooded front post
gun-60000062,
gun-10000063,G3
gun-40000063,PHI//cKaori Yoshioka//c
gun-50000063,Type//n//n                       Battle rifle//n//nWeight//n//n                       4.1 kg (9.04 lb) //n//nLength//n//n                       1//c025 mm (40.4 in) (G3A3)//n//nBarrel length//n//n                       450 mm (17.7 in)//n//nCartridge//n//n                       7.62×51mm NATO//n//nAction//n//n                       Roller-delayed blowback//n//nRate of fire//n//n                       500–600 rounds/min//n//nMuzzle velocity//n//n                       800 m/s (2//c625 ft/s)//n//nEffective firing range//n//n                       500 metres (550 yd)//c 100–400 m sight adjustments//n//nFeed system//n//n                       20-round detachable box and 50-round drum magazine//n//nSights//n//n                       Rear: rotary diopter; front: hooded post
gun-60000063,
gun-10000064,G36
gun-40000064,薯子Imoko//cAmi Koshimizu//c
gun-50000064,Type                       Assault rifle//n//nWeight                     3.63 kg (8.00 lb)//n//nLength                     999 mm (39.3 in) stock extracted//n//n                           758 mm (29.8 in) stock folded//n//nBarrel length              480 mm (18.9 in)//n//nCartridge                  5.56×45mm NATO//n//nAction                     Short-stroke piston//c rotating bolt//n//nRate of fire               750 rounds/min cyclic//n//nMuzzle velocity            920 m/s (3//c018 ft/s)//n//nEffective firing range     800 metres (870 yd)//c 200–600 m sight adjustment//n//nFeed system                30-round detachable box magazine or 100-round C-Mag drum magazine//n//nSights                     Reflex sight with 1× magnification//c telescopic sight with 3× magnification (export version has a 1.5× magnified sight) and back-up fixed notch sight
gun-60000064,
gun-10000065,HK416
gun-40000065,NIXOO//cAi Nonaka//c
gun-50000065,Type                       Assault rifle//n//nWeight                     2.950 kg (6.50 lb)//n//nLength                     690 mm (27.2 in) stock extended //n//n                           560 mm (22.0 in) stock collapsed//n//nBarrel length              228 mm (9.0 in)//n//nWidth                      78 mm (3.1 in)//n//nHeight                     236 mm (9.3 in)//n//nCartridge                  5.56×45mm NATO//n//nAction                     Short-stroke piston//c rotating bolt//n//nRate of fire               700 – 900 rounds/min (cyclic)//n//nMuzzle velocity            Varies according to barrel length://n//n                           788 m/s (10.4 in)//n//n                           882 m/s (14.5 in)//n//n                           890 m/s (16.5 in)//n//n                           917 m/s (19.9 in)//n//nEffective firing range     300 m (11´´Model) Point Targets//n//nMaximum firing range       400m (11´´ Model) Area Targets//n//nFeed system                20//c 30-round detachable STANAG magazine//c //n//n                           100-round detachable Beta C-Mag//n//nSights                     Rear rotary diopter sight and front post//c//n//n                           Picatinny rail
gun-60000065,
gun-10000066,56-1식
gun-40000066,CanceR//cSora Amamiya//c
gun-50000066,Type                       Assault rifle//n//nWeight                     3.70 kg (8.16 lb)//n//nLength                     874 mm (34.4 in) w/ stock extended//c//n//n                           654 mm (25.7 in) w/ stock folded.//n//nBarrel length              414 mm (16.3 in)//n//nCartridge                  7.62×39mm//n//nCartridge                  7.62×39mm//n//nAction                     Gas-operated//c rotating bolt//n//nRate of fire               650 rounds/min //n//nMuzzle velocity            735 m/s (2//c411 ft/s)//n//nEffective firing range     100–800 m sight adjustments.//n//n                           Effective range 300-400 meters//n//nFeed system                20//c 30//c or 40-round detachable box magazine//n//nSights                     Adjustable Iron sights
gun-60000066,
gun-10000068,L85A1
gun-40000068,MKiiiiii//cYukiko Ayamiya//c
gun-50000068,Type//n//n                       Assault rifle//n//nWeight//n//n                       3.82 kg (8.4 lb) //n//nLength//n//n                       785 mm (30.9 in) //n//nBarrel length//n//n                       518 mm (20.4 in) //n//nCartridge//n//n                       5.56×45mm NATO//n//nAction//n//n                       Gas-operated//c rotating bolt//n//nRate of fire//n//n                       610-775 RPM//n//nMuzzle velocity//n//n                       930 m/s (3//c051 ft/s)//n//nEffective firing range//n//n                       300 m effective range used by one soldier.//n//n                       Effective at 600 m as a section using the LDS //n//n                       (lightweight day sight)//n//nMaximum firing range//n//n                       1000 m //n//nFeed system//n//n                       30-round detachable STANAG magazine//n//n                       30-round detachable polymer Magpul EMAG//n//nSights//n//n                       Telescopic SUSAT//c ACOG and ELCAN LDS scopes//c//n//n                       Aperture iron sights
gun-60000068,
gun-10000069,FAMAS
gun-40000069,KY//cEriko Matsui//c
gun-50000069,Type                       Bullpup assault rifle//n//nWeight                     3.61 kg (7.96 lb) ("FAMAS F1")//n//n                           3.8 kg (8.4 lb) ("FAMAS G2") //n//nLength                     757 mm (29.8 in)//n//n                           965 mm (38.0 in) with bayonet//n//nBarrel length              488 mm (19.2 in) ("F1/G2")//n//n                           405 mm (15.9 in) ("G2 Commando")//n//n                           320 mm (12.6 in) ("G2 SMG")//n//n                           620 mm (24.4 in) ("G2 Sniper")//n//nCartridge                  5.56×45mm NATO//n//nAction                     Lever-delayed blowback//n//nRate of fire               900–1000 rounds/min ("F1")//n//n                           1000–1100 rounds/min ("G2")//n//nMuzzle velocity            960 m/s (3//c100 ft/s) ("F1")//n//n                           925 m/s (3//c030 ft/s) ("G2")//n//nEffective firing range     300 m ("F1")//n//n                           450 m ("G2")//n//nMaximum firing range       3200 meters//n//nFeed system                25-round detachable box magazine ("F1")//n//n                           30-round detachable box magazine (STANAG) ("G2")//n//nSights                     Rear aperture fitted with tritium night inserts//c//n//n                           front post
gun-60000069,
gun-10000070,FNC
gun-40000070,麻将//cSumire Yatsurugi//c
gun-50000070,Type                       Assault rifle//n//nWeight                     Rifle: 3.840 kg (8.47 lb)//n//n                           Carbine: 3.7 kg (8.2 lb)//n//nLength                     Rifle: 997 mm (39.3 in) stock extended / //n//n                           766 mm (30.2 in) stock folded//n//n                           Carbine: 911 mm (35.9 in) stock extended / //n//n                           667 mm (26.3 in) stock folded//n//nBarrel length              Rifle: 449 mm (17.7 in) (rifle)//n//n                           Carbine: 363 mm (14.3 in)//n//nWidth                      70 mm (2.8 in) stock extended//n//n                           75 mm (3.0 in) stock folded//n//nHeight                     238 mm (9.4 in)//n//nCartridge                  5.56×45mm NATO//n//nAction                     Gas-operated//c rotating bolt//n//nRate of fire               Approx. 700 rounds/min//n//nMuzzle velocity            M193: 965 m/s (3//c166 ft/s)//n//n                           SS109: 925 m/s (3//c034.8 ft/s)//n//nEffective firing range     250–400 m sight adjustments//n//nMaximum firing range       450 m//n//nFeed system                30-round detachable box magazine (STANAG system)//n//nSights                     Rear flip aperture//c front post//n//n                           513 mm (20.2 in) sight radius (standard rifle)
gun-60000070,
gun-10000071,갈릴
gun-40000071,lyo//cKarin Mitarai//c
gun-50000071,Type//n//n                       Rifle//n//nWeight//n//n                       AR 5.56mm: 3.95 kg (8.7 lb)//n//n                       AR 7.62mm: 3.95 kg (8.7 lb)//n//nLength//n//n                       AR//c ARM 5.56mm: //n//n                       987 mm (38.9 in) stock extended //n//n                       742 mm (29.2 in) stock folded//n//n                       AR//c ARM 7.62mm: //n//n                       1//c050 mm (41.3 in) stock extended //n//n                       810 mm (31.9 in) stock folded//n//nBarrel length//n//n                       AR//c ARM 5.56mm: 460 mm (18.1 in)//n//n                       AR//c ARM 7.62mm: 535 mm (21.1 in)//n//nCartridge//n//n                       5.56×45mm NATO //n//n                       7.62×51mm NATO //n//nAction//n//n                       Gas-operated//c rotating bolt//n//nRate of fire//n//n                       630–750 rounds/min//n//nMuzzle velocity//n//n                       AR//c ARM 5.56mm: 950 m/s (3//c116.8 ft/s)//n//n                       AR//c ARM 7.62mm: 850 m/s (2//c788.7 ft/s)//n//nEffective firing range//n//n                       300–500 m sight adjustments//n//nFeed system //n//n                       5.56mm: 35//c 50//c 65-round detachable box magazine//n//n                       7.62mm: 25-round box magazine//n//nSights//n//n                       Flip-up rear aperture with protective ears//c //n//n                       Flip-up tritium night sights//chooded front post
gun-60000071,
gun-10000072,TAR-21
gun-40000072,木shiyo//cYume Maihara//c
gun-50000072,Type                       Bullpup assault rifle//n//nWeight                     3.27 kg (7.21 lb)(TAR-21)//n//nLength                     720 mm (28.3 in)(TAR-21//c STAR-21)//n//nBarrel length              460 mm (18.1 in)(TAR-21//c STAR-21)//n//nCartridge                  5.56×45mm NATO//n//nRate of fire               750–900 rounds/min//n//nMuzzle velocity            910 m/s (2//c986 ft/s)//n//nEffective firing range     550 m[clarification needed]//n//nFeed system                Standard 30-round detachable box Magazine//n//n                           Various STANAG magazines//n//nSights                     Meprolight MP 21//c ITL MARS with integrated//n//n                           laser and IR pointer//c Trijicon ACOG (STAR-21)//c //n//n                           EOTech holographic sight//c others available
gun-60000072,
gun-10000074,SIG-510
gun-40000074,spirtie//cMiki Amano//c
gun-50000074,Type                       Battle rifle//n//nWeight                     4.37 kg (9.63 lb) //n//nLength                     1//c015 mm (40.0 in) //n//nBarrel length              505 mm (19.9 in) //n//nCartridge                  7.62×51mm NATO //n//nAction                     Roller-delayed blowback//n//nRate of fire               450–600 rounds/min//n//nMuzzle velocity            750 m/s (2//c460 ft/s)//n//nEffective firing range     640 m (700 yd) iron sights//n//n                           600 m (656 yd) Kern 4×24 optical sight//n//nFeed system                20//c 24//c 30-round detachable box magazine//n//nSights                     Front post//c rear aperture
gun-60000074,
gun-10000075,M1918
gun-40000075,水乌龟//cYuuki Aoi//c
gun-50000075,Type                       Light machine gun//n//nWeight                     7.25 kg (15.98 lb) //n//nLength                     1//c194 mm (47.0 in)//n//nBarrel length              610 mm (24.0 in) //n//nCartridge                  .30-06 Springfield (7.62x63mm)//n//n                           .303 British (7.7x56mmR)//n//n                           7.92x57mm Mauser//n//nAction                     Gas-operated//c//n//n                           rising bolt lock//n//nRate of fire               500–650 rounds/min //n//nMuzzle velocity            860 m/s (2//c822 ft/s)//n//nEffective firing range     100–1//c500 yards (91–1//c372 m) sight adjustments//n//n                           (maximum effective range)//n//nMaximum firing range       Approx. 4//c500–5//c000 yards (4//c100–4//c600 m)//n//nFeed system                20-round detachable box magazine//n//nSights                     Rear leaf//c front post784 mm (30.9 in) sight radius 
gun-60000075,
gun-10000077,M2HB 
gun-40000077,15K//cIzumi Iwamatsu//c
gun-50000077,Type                       Heavy machine gun//n//nWeight                     38 kg (83.78 lb)//n//n                           58 kg (127.87 lb) with tripod and T&E//n//nLength                     1//c654 mm (65.1 in)//n//nBarrel length              1//c143 mm (45.0 in)//n//nCartridge                  .50 BMG (12.7×99mm NATO)//n//nAction                     Short recoil-operated//n//nRate of fire               485–635 rounds/min //n//nMuzzle velocity            2//c910 ft/s (890 m/s) for M33 ball//n//nEffective firing range     1//c800 m (2//c000 yd)//n//nMaximum firing range       6//c800 m (7//c400 yd)//n//nFeed system                Belt-fed (M2 or M9 links)
gun-60000077,
gun-10000078,M60
gun-40000078,ミカピカゾ//cAsuka Ito//c
gun-50000078,Type                       General-purpose machine gun//n//nWeight                     10.5 kg (23.15 lb)//n//nLength                     1//c105 mm (43.5 in)//n//nBarrel length              560 mm (22.0 in)//n//nCartridge                  7.62×51mm NATO//n//nCaliber                    7.62 mm (0.308 in)//n//nAction                     Gas-operated//cshort stroke gas piston//copen bolt//n//nRate of fire               500–650 rounds/min (rpm)//n//nMuzzle velocity            2//c800 ft/s (853 m/s)//n//nEffective firing range     1//c200 yd (1//c100 m)//n//nFeed system                Disintegrating belt with M13 Links//n//nSights                     Iron sights
gun-60000078,
gun-10000079,M249 SAW
gun-40000079,雪樱樱//cYoshino Nanjo//c
gun-50000079,Type                       Squad automatic weapon//n//nWeight                     7.5 kg (17 lb) empty//c//n//n                           10 kg (22 lb) loaded//n//nLength                     40.75 in (1//c035 mm)//n//nBarrel length              465 mm (18 in)//c 521 mm (21 in)//n//nCartridge                  5.56×45mm NATO//n//nAction                     Gas-operated//c open bolt//n//nRate of fire               Sustained rate of fire: 100 RPM//n//n                           Rapid rate of fire: 200 RPM//n//n                           Cyclic rate of fire: 800 RPM//n//nMuzzle velocity            915 m/s (3//c000 ft/s)//n//nEffective firing range     700 m (770 yd) (point target//c 465 mm barrel)//n//n                           800 m (870 yd) (point target//c 521 barrel)//n//n                           3//c600 m (3//c940 yd) (maximum range)//n//nFeed system                M27 linked belt//c STANAG magazine
gun-60000079,
gun-10000080,M1919A4
gun-40000080,AS109//cSachiyo Yoshida//c
gun-50000080,Type                       Medium machine gun//n//nWeight                     31 lb (14 kg) //n//nLength                     37.94 in (964 mm) //n//nBarrel length              24 in (610 mm)//n//nCartridge                  .30-06 Springfield (U.S.)//n//n                           7.62×51mm NATO//n//n                           .303 British//n//n                           7.92×57mm Mauser//n//n                           6.5×55mm//n//n                           7.62×54mmR//n//n                           8×63mm patron m/32//n//n                           7.65×53mm Argentine//n//n                           7.5×54mm French//n//nAction                     Recoil-operated/short-recoil operation//n//nRate of fire               400–600 round/min (1200–1500 for AN/M2 variant)//n//nMuzzle velocity            2//c800 ft/s (850 m/s)//n//nEffective firing range     1//c500 yd (1//c400 m) (maximum effective range)//n//nFeed system                250-round belt
gun-60000080,
gun-10000081,LWMMG
gun-40000081,RFF//cHiyori Nitta//c
gun-50000081,Type                       Machine gun//n//nWeight                     24 lb (10.8 kg)  //n//nLength                     49 in (1//c244.6 mm)//n//nBarrel length              24 in (609.6 mm)//n//nCartridge                  .338 Norma Magnum//n//nAction                     Short Recoil Impulse Averaging//n//nRate of fire               500 rounds per minute//n//nMuzzle velocity            2//c650 ft/s (807.7 m/s)//n//nEffective firing range     1//c860 yards (1//c700 meters)
gun-60000081,
gun-10000082,DP28
gun-40000082,BIBIA//cKanae Ikadai//c
gun-50000082,Type//n//n                       Light machine gun//n//nWeight//n//n                       9.12 kg (unloaded) //n//n                       11.5 kg (loaded)//n//nLength//n//n                       DP//c DPM – 1//c270 mm //n//nBarrel length//n//n                       DP//c DPM – 604 mm //n//nCartridge//n//n                       7.62×54mmR//n//nAction//n//n                       Gas-Operated//n//nRate of fire//n//n                       550 rpm//n//n                       2400 rpm (DTM-4)//n//nMuzzle velocity//n//n                       840 m/s //n//nEffective firing range//n//n                       800 m (874.9 yd)//n//nFeed system//n//n                       47-round pan//n//nSights//n//n                       Empty circle
gun-60000082,
gun-10000084,RPD
gun-40000084,Sam_Ashton//cIori Nomizu//c
gun-50000084,Type                       Light machine gun//n//nWeight                     7.4 kg (16.31 lb) when empty//n//nLength                     1//c037 mm (40.8 in)//n//nBarrel length              520 mm (20.5 in)//n//nCartridge                  7.62×39mm//n//nAction                     Gas-operated//n//nRate of fire               650–750 rounds/min//n//nMuzzle velocity            735 m/s (2//c411 ft/s)//n//nEffective firing range     100–1//c000 m sight adjustments//n//nFeed system                Non-disintegrating 100-round segmented belt stored in a drum container//n//nSights                     Open-type sights with rear sliding notch and semi-hooded front post//c 596.6 mm (23.5 in) sight radius
gun-60000084,
gun-10000085,PK
gun-40000085,木shiyo//cKaori Nazuka//c
gun-50000085,Type                       General-purpose machine gun//n//nWeight                     9 kg (19.84 lb) (gun） //n//n                           7.7 kg (16.98 lb) （integral bipod)//n//nLength                     1//c203 mm (47.4 in)//n//nBarrel length              658 mm (25.9 in)//n//nCartridge                  7.62×54mmR//n//nAction                     Gas-operated//c open bolt//n//nRate of fire               650–750 round/min.//n//nMuzzle velocity            825 m/s//n//nEffective firing range     1//c000m (100–1//c000 m sight adjustments)//n//nFeed system                Belts in 100/200/250 round boxes//n//nSights                     Tangent iron sights (default);//n//n                           Optical//c Night-vision//c Thermal and Radar sights
gun-60000085,
gun-10000086,MG42
gun-40000086,spirtie//cSayaka//c
gun-50000086,Type                       General-purpose machine gun//n//nWeight                     11.57 kg (25.51 lb)//n//nLength                     1//c220 mm (48 in)//n//nBarrel length              533 mm (21.0 in)//n//nCartridge                  7.92×57mm Mauser//n//nAction                     Recoil-operated//c roller-locked//n//nRate of fire               1//c200 rounds/min (varied between//n//n                           900–1//c500 rounds/min with different bolts)//n//nMuzzle velocity            740 m/s (2//c428 ft/s) (s.S. Patrone)//n//nEffective firing range     200–2//c000 m (219–2//c187 yd) sight adjustments//n//nMaximum firing range       4//c700 m (5//c140 yd)//n//nFeed system                50 or 250-round belt//n//nSights                     iron sight//cor telescope
gun-60000086,
gun-10000087,MG34
gun-40000087,spirtie//cTomoyo Chuujou//c
gun-50000087,Type                       General-purpose machine gun//n//nWeight                     12.1 kg (26.7 lb)//n//n                           19.2 kg (42.3 lb) (with tripod)//n//nLength                     1//c219 mm (48.0 in)//n//nBarrel length              627 mm (24.7 in)//n//nCartridge                  7.92×57mm Mauser//n//nAction                     Open bolt//c Recoil-operated//c Rotating bolt//n//nRate of fire               800–900 rounds/min//n//n                           Early versions: //n//n                           600–1000 rounds/min selectable on pistol grip//n//n                           MG 34"S": 1//c700 rounds/min.//n//n                           MG 34/41: 1//c200 rounds/min.//n//nMuzzle velocity            765 m/s (2//c510 ft/s)(s.S. Patrone)//n//nEffective firing range     1200+ m//n//nFeed system                50/250-round belts//c //n//n                           50-round drum//c //n//n                           or 75-round drum magazine with modification//n//nSights                     Iron sights calibrated//n//n                           to 2000 meters in 100 meter increments.
gun-60000087,
gun-10000088,MG3
gun-40000088,猫头神//cRisa Taneda//c
gun-50000088,Type                       General-purpose machine gun//n//nWeight                     10.5 kg (23.15 lb)//n//n                           27.5 kg (61 lb) (mounted on tripod)//n//nLength                     1//c225 mm (48.2 in)//n//n                           1//c097 mm (43.2 in) (without stock)//n//nBarrel length              565 mm (22.2 in)//n//nCartridge                  7.62×51mm NATO//n//nAction                     Recoil-operated//c roller locked//n//nRate of fire               1000–1300 rpm//n//nMuzzle velocity            820 m/s (2//c690 ft/s)//n//nEffective firing range     200–1//c200 m sight adjustments//n//nMaximum firing range       800 m (bipod)//n//n                           1//c000 m (tripod mounted)//n//n                           3//c000 m (gun carriage)//n//nFeed system                50-Round non-disintegrating DM1 belt //n//n                           (can be combined in a drum); //n//n                           100-Round disintegrating DM6/M13 belt//n//nSights                     Open tangent iron sights
gun-60000088,
gun-10000089,브렌
gun-40000089,废人//cSora Amamiya//c
gun-50000089,Type                       Light machine gun//n//nWeight                     22.83 lb (10.35 kg)(25lb–11.25 kg loaded); //n//nLength                     42.9 in (1//c156 mm)//n//nBarrel length              25 in (635 mm)//n//nCrew                       2//c firer and magazine/barrel changer//n//nCartridge                  .303 British//n//n                           8×57mm IS (for China in World War II)//n//n                           7.62×51mm NATO (post-WW2)//n//nAction                     Gas-operated//c tilting bolt//n//nRate of fire               500–520 rounds/min//n//nMuzzle velocity            2440 ft/s (743.7 m/s)//n//nEffective firing range     600 yd (550 m)//n//nMaximum firing range       1//c850 yd (1//c690 m)//n//nFeed system                20-round L1A1 SLR magazine//n//n                           30-round detachable box magazine//n//n                           100-round detachable pan magazine//n//nSights                     Iron
gun-60000089,
gun-10000090,FNP-9
gun-40000090,Bison仓鼠//cAoi Koga//c
gun-50000090,Type                       Semi-automatic pistol//n//nWeight                     24.7 oz (700 g)//n//nLength                     7.4 in (188 mm) //n//nBarrel length              4 in (102 mm) //n//nCartridge                  9×19mm Parabellum//n//nEffective firing range     55 yd (50 m)//n//nFeed system                16 rounds detachable box magazine//n//nSights                     3-dot white or Tritium night sights
gun-60000090,
gun-10000091,MP-446
gun-40000091,XQ//cIori Nomizu//c
gun-50000091,Type                       Semi-automatic pistol//n//nWeight                     830 g (29 oz)//n//nLength                     196 mm (7.7 in)//n//nBarrel length              112.8 mm (4.4 in)//n//nCartridge                  9×19mm Parabellum//n//nAction                     Short recoil operated//c locked breech//n//nFeed system                10 or 18-round detachable box magazine//n//nSights                     Fixed iron sights//c 3-dot with notch and front blade
gun-60000091,
gun-10000092,Spectre M4
gun-40000092,MKiiiiii//cEmi Uema//c
gun-50000092,Type                       Submachine Gun//n//nWeight                     2.9 kg (6.393 lb)//n//nLength                     350 mm (13.78 in)//c folded//n//n                           580 mm (22.835 in)//c unfolded//n//nBarrel length              130 mm (5.12 in)//n//nCartridge                  9×19mm Parabellum//n//n                           9×21mm IMI//n//n                           .40 S&W//n//n                           .45 ACP//n//nAction                     Blowback//c closed bolt//n//nRate of fire               850 rounds/min//n//nEffective firing range     150 m (492 ft)//n//nFeed system                30-round box or 50-round casket magazines//c//n//n                           magazines for civilian-grade versions were factory-modified for 15-round//c 10-round or 5-round capacity.//n//nSights                     Iron sights
gun-60000092,
gun-10000093,IDW
gun-40000093,Ki桑//cAsuka Ito//c
gun-50000093,Type                       Submachine Gun//n//nWeight                     1.87 kg//n//nLength                     300 mm//n//nBarrel length              164 mm//n//nCartridge                  9×19mm//n//nAction                     Straight blowback//c closed bolt//n//nRate of fire               1400 rounds per minute //n//nMuzzle velocity            715 m/s //n//nEffective firing range     50 m //n//nFeed system                20-round box magazine
gun-60000093,
gun-10000094,64식
gun-40000094,小迪//cSaya Horigome//c
gun-50000094,Type                       Submachine gun//n//nWeight                     3.4kg//n//nLength                     635mm Stock folded//n//n                           843mm Stock open//n//nBarrel length              244mm//n//nCartridge                  7.62×25mm Type 51//n//nAction                     Blowback//c closed bolt//n//nRate of fire               1000 rounds/min//n//nMuzzle velocity            290 m/s //n//nEffective firing range     150-200m//n//nFeed system                30-round box magazine//n//nSights                     Iron
gun-60000094,
gun-10000095,한양조 88식
gun-40000095,团子//cYuuka Aisaka//c
gun-50000095,Type                       Bolt-action rifle//n//nWeight                     4.06kg//n//nLength                     1250mm//n//nBarrel length              740mm//n//nCartridge                  7.92×57mm Mauser//n//nAction                     Bolt-action//n//nRate of fire               ~15 rounds/min//n//nMuzzle velocity            600m/s//n//nEffective firing range     500m//n//nMaximum firing range       1800m//n//nFeed system                5 round en-bloc clip//c external box magazine//c clip fed//n//nSights                     rear sight with a range of 2000m//c front blade sight
gun-60000095,
gun-10000096,그리즐리MkⅤ
gun-40000096,REALMBW//cAyaka Itatani//c
gun-50000096,Type                       Semi-automatic pistol//n//nWeight                     1.36 kg (48 oz) empty//n//nLength                     267 mm (10.25 in) with 6.5 in barrel//n//nBarrel length              5.4 in//c 6.5 in//c 8 in & 10 in//n//nCartridge                  .45 Winchester Magnum//n//n                           10mm Auto//n//n                           .44 Magnum//n//n                           9mm Winchester Magnum//n//n                           .357 Magnum//n//n                           .50 Action Express//n//n                           .45 ACP//n//n                           .357-.45 GWM//n//nAction                     Recoil-operated//c closed bolt//n//nRate of fire               Semi-automatic//n//nMuzzle velocity            426 m/s (1//c400 ft/s) (.45 Win Mag 230gr bullet from 5.4 inch barrel)//n//nFeed system                Detachable box magazine: 7 round//n//nSights                     Fixed ramped blade front//c fully adjustable rear.
gun-60000096,
gun-10000097,M950A
gun-40000097,音符//cAoi Koga//c
gun-50000097,Type                       Machine pistol//n//nWeight                     2.25 lb unloaded//n//nLength                     355 mm //n//nBarrel length              6 inches//n//nCartridge                  9×19mm Parabellum//n//nAction                     Roller-delayed blowback//n//nRate of fire               semi-automatic//n//nMuzzle velocity            1290 ft/s//n//nEffective firing range     300+ yards//n//nFeed system                50 rounds/100 rounds helical magazine//n//nSights                     Iron sights//c can have various sights mounted
gun-60000097,
gun-10000098,SPP-1
gun-40000098,麻将//cYuka Ootsubo//c
gun-50000098,Type                       Underwater pistol//n//nWeight                     950 g//n//nLength                     244 mm //n//nCartridge                  4.5×40mmR//n//nAction                     Double action//n//nMuzzle velocity            240 to 250 metres per second//n//nEffective firing range     in air//c 15 to 20 metres//n//n                           in water//c//n//n                           17 metres (56 ft) at depth of 5 metres (16 ft);//n//n                           11 metres (36 ft) at depth of 20 metres (66 ft);//n//n//n//n                           6 metres (20 ft) at depth of 40 metres (130 ft)//n//nFeed system                4 barrels with a cartridge in each
gun-60000098,
gun-10000099,Mk23
gun-40000099,雪樱樱//cHikaru Akao//c
gun-50000099,Type                       Semi-automatic pistol//n//nWeight                     1.2 kg (2.43 lb)empty //n//nLength                     245.11 mm (9.65 in)//c without suppressor//n//n                           421 mm (16.5 in)//c with suppressor//n//nBarrel length              149.10 mm (5.87 in)//n//nCartridge                  .45 ACP//n//nAction                     Short recoil//c DA/SA//n//nRate of fire               Semi-automatic//n//nMuzzle velocity            260 m/s (850 ft/s)//n//nEffective firing range     50 m //n//nFeed system                Detachable box magazine; capacities:12 rounds (standard)   10 rounds (restricted)
gun-60000099,
gun-10000100,P7
gun-40000100,Saru//cTomoyo Kurosawa//c
gun-50000100,Type                       Semi-automatic pistol//n//nWeight                     785 g//n//nLength                     166 mm//n//nBarrel length              105 mm//n//nCartridge                  9×19mm Parabellum//n//nAction                     Gas-delayed blowback//n//nMuzzle velocity            351 m/s //n//nEffective firing range     125 - 150 m//n//nFeed system                8-round box magazine//n//nSights                     Front blade//c rear notch //n//n                           148 mm (5.8 in) sight radius
gun-60000100,
gun-10000101,UMP9
gun-40000101,ZAGALA//cMamiko Noto//c
gun-50000101,Type                       Submachine Gun//n//nWeight                     2.3 kilograms (5.2 lb) //n//nLength                     450 mm (17.7 inches)//c stock folded//n//n                           690 mm (27.2 inches)//c stock extended//n//nBarrel length              200 mm (8 inches)//n//nCartridge                  9×19mm Parabellum //n//nAction                     Blowback//c closed bolt//n//nRate of fire               650 rounds per minute //n//nMuzzle velocity            320 m/s //n//nEffective firing range     100 m//n//nFeed system                30-round detachable box magazine
gun-60000101,
gun-10000103,UMP45
gun-40000103,ZAGALA//cTomomi Mineuchi//c
gun-50000103,Type                       Submachine Gun//n//nWeight                     2.5 kg (5.4 lb) (without magazine)//n//nLength                     450 mm (17.7 inches)//c stock folded//n//n                           690 mm (27.2 inches)//c stock extended//n//nBarrel length              200 mm (8 inches)//n//nCartridge                  .45 ACP //n//nAction                     Blowback//c closed bolt//n//nRate of fire               600 rounds per minute//n//nMuzzle velocity            320 m/s //n//nEffective firing range     100 m//n//nFeed system                25-round detachable box magazine
gun-60000103,
gun-10000104,G36C
gun-40000104,Parsley//cAkane Fujita//c
gun-50000104,Type                       Ultra-short assault rifle//n//nWeight                     2.82 kg (6.2 lb)//n//nLength                     720 mm (28.3 in) stock extended //n//n                           500 mm (19.7 in) stock folded//n//nBarrel length              228 mm (9.0 in)//n//nCartridge                  5.56×45mm NATO//n//nAction                     Short-stroke piston//c rotating bolt//n//nRate of fire               750 rounds/min cyclic//n//nMuzzle velocity            590 m/s//n//nEffective firing range     600 metres//n//nFeed system                30-round detachable box magazine or 100-round C-Mag drum magazine//n//nSights                     Reflex sight with 1× magnification//c telescopic sight with 3× magnification (export version has a 1.5× magnified sight) and back-up fixed notch sight
gun-60000104,
gun-10000105,OTs-12
gun-40000105,林檎愛す//cYumi Uchiyama//c
gun-50000105,Type                       Assault rifle//n//nWeight                     2.5 kg //n//nLength                     730 mm//n//nBarrel length              206.5 mm//n//nCartridge                  9×39mm//n//nRate of fire               800 rounds/min //n//nMuzzle velocity            270 m/s//n//nEffective firing range     About 200 meters//n//nFeed system                20-round detachable box magazine//n//n(experimental 25-round magazine)//n//nSights                     Iron sights
gun-60000105,
gun-10000106,FAL
gun-40000106,水乌龟//cHaruka Yoshimura//c
gun-50000106,Type                       Battle rifle//n//nWeight                     FAL 50.00: 4.3 kg (9.48 lb)//n//n                           FAL 50.61: 3.90 kg (8.6 lb)//n//n                           FAL 50.63: 3.79 kg (8.4 lb)//n//n                           FAL 50.41: 5.95 kg (13.1 lb)//n//nLength                     FAL 50.00 (fixed stock): 1//c090 mm (43 in)//n//n                           FAL 50.61 (stock extended): 1//c095 mm (43.1 in)//n//n                           FAL 50.61 (stock folded): 845 mm (33.3 in)//n//n                           FAL 50.63 (stock extended): 998 mm (39.3 in)//n//n                           FAL 50.63 (stock folded): 748 mm (29.4 in)//n//n                           FAL 50.41 (fixed stock): 1//c125 mm (44.3 in)//n//nBarrel length              FAL 50.00: 533 mm (21.0 in)//n//n                           FAL 50.61: 533 mm (21.0 in)//n//n                           FAL 50.63: 436 mm (17.2 in)//n//n                           FAL 50.41: 533 mm (21.0 in)//n//nCartridge                  7.62×51mm NATO//n//nAction                     Gas-operated//c tilting breechblock//n//nRate of fire               650–700 rounds/min//n//nMuzzle velocity            FAL 50.00: 840 m/s (2//c756 ft/s)//n//n                           FAL 50.61: 840 m/s (2//c755.9 ft/s)//n//n                           FAL 50.63: 810 m/s (2//c657.5 ft/s)//n//n                           FAL 50.41: 840 m/s (2//c755.9 ft/s)//n//nEffective firing range     400–600 m sight adjustments//n//nFeed system                20 or 30-round detachable box magazine. //n//n                           50-round drum also available.//n//nSights                     Aperture rear sight//c post front sight; sight radius://n//n                           FAL 50.00//c FAL 50.41: 553 mm (21.8 in)//n//n                           FAL 50.61//c FAL 50.63: 549 mm (21.6 in)
gun-60000106,
gun-10000107,F2000
gun-40000107,hanasa//cSora Tokui//c
gun-50000107,Type                       Bullpup Service rifle//n//nWeight                     3.6 kg (7.9 lb)//n//nLength                     688 mm (27.1 in) //n//nBarrel length              400 mm (16 in)//n//nCartridge                  5.56×45mm NATO//n//nAction                     Gas-operated//c rotating bolt//n//nRate of fire               850 rounds/min//n//nMuzzle velocity            900 m/s (2//c953 ft/s)//n//nEffective firing range     500 m//n//nFeed system                30 rounds (standard STANAG)//n//nSights                     1.6× magnified telescopic sight//c notch back-up sight
gun-60000107,
gun-10000108,CZ-805
gun-40000108,木子翔//cMaaya Uchida//c
gun-50000108,Type                       Assault rifle//n//nWeight                     3.6 kg (7.9 lb)//n//nLength                     910–855 mm (35.8–33.7 in) (butt extended)//n//n                           670 mm (26 in) (butt folded)//n//nBarrel length              360 mm (14 in)//n//nCartridge                  5.56×45mm NATO//n//nAction                     Gas-operated//c rotating bolt//n//nRate of fire               700-800 RPM//n//nEffective firing range     500 m//n//nFeed system                20-//c 30- or 100-round box magazine//n//nSights                     Iron sights
gun-60000108,
gun-10000109,MG5
gun-40000109,音符//cAmi Koshimizu//c
gun-50000109,Type                       General-purpose machine gun//n//nWeight                     11.20 kg//n//nLength                     1160 mm//n//nBarrel length              550 mm//n//nCartridge                  7.62×51mm NATO//n//nAction                     Gas-operated//c rotating bolt//n//nRate of fire               640/720/800 rounds/min//n//nMuzzle velocity            840 m/s//n//nEffective firing range     600 m (bipod)//n//nMaximum firing range       1//c200 - 1//c500 m (gun mount)//n//nFeed system                50-round belt in drum container or 120-round belt in separate box//n//nSights                     Diopter sight
gun-60000109,
gun-10000110,FG42
gun-40000110,叽困//cAsuka Ito//c
gun-50000110,Type                       Battle rifle//n//nWeight                     4.2 kg (9.3 lb)//n//nLength                     945 mm (37.2 in)//n//nBarrel length              500 mm (19.7 in)//n//nCartridge                  7.92×57mm Mauser//n//nAction                     Gas-operated//c rotating bolt//n//nRate of fire               ~900 rounds/min//n//nMuzzle velocity            740 m/s (2//c428 ft/s) //n//nEffective firing range     600 m//n//nFeed system                10- or 20-round detachable box magazine//n//nSights                     Iron sights (all models); flip-up front post and folding rear diopter sight
gun-60000110,
gun-10000111,AAT-52
gun-40000111,Lino//cYumi Uchiyama//c
gun-50000111,Type                       General-purpose machine gun//n//nWeight                     9.970 kg//n//nLength                     1080 mm//n//nBarrel length              600 mm//n//nCartridge                  7.5×54mm French//n//n                           7.62×51mm NATO//n//nAction                     Lever-delayed blowback//n//nRate of fire               900 round/min//n//nMuzzle velocity            830 m/s//n//nEffective firing range     600 metres//n//nMaximum firing range       3//c200 metres//n//nFeed system                Belt//n//nSights                     Iron//n//n                           Removable APX (SOM) telescopic sights//n//n                           IR scope
gun-60000111,
gun-10000112,네게브
gun-40000112,十月十日奏//cAyaka Suwa//c
gun-50000112,Type                       Light machine gun//n//nWeight                     7.40 kg (16.31 lb) (standard version)//n//n                           7.00 kg (15.43 lb) (Negev Commando)//n//n                           7.60 kg (16.8 lb) (NG7)//n//nLength                     1//c020 mm (40 in) stock extended / 890 mm (35.0 in) stock folded (standard version)//n//n                           780 mm (30.7 in) stock deployed / 680 mm (26.8 in) stock folded (Negev Commando)//n//nBarrel length              460 mm (18.1 in) (standard version)//n//n                           330 mm (13.0 in) (Negev Commando)//n//nCartridge                  5.56×45mm NATO//c 7.62×51mm NATO(NG7 variant)//n//nAction                     Gas operated//c rotating bolt//n//nRate of fire               1000 rounds/min//n//nMuzzle velocity            915 m/s (3//c002 ft/s) (standard version)//n//n                           850 m/s (2//c788.7 ft/s) (Negev Commando)//n//nEffective firing range     300–1000 m sight adjustments (standard version)//n//n                           300-800 m sight adjustments (Negev Commando)//n//nFeed system                150-round M27 ammunition belt or 35-round box magazine//n//nSights                     Aperture//c with elevation drum and adjustable front post//c folding tritium night sights//c various optional optics via picatinny rail
gun-60000112,
gun-10000113,세르듀코프
gun-40000113,能登ツグミ//cMinami Tanaka//c
gun-50000113,Type                       Semi-automatic pistol//n//nWeight                     0.9 kg   //n//nLength                     200 mm //n//nBarrel length              120 mm //n//nCartridge                  9×21mm//n//nAction                     Blowback//n//nMuzzle velocity            410 m/s //n//nEffective firing range     100 m //n//nFeed system                18-round box magazine//n//nSights                    iron sights
gun-60000113,
gun-10000114,웰로드MkⅡ
gun-40000114,工口牛//cAsami Imai//c
gun-50000114,Type                       Semi-automatic pistol//n//nWeight                     0.9 kg   //n//nLength                     200 mm //n//nBarrel length              120 mm //n//nCartridge                  9×21mm//n//nAction                     Blowback//n//nMuzzle velocity            410 m/s //n//nEffective firing range     100 m //n//nFeed system                18-round box magazine//n//nSights                    iron sights
gun-60000114,
gun-10000115,수오미
gun-40000115,Anmi//cAki Toyosaki//c
gun-50000115,Type                       Submachine Gun//n//nWeight                     4.6 kg (10.14 lb) //n//nLength                     870 mm (34.3 in)//n//n                           925 mm (36.4 in) (SJR)//n//n                           740 mm (29.1 in) (bunker version)//n//nBarrel length              314 mm (12.4 in)//n//nCartridge                  9×19mm Parabellum//n//nAction                     Straight Blowback//n//nRate of fire               750–900 rounds/min//n//nMuzzle velocity            396 m/s (1//c299 ft/s)//n//nEffective firing range     200 m (660 ft)//n//nFeed system                20-//c 36- or 50-round box//c 40- or 71-round drum. //n//n                           Also modified German MP 38 u. 40 32-round box magazine//n//nSights                     Front blade//c rear notch
gun-60000115,
gun-10000116,Z-62
gun-40000116,ALLENES//cIori Nomizu//c
gun-50000116,Type                       Submachine gun//n//nWeight                     2.87kg//n//nLength                     480mm//n//nBarrel length              201mm//n//nCartridge                  9×19mm Parabellum//n//nAction                     Blowback//n//nRate of fire               550rpm//n//nEffective firing range     200m//n//nFeed system                30 round box magazine
gun-60000116,
gun-10000117,PSG-1
gun-40000117,CanceR//cAsami Imai//c
gun-50000117,Type                       Sniper rifle//n//nWeight                     7.2 kg (15.87 lb)  //n//nLength                     1//c230 mm (48.4 in)//n//nBarrel length              650 mm (25.6 in)//n//n                           600 mm (23.6 in) (MSG-90)//n//nCartridge                  7.62×51mm NATO//n//nAction                     Roller-delayed blowback//n//nMuzzle velocity            868 m/s (2//c848 ft/s)//n//nEffective firing range     800 m (2//c625 ft)//n//nFeed system                5//c 10 or 20-round detachable box magazine. 50 round drum also compatible//n//nSights                     Hensoldt ZF 6×42 PSG1 telescopic sight with illuminated reticle
gun-60000117,
gun-10000118,9A-91
gun-40000118,防弹乳牛//cMai Nakahara//c
gun-50000118,Type                       Carbine//n//nWeight                     1.8 kg (3.97 lb) (without magazine)//n//nLength                     383 mm (15.08 in) stock folded//n//n                           605 mm (23.82 in) stock extended//n//nCartridge                  9x39mm//n//nAction                     Gas actuated//c rotating bolt//n//nRate of fire               700-900 rounds/min//n//nMuzzle velocity            270 m/s//n//nEffective firing range     200 m//n//nMaximum firing range       400 m (with an optical sight mounted)//n//nFeed system                20-round box magazine//n//nSights                     PSO-1//c Cobra RDS//c PKA-S HOLO
gun-60000118,
gun-10000119,OTs-14
gun-40000119,ASK//cMarina Inoue//c
gun-50000119,Type                       Bullpup assault rifle//n//nWeight                     2.7 kg(OTs-14-4A-01 and OTs-14-4A-02)//n//n                           3.6 kg(OTs-14-4A and OTs-14-4A-03) //n//nLength                     610 mm (OTs-14-4A)//n//n                           565 mm (OTs-14-4A-01)//n//n                           500 mm (OTs-14-4A-02)//n//n                           720 mm (OTs-14-4A-03)//n//nBarrel length              240 mm (Groza-4)//n//n                           415 mm (Groza-1)//n//nCartridge                  9×39mm (Groza-4)//n//n                           7.62×39mm (Groza-1)//n//nAction                     Gas-operated//c rotating bolt//n//nRate of fire               700 rounds per minute //n//nMuzzle velocity            300 m/s (2//c350 ft/s)//n//nEffective firing range     200 m (660 ft)//n//nFeed system                20-round detachable box magazine (Groza-4)//n//n                           30-round detachable box magazine (Groza-1)//n//nSights                     Iron sights//c several optical and night vision sights
gun-60000119,
gun-10000120,ARX-160
gun-40000120,死盖//cAmi Hagihara//c
gun-50000120,Type                       Assault rifle//n//nWeight                     3.0 kg (6.6 lb) (empty with 302 mm (11.9 in) barrel)//n//n                           3.1 kg (6.8 lb) (empty with 406 mm (16.0 in) barrel)//n//nLength                     755 mm (29.7 in) (stock extended//n//n                           680 mm (27 in) (stock collapsed)//n//n                           580 mm (23 in) (stock folded) (302 mm (11.9 in) barrel)//n//n                           920 mm (36 in) (stock extended)//n//n                           820 mm (32 in) (stock collapsed)//n//n                           755 mm (29.7 in) (stock folded) (406 mm (16.0 in) barrel)//n//nBarrel length              302 mm (11.89 in)//n//n                           406 mm (15.98 in)//n//nCartridge                  5.56×45mm NATO//c 7.62×39mm//c 7.62×51mm NATO//n//nAction                     Gas-operated rotating bolt//n//nRate of fire               700 rounds per minute //n//nMuzzle velocity            930 m/s (2//c350 ft/s)//n//nEffective firing range     600 m (660 ft)//n//nFeed system                30-round detachable STANAG Magazine//c 100-round detachable C-Mag drum magazine//n//nSights                     Front sight adjustable in elevation and windage
gun-60000120,
gun-10000121,Mk48
gun-40000121,SA//cRicca Tachibana//c
gun-50000121,Type                       general-purpose machine gun//n//nWeight                     8.2 kg (18.26 lb) empty;//n//n                           11.2 kg (24.7 lb) w/ 100 rounds  //n//nLength                     1//c000 mm (39.75 in) //n//nBarrel length              502 mm (19.75 in)//n//nCartridge                  7.62×51mm NATO (STANAG 2310)//n//nAction                     Gas-operated//c open bolt//n//nRate of fire               710 (± 50) rounds/min//n//nEffective firing range     800 m (~875 yd)//c area target//n//nFeed system                50-round detachable box magazine//n//nSights                     Disintegrating belt
gun-60000121,
gun-10000122,G11
gun-40000122,音符//cAyaka Fukuhara//c
gun-50000122,Type                       Assault rifle//n//nWeight                     3.6 kg (8.0 lb) empty//n//n                           4.3 kg (9.5 lb) loaded  //n//nLength                     750 mm (29.5 in)//n//nBarrel length              540 mm (155 mm per twist)//n//nCartridge                  4.73×33mm caseless ammunition (DM11): G11 K2//c LMG11//n//n                           4.7mm//c 4.3mm//c 4.9mm for other G11 prototypes//n//n                           4.73×25mm caseless: G11 PDW//n//nAction                     Gas-operated//c rotary breech//n//nRate of fire               460 rounds/min (full auto)//n//n                           2100 rounds/min (3-round burst)//n//nMuzzle velocity            Approx. 930 m/s (3//c050 ft/s)//n//nEffective firing range     400 m //n//nFeed system                45- or 50-round detachable box magazine//n//nSights                     Integrated optical sight
gun-60000122,
gun-10000123,P99
gun-40000123,真名//cAyako Kawasumi//c
gun-50000123,Type                       Semi-automatic pistol//n//nWeight                     630 g (22 oz) //n//nLength                     180 mm (7.1 in) //n//nBarrel length              102 mm (4.0 in) //n//nCartridge                  9×19mm Parabellum//n//n                           .40 S&W//n//n                           9×21mm IMI//n//nAction                     Short recoil operated//c locked breech//n//nMuzzle velocity            408 m/s (1//c339 ft/s) (9×19mm)//n//n                           344 m/s (1//c129 ft/s) (.40 S&W)//n//nEffective firing range     60 m (66 yd) //n//nFeed system                9×19mm: 10-//c 15-//c 17- or 20-round detachable box magazine//n//n                           .40 S&W: 10-//c 12-//c or 14-round box magazine//n//nSights                     Interchangeable 3-dot notch sight
gun-60000123,
gun-10000124,Super SASS
gun-40000124,受菟//cRicca Tachibana//c
gun-50000124,Type                       Sniper rifle//n//nWeight                     5.4 kg //n//nLength                     1130 mm //n//nBarrel length              508 mm  //n//nCartridge                  7.62×51 NATO//n//nAction                     Gas-operated//c rotating bolt//n//nRate of fire               Semi-automatic//n//nMuzzle velocity            783 m/s (2//c570 ft/s) with 175 gr. M118LR//n//nEffective firing range     800 metres (875 yd) (point targets)//n//nFeed system                10 or 20-round detachable box magazine
gun-60000124,
gun-10000125,MG4
gun-40000125,neco//cHaruka Yoshimura//c
gun-50000125,Type                       Light machine gun//n//nWeight                     8.55 kg (18.85 lb)   //n//nLength                     1//c050 mm (41.3 in) stock extended//n//n                           830 mm (32.7 in) stock folded  //n//nBarrel length              480 mm (18.9 in) //n//nCartridge                  5.56×45mm NATO//n//nAction                     Gas-operated//c rotating bolt//n//nRate of fire               890 ± 60/min //n//nMuzzle velocity            920 m/s (3//c018 ft/s)//n//nEffective firing range     Approx. 1//c000 m//n//nFeed system                Disintegrating link belt//n//nSights                     Iron sights; MIL-STD-1913 rail provided for optics//c German Army models are equipped with telescopic sights with 3x magnification.
gun-60000125,
gun-10000126,NZ75
gun-40000126,音符//cShiki Aoki//c
gun-50000126,Type                       Semi-automatic pistol//n//nWeight                     1.12 kg (2.47 lb)//n//nLength                     206.3 mm (8.1 in)//n//nBarrel length              120 mm (4.7 in)//n//nCartridge                  9×19mm Parabellum//n//nAction                     short recoil//c tilting barrel//n//nEffective firing range     25 m//n//nFeed system                detachable box magazine//c 12–26 rd depending on version and caliber//n//nSights                     Front blade//c rear square notch
gun-60000126,
gun-10000127,79식
gun-40000127,防弹乳牛//cMinami Tanaka//c
gun-50000127,Type                       Submachine gun//n//nWeight                     1.75 kg//n//nLength                     740 mm stock extended/470mm stock closed//n//nBarrel length              250 mm//n//nCartridge                  7.62×25 mm Tokarev//n//nAction                     Gas-Operated//c Rotating bolt//n//nRate of fire               500 rounds/min//n//nMuzzle velocity            515 m/s//n//nEffective firing range     200 m//n//nFeed system                20-round box magazine//n//nSights                     Rear sight notch
gun-60000127,
gun-10000128,M99
gun-40000128,Saru//cRumi Okubo//c
gun-50000128,Type                       Semi-automatic Anti-materiel rifle//n//nWeight                     12 kg //n//nLength                     1480 mm //n//nBarrel length              800 mm //n//nCartridge                  12.7×108mm//n//nAction                     Semi-automatic//n//nMuzzle velocity            800 m/s //n//nEffective firing range     1500 m//n//nFeed system                5-round box magazine//n//nSights                     Iron sights
gun-60000128,
gun-10000129,95식
gun-40000129,木shiyo//cKami Daimon//c
gun-50000129,Type                       Bullpup rifle//n//nWeight                     3.25 kg (7.2 lb)//n//nLength                     745 mm (29.3 in)//n//nBarrel length              463 mm (18.2 in)//n//nCartridge                  5.8×42mm DBP87 //n//nAction                     Gas-Operated//c Rotating bolt//n//nRate of fire               ~650 rounds/min//n//nMuzzle velocity            930 m/s (3//c050 ft/s)//n//nEffective firing range     400m//n//nFeed system                30-round detachable box magazine//n//n                           80-round detachable drum//n//nSights                     Hooded post front sight and aperture rear sight//c optional Y/MA 95-002 telescopic sight
gun-60000129,
gun-10000130,97식
gun-40000130,木shiyo//cAyane Sakura//c
gun-50000130,Type                       Bullpup rifle//n//nWeight                     3.35 kg (7.4 lb) //n//nLength                     758 mm (29.8 in)//n//nBarrel length              490 mm (19.3 in)//n//nCartridge                  5.56×45mm NATO//n//nAction                     Gas-Operated//c Rotating bolt//n//nRate of fire               ~650 rounds/min//n//nMuzzle velocity            930 m/s (3//c050 ft/s)//n//nEffective firing range     400m//n//nFeed system                30-round detachable box magazine//n//n                           80-round detachable drum//n//nSights                     Hooded post front sight and aperture rear sight//c optional Y/MA 95-002 telescopic sight
gun-60000130,
gun-10000131,EVO 3
gun-40000131,钉田西瓜//cNozomi Yamamoto//c
gun-50000131,Type                       Submachine Gun//n//nWeight                     2.77 kg with full magazine//n//nLength                     670 mm (26.37 in) stock unfolded//n//n                           410 mm (16.14 in) stock folded//n//nBarrel length              196 mm (7.71 in) //n//nCartridge                  9×19mm Parabellum//n//nAction                     Blowback//n//nRate of fire               1150 rounds/min//n//nMuzzle velocity            370 m/s//n//nEffective firing range     250 m //n//nFeed system                30-round detachable box magazine//n//nSights                     Picatinny Rails for optics//c backup iron sights
gun-60000131,
gun-10000132,59식
gun-40000132,麻将//cEmiri Katou//c
gun-50000132,Type                       Semi-automatic pistol//n//nWeight                     0.81 kg //n//nLength                     163 mm //n//nBarrel length              93.5 mm //n//nCartridge                  9×18mm Makarov//n//nAction                     Blowback//n//nMuzzle velocity            315 m/s//n//nEffective firing range     50 m//n//nFeed system                8-round detachable box magazine//n//nSights                     Blade front//c notch rear 
gun-60000132,
gun-10000133,63식
gun-40000133,TOMATO//cSaya Horigom//c
gun-50000133,Type                       Rifle//n//nWeight                     3.8 kg (8.38 lb)//n//nLength                     1//c033 mm (40.7 in)//n//nBarrel length              531 mm (20.9 in)//n//nCartridge                  7.62×39mm//n//nAction                     Gas-operated//c rotating bolt//n//nRate of fire               680–725 rounds/min//n//nMuzzle velocity            735 m/s (2//c411 ft/s)//n//nEffective firing range     100–800 m sight adjustments//n//nFeed system                20-round detachable box magazine//n//nSights                     Hooded front post//c rear U-notch on sliding tangent
gun-60000133,
gun-10000134,AR70
gun-40000134,NoriZC//cNozomi Yamamoto//c
gun-50000134,Type                       Assault rifle//n//nWeight                     3.99 kg (8.80 lb) //n//nLength                     998 mm (39.3 in)//n//nBarrel length              450 mm（17.72in)//n//nCartridge                  5.56×45mm NATO//n//nAction                     Gas-operated//n//nRate of fire               650 RPM//n//nMuzzle velocity            950 m/s (3//c100 f500 m (1//c600 ft)200 m (660 ft)//n//nFeed system                30-round STANAG Magazine//n//n                           100-round C-Mag drum magazine//n//nSights                     Iron/grenade sights
gun-60000134,
gun-10000135,SR-3MP
gun-40000135,熊猫印象//cTakada Yuuki//c
gun-50000135,Type                       Compact assault rifle//n//nWeight                     3.2 kg //n//nLength                     970 mm (38.2 inches)//n//nBarrel length              156 mm (6.2 inches)//n//nCartridge                  9×39mm//n//nAction                     Gas operated//c Rotating bolt//n//nRate of fire               900 rounds/min//n//nMuzzle velocity            295 m/s//n//nEffective firing range     About 200 meters//n//nFeed system                30-round detachable box magazine //n//nSights                     Iron sights
gun-60000135,
gun-10000136,PP-19
gun-40000136,八才//cSerizawa Yuu//c
gun-50000136,Type                       Submachine Gun//n//nWeight                     2.1 kg (4.63 lb)//n//nLength                     690 mm (27.2 in) stock extended//n//n                           460 mm (18.1 in) stock folded //n//nBarrel length              225 mm (8.9 in) //n//nCartridge                  9×18mm Makarov//n//n                           9×19mm Parabellum//n//n                           .380 ACP (9×17mm Short)//n//n                           7.62×25mm Tokarev//n//nAction                     Blowback//c closed bolt//n//nRate of fire               650–700 rounds/min//n//nMuzzle velocity            320 m/s (1//c050 ft/s) (9×18mm Makarov)//n//n                           380 m/s (1//c246.7 ft/s) (9×19mm Parabellum)//n//nEffective firing range     100 m (9×18mm Makarov)//n//n                           200 m (9×19mm Parabellum)//n//nFeed system                64-round helical magazine (9×18mm Makarov)//n//n                           53-round helical magazine (9×19mm Parabellum) (Bizon-2-01)//n//nSights                     Hooded front post//c rear flip-up notch
gun-60000136,
gun-10000138,6P62
gun-40000138,羽中//cMarina Inoue//c
gun-50000138,Type                       Fully automatic anti-materiel //nWeight                     15 kg(without rounds or additional sights)//n                           3.5 kg(weight of the loaded magazine)//nLength                     1200 mm //nCartridge                  12.7×108mm//nAction                     Gas-operated//nRate of fire               400—500 rpm//nMuzzle velocity            620—645 m/s//nEffective firing range     1000 m//nFeed system                14-round detachable box magazine//nSights                     Iron sights : 100-1000 meters(optical sights as an option)
gun-60000138,
gun-10000139,Bren Ten
gun-40000139,林大B//cArise Sato//c
gun-50000139,Type                       Semi-automatic pistol//nWeight                     38 oz (1//c100 g)//nLength                     8.75 in (222 mm) //nBarrel length              5.00 in (127.0 mm) //nCartridge                  10mm Auto//n                           .45 ACP (11.43x23 mm)//n                           .22 Long Rifle (conversion kit)//nAction                     Browning short recoil//c vertically tilting barrel//nEffective firing range     40 m//nFeed system                8//c 10//c 11//c 13//c 14//c 15//c 17 or 20-round box magazine//nSights                     Adjustable 3-dot type; rear notch//c front blade
gun-60000139,
gun-10000140,PSM
gun-40000140,sola7764//cNaomi Mukaiyama//c
gun-50000140,Type                       Semi-automatic pistol//nWeight                     460 g (16 oz)//nLength                     155 mm (6.1 in)//nBarrel length              84.6 mm (3.3 in)//nCartridge                  5.45×18mm//nAction                     Blowback//nMuzzle velocity            315 m/s (1//c033 ft/s)//nEffective firing range     Sights fixed for 25 m//nFeed system                8-round detachable box magazine//nSights                     Rear notch and front post
gun-60000140,
gun-10000141,USP Compact
gun-40000141,哈路卡//cArise Sato//c
gun-50000141,Type                       Semi-automatic pistol//nWeight                     667 g (1.47 lb) (Compact 9 mm)//n                           694 g (1.53 lb) (Compact .40)//n                           726 g (1.60 lb) (Compact .45)//nLength                     173 mm (6.81 in) (Compact 9 mm/.40)//nBarrel length              91 mm (3.58 in) (Compact 9 mm/.40)//n                           97 mm (3.80 in) (Compact .45)//nCartridge                  9×19mm Parabellum//n                           .357 SIG (Compact only)//n                           .40 S&W//n                           .45 ACP//nAction                     Short recoil//c DA/SA//c DA/DAO//nRate of fire               Semi-automatic//nEffective firing range     50 m (9×19mm Parabellum)//c 30 m (.45 ACP)//nFeed system                13 rounds (9×19mm)//n                           12 rounds (.357//c .40 S&W)//n                           8 or 10 rounds (.45 ACP)//nSights                     Patridge//c "3-dot" type; adjustable rear on Tactical//c Match and Expert
gun-60000141,
gun-10000142,Five-seveN
gun-40000142,水乌龟//cAkane Fujita//c
gun-50000142,Type                       Semi-automatic pistol//nWeight                     610 g (1.3 lb) empty//n                           744 g (1.6 lb) loaded//nLength                     208 mm (8.2 in)//nBarrel length              122 mm (4.8 in)//nCartridge                  FN 5.7×28mm//nAction                     Delayed blowback//nRate of fire               Semi-automatic//nMuzzle velocity            650 m/s (2//c130 ft/s) (SS190)//n                           625 m/s (2//c050 ft/s) (SS195)//n                           520 m/s (1//c700 ft/s) (SS197)//nEffective firing range     50 m (55 yd)//nFeed system                10 rounds (restricted)//n                           20 rounds (standard)//n                           30 rounds (extended)//nSights                     "Three-dot" type: fixed or adjustable; 177.8 mm (7 in) sight radius
gun-60000142,
gun-10000143,RO635
gun-40000143,海猫络合物//cAyaka Fukuhara//c
gun-50000143,Type                       Submachine gun//nWeight                     2.61 kg (5.75 lb)//nLength                     730 mm (28.9 in ) (stock extended)//n                           650 mm (25.6 in) (stock retracted)//nBarrel length              267 mm (10.5 in)//nCartridge                  9×19mm Parabellum//nAction                     blowback//c closed bolt//nRate of fire               700-1000 round/min//nMuzzle velocity            396 m/s (1300) ft/s)//nEffective firing range     100 m//nFeed system                20- and 32-round detachable box magazine
gun-60000143,
gun-10000144,MT-9
gun-40000144,麻将//cRui Kariya//c
gun-50000144,Type                       Submachine Gun//nWeight                     3.29 kg //nLength                     753 mm  stock extended//n                           466 mm  stock folded//nBarrel length              200 mm //nCartridge                  9×19mm Parabellum//nRate of fire               700-800 rounds per minute //nFeed system                34-round detachable box magazine
gun-60000144,
gun-10000145,OTs-44
gun-40000145,rosele//cRie Takahashi//c
gun-50000145,Type                       Anti materiel rifle//nWeight                     14 kg //nLength                     1070 mm//nCartridge                  12//c7×108mm//nMuzzle velocity            800 m/s //nEffective firing range     1200 m//nFeed system                8-round detachable box magazine
gun-60000145,
gun-10000146,G28
gun-40000146,工口牛//cNozomi Yamamoto//c
gun-50000146,Type                       Battle rifle//nWeight                     5.8 kg (13 lb)//nLength                     1//c082 mm (42.6 in) stock extended//n                           965 mm (38.0 in) stock collapsed//nBarrel length              419 mm (16.5 in)//nCartridge                  7.62×51mm NATO//nAction                     Short-stroke piston//c rotating bolt//nMuzzle velocity            789 m/s (20 in)//nEffective firing range     800 m (2625 ft)//nFeed system                10 or 20-round detachable box magazine//nOptional 50-round drum magazine//nSights                     Accessory diopter/rotary or optics//nG28 E2 (Standard): Schmidt & Bender PMII 3-20×50//nG28 E3 (Patrol): Schmidt & Bender PMII 1-8×24
gun-60000146,
gun-10000147,SSG 69
gun-40000147,拿铁//cKarin Nanami//c
gun-50000147,Type                       Sniper rifle//nWeight                     4 kg (8.82 lb) (SSG 69 PI)//n                           4.2 kg (9.3 lb) (SSG 69 PII)//n                           3.8 kg (8.4 lb) (SSG 69 PIV)//nLength                     1//c140 mm (44.9 in) (SSG 69 PI)//n                           1//c190 mm (46.8 in) (SSG 69 PII)//n                           1//c003 mm (39.5 in) (SSG 69 PIV)//nBarrel length              650 mm (25.6 in) (SSG 69 PI//c SSG 69 PII)//n                           409 mm (16.1 in) (SSG 69 PIV)//nCartridge                  7.62×51mm NATO//c .243 Winchester//nAction                     Bolt-action//nMuzzle velocity            varies by type of round used//nEffective firing range     800 m (875 yd)//nFeed system                5-round rotary magazine//nSights                     iron sights on SSG 69 PI telescopic sight
gun-60000147,
gun-10000148,IWS 2000
gun-40000148,十月十日奏//cAsami Seto//c
gun-50000148,Type                       Semi-automatic Bullpup anti-materiel rifle//nWeight                     18 kg (39.7 lb)//nLength                     1//c800 mm (70.9 in)//nBarrel length              1//c200 mm (47.2 in)//nCartridge                  15.2×169mm//nAction                     Long recoil、rotating bolt//nMuzzle velocity            1//c450 meters per second (4//c757 feet per second)//nEffective firing range     1//c000 meters (1//c093 yards)//nFeed system                5-round detachable box magazine//nSights                     10x Telescopic sight
gun-60000148,
gun-10000149,AEK-999
gun-40000149,RAN//cMinami Tsuda//c
gun-50000149,Type                       General-purpose machine gun//nWeight                     8.74 kg //nLength                     1188 mm //nBarrel length              605 mm //nCartridge                  7.62×54mmR//nAction                     Gas-Operated//c open bolt//nRate of fire               650 rpm//nMuzzle velocity            825 m/s//nEffective firing range     1500 m//nFeed system                Belt-fed//nSights                     Rear leaf//c front post
gun-60000149,
gun-10000150,시프카
gun-40000150,八云玖//cKanae Itou//c
gun-50000150,Type                       Submachine gun//nWeight                     2 to 2//c2 kg without magazine//nLength                     338/625 mm//nBarrel length              150 mm//nCartridge                  9×18mm Makarov//n                           9×19mm Parabellum//nAction                     blowback//nRate of fire               700 round/min//nMuzzle velocity            438m/s//nFeed system                Detachable box magazine://n                              32 rounds (9×18mm)//n                              25 rounds (9×19mm)
gun-60000150,
gun-10000151,M1887
gun-40000151,REALMBW//cHitomi Nabatame//c
gun-50000151,Type                       Shotgun//nWeight                     8 lbs. (3.6 kg) //nLength                     39¼ in. (997 mm) //nBarrel length              20 in. (508 mm)//c 30 in. (762 mm)//nCartridge                  12-gauge//c 10-gauge//nAction                     Lever-action//nFeed system                5+2 round tubular magazine//nSights                     front bead
gun-60000151,
gun-10000152,M1897
gun-40000152,小迪//cMakoto Koichi//c
gun-50000152,Type                       Shotgun//nWeight                     8 lbs. (3.6 kg) //nLength                     39 1⁄4 in (1//c000 mm)//nBarrel length              20 in. (508 mm)//nCartridge                  12-gauge//c 16-gauge//nAction                     Pump-action//nFeed system                5-round tubular magazine//nSights                     front bead
gun-60000152,
gun-10000153,M37
gun-40000153,Rain Lan//cEmiri Katou//c
gun-50000153,Type                       Shotgun//nWeight                     Varies//nLength                     760mm-1006mm//nBarrel length              13 inches (330 mm) to//n                           30 inches (760 mm)//nCartridge                  12//c 16//c 20//c or 28 gauge//nAction                     manually operated//c pump-action  //nFeed system                4//c 5//c or 7-round tubular magazine (riot//c standard//c and extended tube versions)
gun-60000153,
gun-10000154,M500
gun-40000154,Ki桑//cRuriko Aoki//c
gun-50000154,Type                       Shotgun//nWeight                     5.5 lb (2.5 kg) to 7.5 (3.4 kg) empty//nLength                     varies with model//nBarrel length              14 to 30 inches (350 to 762 mm)//nCartridge                  12 gauge//c 20 gauge//c and .410 bore//nAction                     pump action//nMuzzle velocity            403 m/s (1//c325 ft/s) for 12-gauge//c 23⁄4"//c 00 buckshot load 475 m/s (1//c560 ft/s) for 12-gauge 437-grain rifled slug//nEffective firing range     40 m//nFeed system                varies//c 5+1 to 8+1 rounds; internal tube magazine//nSights                     varies
gun-60000154,
gun-10000155,M590
gun-40000155,防弹乳牛//cRuriko Aoki//c
gun-50000155,Type                       Shotgun//nWeight                     5.5 lb (2.5 kg) to 7.5 (3.4 kg) empty//nLength                     varies with model//nBarrel length              14 to 30 inches (350 to 762 mm)//nCartridge                  12 gauge//c 20 gauge//c and .410 bore//nAction                     pump action//nMuzzle velocity            403 m/s (1//c325 ft/s) for 12-gauge//c 23⁄4"//c 00 buckshot load 475 m/s (1//c560 ft/s) for 12-gauge 437-grain rifled slug//nEffective firing range     40 m//nFeed system                varies//c 5+1 to 8+1 rounds; internal tube magazine//nSights                     varies
gun-60000155,
gun-10000156,Super-Shorty
gun-40000156,废人//cAmi Nanase//c
gun-50000156,Type                       Shotgun//nWeight                     1.8 kg (4 lb)//nLength                     419 mm (16.5 in)//nBarrel length              165 mm (6.5 in)//nCartridge                  12 (3") and 20 (3") Gauge//nAction                     pump action//nFeed system                2-shot magazine tube//nSights                     None
gun-60000156,
gun-10000157,KSG
gun-40000157,neco//cShizuka Ito//c
gun-50000157,Type                       Bullpup pump-action shotgun//nWeight                     6.9 lb (3.1 kg)//nLength                     26.1 in (66 cm)//nBarrel length              18.5 in (47 cm)//nCartridge                  12 gauge (3" shells)//nAction                     Pump action//nFeed system                7+7+1 (2¾") dual-internal tube//nSights                     Iron sights are not standard
gun-60000157,
gun-10000158,KS-23
gun-40000158,死盖//cHiromi Igarashi//c
gun-50000158,Type                       Shotgun//nWeight                     3.85 kg//nLength                     1040 mm//nBarrel length              510 mm//nCartridge                  23x75mmR//nAction                     Pump action//nFeed system                3+1 rounds in underbarrel tube//nSights                     Iron
gun-60000158,
gun-10000159,RMB-93
gun-40000159,Bison仓鼠//cRui Kariya//c
gun-50000159,Type                       Shotgun//nWeight                     2.5 kg//nLength                     Stock extended: 920 mm//n                           Stock folded: 671 mm//nCartridge                  12-gauge//nAction                     Double action only pump-action//nRate of fire               12 rpm//nMuzzle velocity            340 meters per second//nFeed system                Feed system 6-7 round overbarrel tubular magazine
gun-60000159,
gun-10000160,Saiga-12
gun-40000160,防弹乳牛//cHisako Kanemoto//c
gun-50000160,Type                       Shotgun//nWeight                     3.6 kg (7.9 lb)//nLength                     1//c145 mm (45.1 in) //nBarrel length              580 mm (22.8 in) //nCartridge                  12-gauge//c 20-gauge//c .410//nAction                     Gas-operated//c rotating bolt//nFeed system                2//c 5//c 8//c and 10-round detachable box magazine//c 12//c 20 or 30-round detachable drum
gun-60000160,
gun-10000161,97식 산탄총
gun-40000161,河马//cYuka Ootsubo//c
gun-50000161,Type                       Shotgun//nWeight                     2.95 kg//nLength                     34.5 inches (880 mm)//nBarrel length              14 inches (360 mm)//nCartridge                  12 gauge//nAction                     Pump action//nFeed system                4 round internal tube magazine//nSights                     Bead Front
gun-60000161,
gun-10000162,SPAS-12
gun-40000162,洲川Terras//cMiyuki Kobori//c
gun-50000162,Type                       Combat shotgun//nWeight                     4.4 kg (8.75 lb)//nLength                     1041 mm (41 in) stock extended//n                           820 mm (32.5 in) stock folded//nBarrel length              18"//c19-7/8"//c21-1/2"//c24"//nCartridge                  12 gauge 2 3⁄4 inch shells only//nAction                     Pump-action/gas-actuated//nRate of fire               Semi-automatic or pump action//nEffective firing range    Dependent on ammunition used//nFeed system                Tube Extension 5+1//c 6+1//c 7+1 and 8+1 rounds//c internal tube magazine//nSights                     Regular iron sights
gun-60000162,
gun-10000163,AA-12
gun-40000163,Silverwing//cMariko Honda//c
gun-50000163,Type                       Automatic combat shotgun//nWeight                     5.2 kg less magazine. 7.3 kg with loaded 32-round drum (original version)//nLength                     966 mm//nBarrel length              457 mm(12in)//nCartridge                  12 Gauge//nAction                     API blowback//nRate of fire               300 rounds per minute//nMuzzle velocity            350 m/s (1//c100 ft/s)//nEffective firing range     100 m (12 gauge slug)//nFeed system                8 rounds in box magazine//c 20 or 32 rounds in drum magazines//nSights                     Iron sight//c 2× zoom optical scope
gun-60000163,
gun-10000164,FP-6
gun-40000164,nineo//cManami Numakura//c
gun-50000164,Type                       Combat shotgun//nWeight                     6.6 lb//nLength                     1050 mm（41.25 in）//nBarrel length              510 mm （20 in）//nCartridge                  12 gauge 2 3⁄4 & 3 inch shells//nAction                     pump-action//nEffective firing range     30 m//nFeed system                5+1 rounds or 7+1 rounds//c internal tube magazine//nSights                     Iron sight
gun-60000164,
gun-10000165,M1014
gun-40000165,DDAL//cRisa Kubota//c
gun-50000165,Type                       Combat shotgun//n                           Semi-automatic shotgun//nWeight                     3.82 kg (8.42 lb)//nLength                     885 mm (34.8 in)//nBarrel length              470 mm (18.5 in)//nCartridge                  12 gauge//nAction                     Gas-operated//c rotating bolt//nEffective firing range     55 yards (50.2 m)(164 ft)//nFeed system                5+1 (civilian) or 7+1 (Military//c LE) internal tube (Using 2.75 shells) magazine//nSights                     Ghost ring sight//c Picatinny rail for sights
gun-60000165,
gun-10000166,CZ75
gun-40000166,音符//cShiho Kokido//c
gun-50000166,Type                       Semi-automatic pistol//nWeight                     1.12 kg (2.47 lb)//nLength                     206.3 mm (8.1 in)//nBarrel length              120 mm (4.7 in)//nCartridge                  9×19mm Parabellum//n                           9×21mm//n                           .40 S&W//nAction                     short recoil//c tilting barrel//nRate of fire               semi-automatic//nEffective firing range     25 m (for 9mm CZ-75 family and CZ-75 Automatic)//nFeed system                detachable box magazine//c 12–26 rd depending on version and caliber//nSights                     Front blade//c rear square notch
gun-60000166,
gun-10000167,HK45
gun-40000167,雪樱樱//cAyaka Fujii//c
gun-50000167,Type                       Semi-automatic pistol//nWeight                     770 g (27 oz) (HK45)//n                           720 g (25 oz) (HK45 Compact)//nLength                     204 mm (8.0 in) (HK45)//n                           184 mm (7.2 in) (HK45 Compact)//nBarrel length              113 mm (4.4 in) (HK45)//n                           99 mm (3.9 in) (HK45 Compact)//nCartridge                  .45 ACP//nAction                     Short recoil operated//c Browning-type tilting barrel//c locked breech//nFeed system                Detachable box magazine; capacities://n                                10 rounds (HK45)//n                                8 or 10 rounds (HK45C)//nSights                     Drift adjustable 3-dot Super-LumiNova night sight system
gun-60000167,
gun-10000168,Spitfire
gun-40000168,Skade//cRyouko Maekawa//c
gun-50000168,Type                       Semi-automatic pistol//nWeight                     1.12 kg (2.47 lb)//nLength                     206.3 mm (8.1 in)//nBarrel length              120 mm (4.7 in)//nCartridge                  9×19mm Parabellum//n                           9×21mm//n                           .40 S&W//nAction                     short recoil//c tilting barrel//nEffective firing range     25 m//nFeed system                detachable box magazine//c 12–26 rd depending on version and caliber//nSights                     Front blade//c rear square notch
gun-60000168,
gun-10000169,SCW
gun-40000169,幻象黑兔//cArisa Ida//c
gun-50000169,Type                       Compact assault rifle//nWeight                     2.98 kg//nLength                     579/724/768 mm//nBarrel length              263 mm//nCartridge                  5.56×45mm NATO//nCaliber                    5.56 mm (.223 in)//nAction                     Gas-operated//c rotating bolt (Direct impingement)//nRate of fire               700–950 round/min cyclic//nMuzzle velocity            642 m/s//nEffective firing range     400 m (550 yd)//nFeed system                30/60 round box magazine//nSights                     Iron sights or various optics
gun-60000169,
gun-10000170,ASh-12.7
gun-40000170,仙女V//cRiiko Tazawa//c
gun-50000170,Type                       Bullpup battle rifle//nWeight                     6 kg (13 lb)//nLength                     1//c020 mm (40 in)//nCartridge                  12.7×55mm//nAction                     Gas-operated//nMuzzle velocity            290-315 m/s//nEffective firing range     100 metres (330 ft)//nFeed system                10/20-round detachable box magazine//nSights                     Iron sights//c Picatinny rail
gun-60000170,
gun-10000171,리베롤
gun-40000171,rei//cRina Hidaka//c
gun-50000171,Type                       Automatic carbine//nWeight                     5.1 kg Unloaded//nLength                     1090 mm//nBarrel length              450 mm//nCartridge                  8×35mm Ribeyrolle//nAction                     Direct Blow-back//nRate of fire               550–600 rounds per minute//nMuzzle velocity            570 m/s//nEffective firing range     400 m//nFeed system                25-round box magazine//nSights                     Graduated sights up to 500 m
gun-60000171,
gun-10000172,RFB
gun-40000172,Anmi//cKanae Itou//c
gun-50000172,Type                       Semi-automatic rifle//nWeight                     8.1 lb (3.7 kg) w. 18 in (460 mm) barrel (Carbine)//n                           8.7 lb (3.9 kg) w. 24 in (610 mm) barrel (Sporter)//n                           11.3 lb (5.1 kg) w. 32 in (810 mm) barrel (Target)//nLength                     26 in (660 mm) (Carbine)//n                           32 in (810 mm) (Sporter)//n                           40 in (1//c000 mm) (Target)//nBarrel length              18 in (460 mm) (Carbine)//n                           24 in (610 mm) (Sporter)//n                           32 in (810 mm) (Target)//nCartridge                  7.62×51mm NATO//nAction                     Gas-operated piston//c tilting breechblock//nRate of fire               Semi-automatic//nMuzzle velocity            2//c500 ft/s (760 m/s)//nEffective firing range     500 m (550 yd)//nFeed system                10 or 20-round metric FAL detachable box magazines//nSights                     None
gun-60000172,
gun-10000173,PKP
gun-40000173,虎三//cMinami Tsuda//c
gun-50000173,Type                       General purpose machine gun//nWeight                     8.2 kilograms (18 lb) on bipod//n                           27.7 pounds (12.6 kg) on infantry tripod mount//nLength                     1//c200 mm (47 in) //nBarrel length              658 mm (25.9 in)//nCartridge                  7.62×54mmR//nAction                     Gas-operated//nRate of fire               600–800 RPM//nMuzzle velocity            825 m/s (2//c707 ft/s)//nEffective firing range     1500 m//nFeed system                Belt. 100//c 200 or 250-round
gun-60000173,
gun-10000174,81식 카빈
gun-40000174,八才//cYuka Saito//c
gun-50000174,Type                       Bolt-action rifle//nWeight                     3.36 kg //nLength                     1//c510 mm//nBarrel length              570 mm//nCartridge                  7.92×33mm//nAction                     Bolt-action//nEffective firing range     200 m //nFeed system                5-round stripper clip//c internal magazine//nSights                     iron sights
gun-60000174,
gun-10000175,ART556
gun-40000175,Saru//cRina Hidaka//c
gun-50000175,Type                       Battle Rifle//nWeight                     3.29 kg //nLength                     889 mm (35.0 in) stock extended//n                           635 mm (25.0 in) stock folded //nBarrel length              355 mm (14.0 in)//nCartridge                  5.56×45mm NATO//nAction                     Gas-operated //crotating bolt//nRate of fire               550-650 rounds per minute //nEffective firing range     600 m //nFeed system                STANAG box magazine
gun-60000175,
gun-10000176,TMP
gun-40000176,废人//cKibune Sachiho//c
gun-50000176,Type                       Compact Sub machine gun//nWeight                     1.3 kg (2.9 lb) empty //nLength                     282 mm (11.10 in.)//nBarrel length              130 mm (5.12 in.)//nCartridge                  9×19mm Parabellum//nAction                     Short recoil//c locking rotating barrel//c delayed blowback//nRate of fire               850–900 rounds/min//nMuzzle velocity            400 m/s (1//c312 ft/s)//nEffective firing range     100 m//nFeed system                15-//c 20-//c or 30-round detachable box magazine//nSights                    Iron sights
gun-60000176,
gun-10001001,노엘
gun-40001001,水熊//cKanako Kondo//c
gun-50001001,
gun-60001001,
gun-10001002,엘펠트
gun-40001002,ZAGALA//cAya Suzaki//c
gun-50001002,
gun-60001002,
gun-10000102,UMP40
gun-40000102,Renatus.Z//cEmi Uema//c
gun-50000102,Type                       Submachine Gun//nWeight                     2.3 kilograms (5.2 lb) //nLength                     450 mm (17.7 inches)//c stock folded//n                           690 mm (27.2 inches)//c stock extended//nBarrel length              200 mm (8 inches)//nCartridge                  .40 S&W //nAction                     Blowback//c closed bolt//nRate of fire               650 rounds per minute //nMuzzle velocity            320 m/s //nEffective firing range     100 m//nFeed system                30-round detachable box magazine 
gun-60000102,
gun-10000177,KLIN
gun-40000177,水熊//cMiyuki Kobori//c
gun-50000177,Type                       Submachine Gun//nWeight                     1.54 kg (3.4 lb)  //nLength                     539 mm (21.2 in) stock extended//n                           305 mm (12.0 in) stock folded //nBarrel length              120 mm (4.7 in) //nCartridge                  9×18mm Makarov//nAction                     Delayed blowback //nRate of fire               975–1//c060 rounds/min //nMuzzle velocity            430 m/s (1//c410.8 ft/s)//nEffective firing range     200 m (660 ft)//nFeed system                20//c 30-round detachable box magazine//nSights                     Front blade//c rear notch
gun-60000177,
gun-10000178,F1
gun-40000178,Ki桑//cMakoto Koichi//c
gun-50000178,Type                       Submachine Gun//nWeight                     3.7 kg (Empty)//n                           4.30 kg (Loaded)//nLength                     714 mm//nBarrel length              198 mm//nCartridge                  9×19mm Parabellum//nAction                     Blowback//c Open bolt//nRate of fire               600–640 rounds/min//nEffective firing range     150 m//nFeed system                34-round Sterling SMG compatible box magazine//nSights                     Offset iron sights
gun-60000178,
gun-10000179,DSR-50
gun-40000179,liduke//cYuka Saito//c
gun-50000179,Type                       Bullpup bolt-action sniper/anti-materiel rifle//nWeight                     10.3 kg (22.7 lb) (empty)//nLength                     1//c230 mm (48.4 in) (without blast compensator)//n                           1//c350 mm (53.1 in) (with blast compensator)//nBarrel length              800 mm (31.5 in)//nCartridge                  .50 BMG//nAction                     Bolt-action//nEffective firing range     1//c800 m //nFeed system                3-round detachable box magazine//nSights                     Picatinny rail for mounting optical sights
gun-60000179,
gun-10000180,PzB39
gun-40000180,nineo//cHisako Kanemoto//c
gun-50000180,Type                       Anti-tank rifle//nWeight                     11.6 kg (25.57 lb)  //nLength                     1//c620 mm (63.8 in)//nBarrel length              1//c085 mm (42.7 in)//nCartridge                  7.92x94mm Patronen//nAction                     Falling-block action//nRate of fire               10 rounds/min (practical rate)//nMuzzle velocity            1210 m/s//nEffective firing range     300 m (330 yd) (for penetration of 25 mm armor)//nSights                     Hooded front post//c rear "V" notch
gun-60000180,
gun-10000181,T91
gun-40000181,Krenz//cShiho Kokido//c
gun-50000181,Type                       Assault rifle//nWeight                     3.17 kg//nLength                     880 mm (stock extended)//n                           800 mm (stock retracted)//nBarrel length              406 mm//nCartridge                  5.56×45mm NATO//nAction                     Gas-operated//c rotating bolt//nRate of fire               800-850 rpm //nMuzzle velocity            975 m/s//nEffective firing range     400m//n                           600m (with optics)//nFeed system                Various STANAG Magazines.//nSights                     M16A2-style sights with windage and elevation adjustments//n                           Picatinny railing can be used for mounting various optical sights
gun-60000181,
gun-10000182,wz.29
gun-40000182,zui//cKotomi Aihara//c
gun-50000182,Type                       Service rifle//nWeight                     4.0 kg (8.8 lb)//nLength                     1//c100 mm (43 in)//nBarrel length              600 mm (24 in) //nCartridge                  8×57 mm IS//nAction                     Bolt action//nRate of fire               approx 15 round/min//nMuzzle velocity            745 m/s (2//c440 ft/s)//nFeed system                5-round internal box magazine
gun-60000182,
gun-10000183,컨텐더
gun-40000183,細重ソウジ//cAsami Seto//c
gun-50000183,Type                       Break-action//nWeight                     1.58kg(3.5 lb)//nLength                     393.7mm(15.5in)//nBarrel length              304.8mm(12in)//nCartridge                  17 HMR//c204 Ruger//c22 LR Match//c223 Rem//c30-30 Win//c357 Rem Mag//c44 Rem Mag//c45 Colt/410 Bore//c45/70 Govt.//c6.8 Rem//c7-30 Waters//nAction                     Single-action//nFeed system                Single-shot//nSights                     Various
gun-60000183,
gun-10000184,T-5000
gun-40000184,92M//cYukiyo Fujii//c
gun-50000184,Type                       Sniper rifle//nWeight                     6.5 kg (14.3 lb)//nLength                     1//c180 mm (46.5 in)//nBarrel length              660 mm (26.0 in)//nCartridge                  7.62×51mm NATO (.308 Winchester)//n                           .300 Winchester Magnum//n                           .338 Lapua Magnum//nAction                     Bolt-action//nFeed system                5-round detachable box magazine
gun-60000184,
gun-10000185,아멜리
gun-40000185,水熊//cChiyo Ousaki//c
gun-50000185,Type                       Light machine gun//nWeight                     5.3 kg (11.68 lb)//nLength                     970 mm (38.2 in)//nBarrel length              400 mm (15.7 in)//nCartridge                  5.56×45mm NATO//nAction                     Roller-delayed blowback//nRate of fire               800–1//c200 rounds/min//nMuzzle velocity            875 m/s (2//c871 ft/s) (SS109 cartridge)//nEffective firing range     300—1//c000 m sight adjustments//nMaximum firing range       1//c650 m//nFeed system                100 or 200-round M27 belt//nSights                     Rear aperture sight and front post//n                           340 mm (13.4 in) sight radius
gun-60000185,
gun-10000186,P226
gun-40000186,PHI//cRyouko Maekawa//c
gun-50000186,Type                       Semi-automatic pistol//nWeight                     964 g (34.0 oz)//nLength                     196 mm (7.7 in)//nBarrel length              112 mm (4.4 in)//nCartridge                  9×19mm Parabellum//c .40 S&W//c .357 SIG//c .22 Long Rifle (Classic 22 model only)//nAction                     Mechanically locked//c recoil operated//nMuzzle velocity            350 m/s //nFeed system                10-//c 12-//c 13-//c or 15-round magazine (.40 S&W//c .357 SIG);10-//c 15-//c 17-//c 18-//c or 20-round magazine (9×19mm Parabellum);10-round polymer magazine (Classic 22 only)//nSights                     Iron sights
gun-60000186,
gun-10000187,Ak 5
gun-40000187,百足//cAmi Nanase//c
gun-50000187,Type                       Assault rifle//nWeight                     Ak 5 empty 3.9 kg (8.60 lb)//n                           Ak 5B empty 4.8 kg (10.58 lb)//n                           Ak 5C empty 4.0 kg (8.82 lb)//n                           Ak 5 loaded 4.5 kg (9.92 lb)//n                           Ak 5B loaded 5.4 kg (11.90 lb)//n                           Ak 5C loaded 4.5 kg (9.92 lb)//n                           30-round steel magazine empty: 0.17 kg (0.37 lb)//n                           30-round plastic magazine empty: 0.10 kg (0.22 lb)//nBarrel length              Ak 5 / Ak 5B 600 mm (23.6 in)//n                           Ak 5C 450 mm (17.7 in)//nCartridge                  5.56×45mm NATO//nAction                     Gas-operated//c rotating bolt//nRate of fire               Ak 5 (B) 650–700 rounds/min cyclic//n                           Ak 5C 650 rounds/min cyclic//nMuzzle velocity            Ak 5(B) 930 m/s (3//c051 ft/s)//n                           Ak 5C 870 m/s (2//c854 ft/s)//nEffective firing range     250 and 400 m sight adjustments//nFeed                       30-round detachable STANAG magazine//nSights                     Rear flip aperture//c front post iron sights//n513 mm (20.2 in) sight radius (standard rifle)//n                           Optical sights
gun-60000187,
gun-10000188,S.A.T.8
gun-40000188,NIN//cAzumi Asakura//c
gun-50000188,Type                       Shotgun//nWeight                     3.15 kg//nLength                     1050 mm//nBarrel length              510 mm//nCartridge                  12ga 2.75 and 3"//nAction                     Gas operated//nRate of fire               Semi-automatic//nFeed system                7+1 round tubular magazine//nSights                     Iron sights//c ghost ring//c optional optical sights
gun-60000188,
gun-10000189,USAS-12
gun-40000189,麻将//cKotomi Aihara//c
gun-50000189,Type                       Automatic shotgun//nWeight                     5.45 kg less magazine. 6.2 kg (with 10-round magazine)//nLength                     960 mm//nBarrel length              460 mm//nCartridge                  12-gauge//nAction                     Gas-operated//c rotating bolt//nRate of fire               400-450 rounds per minute//nMuzzle velocity            400 m/s//nEffective firing range     30–40 m//nFeed system                10-round detachable box magazine or 20-round drum magazine//nSights                     Iron sights
gun-60000189,
gun-10000190,NS2000
gun-40000190,HIKARI//cKarin Nanami//c
gun-50000190,Type                       Bullpup combat shotgun//nWeight                     3.9 kg//nLength                     686 mm//nBarrel length              572 mm//nCartridge                  12 gauge//nAction                     Pump action//nFeed system                Overhead dual tube magazine (6 rounds per tube)//nSights                     Iron sights
gun-60000190,
gun-10000191,M12
gun-40000191,猫头神//cAkane Hanazawa//c
gun-50000191,Type                       Carbine //nWeight                     3.0 kg (6.61 lb) //nLength                     645 mm (25.4 in) stock extended//n                           418 mm (16.5 in) stock folded//nBarrel length              200 mm (7.9 in)//nCartridge                  9×19mm Parabellum//nAction                     Blowback//nRate of fire               550 rounds/min//nMuzzle velocity            380 m/s (1//c247 ft/s)//nEffective firing range     100 to 200 m sight adjustments//nFeed system                20-//c 32-//c or 40-round detachable box magazine//nSights                     Two-position flip rear aperture//c shrouded front post//n                           285 mm (11.2 in) sight radius
gun-60000191,
gun-10000192,JS05
gun-40000192,音符//cSatomi Satou//c
gun-50000192,Type                       Anti-materiel rifle//nWeight                     12.5 kg //nLength                     1//c392 mm //nBarrel length              850 mm//nCartridge                  12.7mmTungsten heart APDS//nAction                     Bolt-action//nMuzzle velocity            1//c150 m/s //nEffective firing range     1//c500m 
gun-60000192,
gun-10000193,T65
gun-40000193,PHI//cArisa Ida//c
gun-50000193,Type                       Assault rifle//nWeight                     3.31 kg//nLength                     990 mm//nBarrel length              508 mm//nCartridge                  5.56×45mm NATO//nAction                     Gas-operated//c rotating bolt//nRate of fire               700-800 RPM//nEffective firing range     1000 m//nFeed system                Various STANAG Magazines.//nSights                     Iron sights
gun-60000193,
gun-10000194,K2
gun-40000194,Anmi//cYukiyo Fujii//c
gun-50000194,Type                       Assault rifle//nWeight                     3.26 kg (7.2 lb)//nLength                     980 mm (39 in) (extended)//n                           730 mm (29 in) (folded)//nBarrel length              465 mm (18.3 in)//nCartridge                  5.56×45mm NATO//nAction                     Gas operated//c Rotating bolt (long-stroke piston)//nRate of fire               750 rounds/min//nMuzzle velocity            920 m/s (3//c000 ft/s) //nEffective firing range     600 m//nFeed system                Various STANAG Magazines//nSights 
gun-60000194,
gun-10000195,HK23
gun-40000195,Rain Lan//cSatomi Satou//c
gun-50000195,Type                       General-purpose machine gun//nWeight                     8.75 kg (19.3 lb)//nLength                     1//c030 mm (40.6 in)//nBarrel length              450 mm (17.7 in)//nCartridge                  5.56×45mm NATO//nAction                     Roller-delayed blowback//nRate of fire               800 rounds/min//nMuzzle velocity            910 m/s (2//c985.6 ft/s) //nEffective firing range     100–1//c200 m sight adjustments//nFeed system                M13//c DM6//c DM1 ammunition belt//c 20-round detachable box or 50-round drum magazine (from the G3). An 80-round drum magazine or even a 100-round drum magazine was also available (No longer manufactured)//nSights                     Rear rotary diopter drum; hooded front post
gun-60000195,
gun-10001003,키아나
gun-40001003,水乌龟//c//c
gun-50001003,
gun-60001003,
gun-10001004,라이덴 메이
gun-40001004,NIN//c//c
gun-50001004,
gun-60001004,
gun-10001005,브로냐
gun-40001005,水熊//c//c
gun-50001005,
gun-60001005,
gun-10001006,테레사
gun-40001006,咩爆//c//c
gun-50001006,
gun-60001006,
gun-10001007,무라타 히메코
gun-40001007,DOGALA//c//c
gun-50001007,
gun-60001007,
gun-10001008,제레
gun-40001008,DOGALA//c//c
gun-50001008,
gun-60001008,
gun-10000137,PP-19-01
gun-40000137,熊猫印象//cAyaka Fujii//c
gun-50000137,Type                       Submachine Gun//n//nWeight                     2.1 kg (4.63 lb)//n//nLength                     690 mm (27.2 in) stock extended//n//n                           460 mm (18.1 in) stock folded //n//nBarrel length              225 mm (8.9 in) //n//nCartridge                  9×18mm Makarov//n//n                           9×19mm Parabellum//n//n                           .380 ACP (9×17mm Short)//n//n                           7.62×25mm Tokarev//n//nAction                     Blowback//c closed bolt//n//nRate of fire               650–700 rounds/min//n//nMuzzle velocity            320 m/s (1//c050 ft/s) (9×18mm Makarov)//n//n                           380 m/s (1//c246.7 ft/s) (9×19mm Parabellum)//n//nEffective firing range     100 m (9×18mm Makarov)//n//n                           200 m (9×19mm Parabellum)//n//nFeed system                64-round helical magazine (9×18mm Makarov)//n//n                           53-round helical magazine (9×19mm Parabellum) (Bizon-2-01)//n//nSights                     Hooded front post//c rear flip-up notch
gun-60000137,
gun-10000196,Zas M21
gun-40000196,nineo//cAzumi Asakura//c
gun-50000196,Type                       Assault rifle//c submachine gun//nWeight                     4.15 kg (9.1 lb) (M21 A)//n                           4.07 kg (9.0 lb) (M21 S)//n                           3.91 kg (8.6 lb) (M21 C)//nLength                     1//c000 mm (39 in) stock extended//c 750 mm (30 in) stock folded (M21A)//n                           915 mm (36.0 in) stock extended//c 666 mm (26.2 in) stock folded (M21S)//n                           825 mm (32.5 in) stock extended//c 575 mm (22.6 in) stock folded (M21C)//nBarrel length              460 mm (18 in) (M21 A)//n                           375 mm (14.8 in) (M21 S)//n                           325 mm (12.8 in) (M21 C)//nCartridge                  5.56×45mm NATO//nAction                     Gas-operated (rotating bolt)//nRate of fire               680 rounds/min//nMuzzle velocity            925 m/s//nEffective firing range     450 m (490 yd) with iron sights//n                           600 m (660 yd) with optics //nFeed system                30-round detachable box magazine//nSights                     Adjustable iron sights//c optional mount required for optical sights
gun-60000196,
gun-10000197,카르카노M1891
gun-40000197,細重ソウジ//cReina Ueda//c
gun-50000197,Type                       Bolt-action rifle//nWeight                     3.9 kg (8.6 lb)//nLength                     1//c285 mm (50.6 in)//nBarrel length              780 mm (30.7 in)//nCartridge                  6.5×52mm Carcano//n                           7.35×51mm Carcano//n                           6.5×54mm Mannlicher–Schönauer//n                           7.92×57mm Mauser//n                           6.5×50mm Arisaka (Type I)//nAction                     Bolt action//nMuzzle velocity            700 m/s (2//c300 ft/s)//nEffective firing range     1//c000 m (1//c100 yd)//nFeed system                6 round integral magazine//c loaded with an en-bloc clip
gun-60000197,
gun-10000198,카르카노M91/38
gun-40000198,細重ソウジ//cReina Ueda//c
gun-50000198,Type                       Bolt-action rifle//nWeight                     3.4 kg //nLength                     1//c015 mm //nBarrel length              540 mm //nCartridge                  6.5×52mm Carcano//n                           7.35×51mm Carcano//n                           6.5×54mm Mannlicher–Schönauer//n                           7.92×57mm Mauser//n                           6.5×50mm Arisaka (Type I)//nAction                     Bolt action//nMuzzle velocity            600-750 m/s//nEffective firing range     600 m //nFeed system                6 round integral magazine//c loaded with an en-bloc clip
gun-60000198,
gun-10000199,80식
gun-40000199,兔爷//cRiiko Tazawa//c
gun-50000199,Type                       General-purpose machine gun//nWeight                     12.6 kg (27.78 lb)//nLength                     1//c192 mm (46.9 in)//nBarrel length              658 mm (25.9 in)//nCartridge                  7.62×54mmR//nAction                     Gas-operated//c open bolt//nRate of fire            700–800 round/min//nMuzzle velocity            840 m/s (2//c776 ft/s)//nEffective firing range     1//c640 yd (100—1//c500 m sight adjustments)//nFeed system                Belts in 100/200/250 round boxes//nSights                     Open sights. Optical/Night vision scope can be outfitted
gun-60000199,
gun-10000200,XM3
gun-40000200,时辰//cChihiro Inamoto//c
gun-50000200,Type                     Battle rifle//nCaliber   .308 Winchester / 7.62MM//nBarrel   18.5 "Hart 416R stainless steel barrel//nRifling   1:10 inch twist pitch//c right / 6//nFor ammunition  built in 5 magazine//nMuzzle velocity  2530 FPS //nMaximum effective range 1000 yards//nFull length  40.50 "/46.25" (with a muffler)//nOptical sighting Nightforce NXS 3.5-15x50 Illuminated Mildot with a weight of 2 pounds 3 ounces (including mirror rings)//nNight sight sighting AN/PVS-22 Universal Night Sight (UNS)//nCombat weight  16 pounds (day) /18 pounds (night)
gun-60000200,
gun-10000201,게파드 M1
gun-40000201,荒境TS//cIzumi Chiba//c
gun-50000201,Type                       Bullpup anti-materiel rifle//nWeight                     17.5 kg / 38.6 lbs//nLength                     1//c570 mm / 61.8"//nBarrel length              1//c100 mm / 43.3"//nCartridge                  12.7×108mm//n                           .50 BMG//n                           14.5×114mm//nAction                     Single shot//nMuzzle velocity            900 m/s (.50 BMG)//n                           860 m/s (12.7×108mm)//n                           1000 m/s (14.5 mm)//nEffective firing range     2//c000 m//nFeed system                Single shot//nSights                     12× scope
gun-60000201,
gun-10000202,썬더
gun-40000202,NIN//cYuuki Kuwahara//c
gun-50000202,Type                       Break-action//nWeight                     5.44kg//nLength                     429.26mm//nBarrel length              335.28mm//nCartridge                  .50 BMG (12.7×99mm NATO)//nAction                     Single-action//nFeed system                Single-shot//nSights                     Various
gun-60000202,
gun-10000028,MP7
gun-40000028,戏言咸咸//cLynn//c
gun-50000028,Type                       Submachine Gun//nWeight                     1.90 kg (4.2 lb)//nLength                     638 mm (25.1 in) stock extended //n                           415 mm (16.3 in) stock collapsed//nBarrel length              180 mm (7.1 in)//nCartridge                  4.6×30mm//nAction                     Gas-operated//c short stroke piston//c rotating bolt//nRate of fire               950 rounds/min//nMuzzle velocity            735 m/s (2//c411 ft/s) //nEffective firing range     200 m (656 ft)//nFeed system                20-//c 30- or 40-round detachable box magazine//nSights                     Tritium-illuminated flip-up night sights; handgun and rifle sights (adjustable)
gun-60000028,
gun-10000203,허니뱃저
gun-40000203,HJL//cAyaka Fujii//c
gun-50000203,Type                       Personal defense weapon//nWeight                     6.5 lb (2.9 kg) (unloaded)//nLength                     24 in (61 cm) (fully retracted with suppressor)//n                           29 in (74 cm) (fully extended with suppressor)//nBarrel length              6 in (15 cm)//nCartridge                  300 AAC Blackout (7.62×35mm)//nAction                     Gas-operated//cRotating bolt//nRate of fire               ~800 RPM cyclic//nMuzzle velocity            640 m/s//nEffective firing range     400 m//nFeed system            　　Various STANAG Magazines//nSights                     MIL-STD-1913 rail provided for optics
gun-60000203,
gun-10000204,발리스타
gun-40000204,水乌龟//cMariko Honda//c
gun-50000204,Type                       Sniper Rifle//nWeight                     6.8 kg //nLength                     1//c212.85 mm stock extended//n                           939.8 mm stock folded//nBarrel length              .308 Winchester：609.6 mm//n                           .300 Winchester Magnum：660.4 mm//n                           .338 Lapua Magnum：660.4 mm//nCartridge                  .308 Winchester//n                           .300 Winchester Magnum//n                           .338 Lapua Magnum//nAction                     Bolt-action//nMuzzle velocity            .308 Winchester：710 m/s//n                           .300 Winchester Magnum：850 m/s//n                           .338 Lapua Magnum：915 m/s//nEffective firing range     1//c500 m (1//c640 yd)//nFeed system                .308 Winchester: 7 or 15 rounds//n                           .300 Winchester Magnum: 6 or 10 rounds//n                           .338 Lapua Magnum: 5 or 8 rounds//nSights                     detachable aperture type iron sights//n                           day or night optics
gun-60000204,
gun-10000206,AK-12
gun-40000206,多元菌//cAzumi Waki//c
gun-50000206,Type                       Assault rifle//nWeight                     3.3 kg (7.28 lb)//nLength                     945 mm (37.2 in) (725 mm stock folded)//nBarrel length              415 mm (16.3 in)//nCartridge                  5.45×39mm//nAction                     Gas-operated//c long stroke gas piston//c rotating bolt//nRate of fire               700 RPM//nMuzzle velocity            880–900 m/s (2//c887–2//c953 ft/s)//nEffective firing range     500–600 m (547–656 yd)//nFeed system                30-round detachable box magazine//n                           60-round detachable casket magazine//n                           96-round detachable drum magazine from the RPK-16//n                           Detachable magazines from the AK-74 and RPK-74//nSights                     Back-up iron sights and integrated Picatinny rail for various optics
gun-60000206,
gun-10000205,AN-94
gun-40000205,多元菌//cManami Numakura//c
gun-50000205,Type                       Assault rifle//nWeight                     3.85 kg (8.49 lb)//nLength                     943 mm (37.1 in) stock extended//n                           728 mm (28.7 in) stock folded//nBarrel length              405 mm (15.9 in)//nCartridge                  5.45×39mm//nAction                     Gas-operated//nRate of fire               1800 (2 round burst) or 600 (full auto) rounds/min//nMuzzle velocity            900 m/s (2//c953 ft/s)//nEffective firing range     700 m//nFeed system                30//c 45 round AK-74 compatible box magazines//n                           60-round Casket magazines//nSights                     Iron sights//n                           700 mm (27.6 in) sight radius//c optional optics
gun-60000205,
gun-10000207,CZ2000
gun-40000207,NoriZC//cHarumi Sowa//c
gun-50000207,Type                       Assault rifle//nWeight                     2.60 kg (5.73 lb) (carbine)//n                           3.00 kg (6.61 lb) (standard rifle)//n                           4.10 kg (9.0 lb) (LMG)//nLength                     675 mm (26.6 in) stock extended/435 mm (17.1 in) stock folded (carbine)//n                           850 mm (33.5 in) stock extended/615 mm (24.2 in) stock folded (standard rifle)//n                           226 mm (8.9 in) stock extended/1//c050 mm (41.3 in) stock folded (LMG)//nBarrel length              185 mm (7.3 in) (carbine)//n                           382 mm (15.0 in) (standard rifle)//n                           577 mm (22.7 in) (LMG)//nCartridge                  5.45×39mm (LADA)//n                           5.56×45mm NATO (ČZ 2000)//nAction                     Gas-operated//c rotating bolt//nRate of fire               750-850 rounds/min//nMuzzle velocity            735 m/s (2//c411 ft/s) (carbine)//n                           910 m/s (2//c985.6 ft/s) (standard rifle)//n                           960 m/s (3//c149.6 ft/s) (LMG)//nEffective firing range     100 to 800 m sight adjustments (carbine//c standard rifle)//n                           100 to 1000 m sight settings (LMG)//nFeed system                30-round detachable box magazine//c weight: 0.17 kg (0.37 lb) or 75-round detachable drum magazine//c weight 0.94 kg (2.1 lb) (ČZ 2000)//nSights                     Rear aperture on scaled tangent//c front post//c equipped with self-luminous tritium dots
gun-60000207,
gun-10000208,HK21
gun-40000208,小吃//cLynn//c
gun-50000208,Type                       General-purpose machine gun//nWeight                     7.92 kg (17.46 lb)//nLength                     1//c021 mm (40.2 in)//nBarrel length              450 mm (17.7 in)//nCartridge                  7.62×51mm NATO//nAction                     Roller-delayed blowback//nRate of fire               900 rounds/min//nMuzzle velocity            800 m/s (2//c625 ft/s)//nEffective firing range     100–1//c200 m sight adjustments//nFeed system                M13//c DM6//c DM1 ammunition belt//c 20-round detachable box or 50-round drum magazine (from the G3). An 80-round drum magazine or even a 100-round drum magazine was also available (No longer manufactured)//nSights                     Rear rotary diopter drum; hooded front post
gun-60000208,
gun-10000210,CZ52
gun-40000210,小吃//cAsuka Kawakami//c
gun-50000210,Type                       Semi-automatic pistol//nWeight                     0.95 kg (2.09 lb)//nLength                     210 mm (8.3 in)//nBarrel length              120 mm (4.7 in)//nCartridge                  7.62×25mm Tokarev//nAction                     Recoil operated//c roller locked//nMuzzle velocity            500 m/s (1//c640 ft/s)//nEffective firing range     50 m//nFeed system                8-round detachable box magazine//nSights                     Rear: notched and dovetailed//nfront: fixed blade
gun-60000210,
gun-10000209,OTs-39
gun-40000209,spirtie//cHarumi Sowa//c
gun-50000209,Type                       Submachine Gun//nWeight                     3.7 kg (Empty)//n                           4.30 kg (Loaded)//nLength                     714 mm//nBarrel length              198 mm//nCartridge                  9×19mm Parabellum//nAction                     Blowback//c Open bolt//nRate of fire               600–640 rounds/min//nEffective firing range     150 m//nFeed system                34-round Sterling SMG compatible box magazine//nSights                     Offset iron sights
gun-60000209,
gun-10000211,SRS
gun-40000211,neco//cArisa Kori//c
gun-50000211,Type                       Bullpup sniper rifle//nWeight                     10 lb (4.5 kg) (Covert)//n                           11.5 lb (5.2 kg) (.243 Winchester)//n                           11 lb (5.0 kg) (7.62×51mm)//n                           12 lb (5.4 kg) (.300 Winchester Short Magnum)//n                           12.37 lb (5.6 kg) (.338 Lapua Magnum)  //nLength                     26 in (660.4 mm) (Covert)//n                           33.5 in (850.9 mm) (.243 Winchester)//n                           31.5 in (800.1 mm) (7.62×51mm)//n                           35.5 in (901.7 mm) (.300 Winchester Magnum)//n                           37.5 in (952.5 mm) (.338 Lapua Magnum)//nBarrel length              16 in (406.4 mm) (Covert)//n                           24 in (609.6 mm) (.243 Winchester)//n                           22 in (558.8 mm) (7.62×51mm)//n                           26 in (660.4 mm) (.300 Winchester Magnum)//n                           26 in (660.4 mm) (.338 Lapua Magnum)//nCartridge                  .243 Winchester//n                           7.62×51mm NATO (.308 Winchester)//n                           .300 Winchester Magnum//n                           .338 Lapua Magnum//nAction                     Bolt-action//nFeed system                5-round detachable box magazine (.338 Lapua Magnum)//n                           6-round detachable box magazine (.300 Winchester)//n                           7-round detachable box magazine (.243 Winchester//c .308 Winchester)//nSights                     Telescopic sight
gun-60000211,
gun-10000212,K5
gun-40000212,Lpip//cChihiro Inamoto//c
gun-50000212,Type                       Semi-automatic pistol//nWeight                     734 g (25.9 oz) DP51//n                           751 g (26.5 oz) DP51 MKII//n                           686 g (24.2 oz) DP51C//nLength                     178 mm (7.0 in) DP51 (MKII)//n                           177.8 mm (7.0 in) DP51C//nBarrel length              104.14 mm (4.1 in)DP51 (MKII)//n                           91.14 mm (3.6 in) DP51C//nCartridge                  9×19mm Parabellum//nAction                     Semi-automatic//nEffective firing range     50 m//nFeed system                13- or 15-round magazine DP51 (MKII)//nSights                     Iron sights
gun-60000212,
gun-10000213,C-MS
gun-40000213,小吃//cHaruno Anzu//c
gun-50000213,Type                       Personal defense weapon/submachine gun//nWeight                     2.8 kg (empty)//nLength                     363 / 565 mm//nBarrel length              200 mm//nCartridge                  6.5×25mm CBJ and 9×19mm Parabellum//nRate of fire               700 rounds/min//nMuzzle velocity            2//c723 ft/s (830 m/s)//nEffective firing range     150 m //nFeed                       20//c 30 or 100 rounds//nSights                     Adjustable open sights
gun-60000213,
gun-10000215,MDR
gun-40000215,RAN//cAimi//c
gun-50000215,Type                       Bullpup assault rifle//nWeight                     3.93 kg//nLength                     665mm//nCartridge                  5.56x45mm NATO//n                           7.62x51mm NATO//n                           .300 BLK//nRate of fire               750 RPM//nFeed system                20- or 30-round detachable box magazine//nSights                     full-lenght top MIL-STD-1913 "Picatinny" rail for optics or other sighting systems
gun-60000215,
gun-10000216,XM8
gun-40000216,かれい//cRisa Kubota//c
gun-50000216,Type                       Assault rifle//nWeight                     7.5 lb (3.4 kg)//nLength                     33 in (838 mm)//nBarrel length              12.5 inches (318 mm)//nCartridge                  5.56×45mm NATO//nAction                     Gas-operated//c rotating bolt//nRate of fire               750 rounds/min//nMuzzle velocity            approx. 900 m/s (see variants)//nFeed system                30-round detachable box magazine//c 100-round C-Mag drum magazine//nSights                     Unmagnified reflex sight (4x for DMR variant)
gun-60000216,
gun-10000217,SM-1
gun-40000217,Kincora//cAyaka Fujii//c
gun-50000217,Type                       Carbine //nWeight                     2.9 kg//nLength                     661 mm//nBarrel length              457 mm//nCartridge                  .30 Carbine//nAction                     Gas-operated (short-stroke piston)//c rotating bolt//nRate of fire               60 rounds/min //nMuzzle velocity            600 m/s//nEffective firing range     150 m//nFeed system                10，15- or 30-round detachable box magazine//nSights                     Rear sight: aperture; L-type flip or adjustable//c front sight: wing-protected post
gun-60000217,
gun-10000218,T77
gun-40000218,狂気の君//cAsuka Kawakami//c
gun-50000218,Type                       Submachine gun//nWeight                     2.82 kg//nLength                     335mm Stock folded//n                           610mm Stock open//nBarrel length              215 mm//nCartridge                  9×19mm Parabellum//nAction                     Blowback//cOpen bolt//nRate of fire               1//c200—1//c500 rounds/min//nEffective firing range     150 m//nFeed system                15，30-round box magazine//nSights                     Iron sight
gun-60000218,
gun-10000073,AUG
gun-40000073,芙芙酱//cAzumi Waki//c
gun-50000073,Type                       Bullpup assault rifle//n                           Carbine//n                           Light machine gun//n                           Squad Automatic Weapon//n                           Submachine gun//nWeight                     3.6 kg (7.9 lb) (Standard)//n                           3.3 kg (7.3 lb) (Carbine)//n                           3.2 kg (7.1 lb) (Subcarbine)//n                           3.9 kg (8.6 lb) (HBAR)//n                           3.3 kg (7.3 lb) (Para)//nLength                     790 mm (31.1 in) (Standard)//n                           690 mm (27.2 in) (Carbine)//n                           630 mm (24.8 in) (Subcarbine)//n                           900 mm (35.4 in) (HBAR)//n                           665 mm (26.2 in) (Para)//nBarrel length              508 mm (20.0 in) (Standard)//n                           407 mm (16.0 in) (Carbine)//n                           350 mm (13.8 in) (Subcarbine)//n                           621 mm (24.4 in) (HBAR)//n                           420 mm (16.5 in) (Para)//nCartridge                  5.56×45mm NATO//n                           9×19mm Parabellum//nAction                     Gas-operated//c rotating bolt//nRate of fire               680–750 rounds/min//nMuzzle velocity            970 m/s (3//c182 ft/s)//nEffective firing range     300 metres (980 ft)//nFeed system                5.56×45mm NATO: 30- or 42-round detachable box magazine//c//n                           9×19mm Parabellum: 25 or 32-round detachable MPi 69 box magazine//nSights                     Swarovski 1.5x telescopic sight//c emergency battle sights//c various optics
gun-60000073,
gun-10000220,MP-443
gun-40000220,油库狸//cIzumi Chiba//c
gun-50000220,Type                       Semi-automatic pistol//nWeight                     950 g (34 oz) //nLength                     198 mm (7.8 in)//nBarrel length              112.5 mm (4.4 in)//nCartridge                  9×19mm Parabellum//n　　　　　　　　　　　　　 9×19mm 7N21 +P+//nAction                     Short recoil//c locked breech//nRate of fire               40-45 rounds/min//nMuzzle velocity            450 m/s (1//c470 ft/s)//nEffective firing range     sights fixed for 50 m//nFeed system                18-round detachable box magazine//nSights                     Fixed iron sights//c 3-dot with notch and front blade
gun-60000220,
gun-10000221,GSh-18
gun-40000221,AC130//cArisa Kori//c
gun-50000221,Type                       Semi-automatic pistol//nWeight                     590 g (21 oz)//nLength                     184 mm (7.2 in)//nBarrel length              103 mm (4.1 in)//nCartridge                  9×19mm Parabellum//n                           9×19mm 7N21 +P+//n                           9×19mm 7N31 +P+//nAction                     Short recoil//c rotating barrel striker fired//nRate of fire               40-45 rounds/min//nMuzzle velocity            535 m/s (1//c755 ft/s)–570 m/s (1//c870.1 ft/s)//nEffective firing range     sights fixed for 50 m//nFeed system                18-round detachable box magazine//nSights                     Fixed; front blade and rear notch
gun-60000221,
gun-10000222,TAC-50
gun-40000222,洲川Terras//cAimi//c
gun-50000222,Type                       Anti-materiel rifle//c sniper rifle//nWeight                     26.0 lb (11.8 kg)//nLength                     57.0 in (1//c448 mm)//nBarrel length              29.0 in (737 mm)//nCartridge                  .50 BMG (12.7 x 99 mm)//nAction                     manually operated rotary bolt action//nMuzzle velocity            805 m/s (2//c641 ft/s)//nEffective firing range     1//c800 m (1//c970 yd)//nFeed system            　　5 round detachable box magazine//nSights                     Customizable; 5-25x telescopic sight standard in Canadian Forces
gun-60000222,
gun-10001009,클리어
gun-40001009,水熊//c//c
gun-50001009,
gun-60001009,
gun-10001010,페일
gun-40001010,水熊//c//c
gun-50001010,
gun-60001010,
gun-10000223,Model L
gun-40000223,X布//c//c
gun-50000223,Type                       Assault rifle//nWeight                     3.4 kg (7.50 lb)//nLength                     925 mm (36.4 in)//nBarrel length              400 mm (15.7 in)//nCartridge                  5.56×45mm NATO//nAction                     Roller-delayed blowback//nRate of fire               600–750 rounds/min //nMuzzle velocity            875 m/s (2//c871 ft/s) //nEffective firing range     200–400 m sight adjustments//nFeed system                12//c 20//c 30-round detachable STANAG magazine//nSights                     Front: shrouded post//c rear: flip-up sight with two apertures
gun-60000223,
gun-10000224,PM-06
gun-40000224,音符//c//c
gun-50000224,Type                       Submachine Gun//nWeight                     2.5 kg //nLength                     610 mm stock unfolded//n                           395 mm stock folded//nBarrel length              185 mm//nCartridge                  9×19mm Parabellum//nAction                     Blowback//nRate of fire               640 RPM//nMuzzle velocity            360 m/s//nEffective firing range     100-150 m//nFeed system                15，25-Round Magazine//nSights                     MIL-STD-1913 top rail to facilitate optical reflex sights//c hooded front sight
gun-60000224,
gun-10000004,콜트 파이슨
gun-40000004,REALMBW//c//c
gun-50000004,Type                       Revolver//nWeight                     1//c048 g (with 7½" barrel)//nLength                     11" (279 mm – with 5½" barrel);//n                           12.5" (318 mm – with 7½" barrel)//nCartridge                  .45 Colt//c .44-40 WCF//c .38-40 WCF//c//n                           .32-20 WCF//c .38 Colt and many others//c//n                           including .22 LR//c .38 Special//c//n                           .357 Magnum and .44 Special//nAction                     Single-action revolver//nFeed system                6-shot Cylinder
gun-60000004,
gun-10000059,AK-74U
gun-40000059,音符//cHaruka Takahashi//c
gun-50000059,Type                       Assault rifle//nWeight                     2.7 kg (6.0 lb)//nLength                     735 mm (28.9 in) stock extended//n                           490 mm (19.3 in) stock folded//nBarrel length              206.5 mm (8.1 in)//nCartridge                  5.45×39mm//nAction                     Gas-operated//c rotating bolt//nRate of fire               650 rounds/min//nMuzzle velocity            735 m/s (2//c411 ft/s) //nEffective firing range     400m//nFeed system                30-round or 45-round RPK-74 detachable box magazine or 60-round casket magazine//nSights                     Adjustable iron sights//c front post and rear notch on a scaled tangent//n                           Flip-up sight and front cylindrical post
gun-60000059,
gun-10000225,Cx4 스톰
gun-40000225,废人//c//c
gun-50000225,Type                       Carbine//nWeight                     2.575 kg (5.68 lb) //nLength                     755 mm (29.7 in) //nBarrel length              422.5 mm (16.6 in)//nCartridge                  9×19mm Parabellum//n                           9×21mm IMI//n                           .40 S&W//n                           .45 ACP//nAction                     Blowback//nRate of fire               9×19mm NATO 1400 FPS//nMuzzle velocity            715 m/s (2//c350 ft/s)//nFeed system                8-//c 10-//c 11-//c 14-//c 15-//c 17-//c 20-//c or 30-round box magazine//nSights                     Rear: 2-position aperture flip sight; front: adjustable post//n                           327 mm (12.9 in) sight radius
gun-60000225,
gun-10000226,Mk 12
gun-40000226,黑猫桃园//c//c
gun-50000226,Type                       Designated marksman rifle Semi-automatic rifle//nWeight                     10 lb (4.5 kg). (Fully loaded//c w/heavy barrel//c optic & 30 rounds)//nLength                     37.5 Inches//nBarrel length              18 Inches//nCartridge                  5.56×45mm NATO//nAction                     Gas-operated//c Rotating bolt//nRate of fire               Semi-automatic//nMuzzle velocity            2//c750 ± 20 ft/s (838.2 ± 6.1 m/s)//nEffective firing range     600 yards (550 m)//nFeed system                20- or 30-round STANAG magazine
gun-60000226,
gun-10000227,A-91
gun-40000227,工口牛//c//c
gun-50000227,Type                       Bullpup Assault rifle//nWeight                     4.3 kg (9.48 lb)//nLength                     660 mm (26.0 in)//nBarrel length              415 mm (16.3 in)//nCartridge                  7.62×39mm//n                           5.45×39mm//n                           VOG-25 //nAction                     Gas-operated//c rotating bolt//nRate of fire               600–800 rounds/min//nMuzzle velocity            300 m//nFeed system                30-round detachable box magazine//nSights                     Dioptric sight//c Grenade launcher sight
gun-60000227,
gun-10000229,M870
gun-40000229,水熊//c//c
gun-50000229,Type                       Shotgun//nWeight                     7.0 lb (3.2 kg) to 8.0 lb (3.6 kg)//nLength                     37.25 in (946 mm) to 50.5 in (1//c280 mm)//nBarrel length              14 in (360 mm) to 30 in (760 mm)//nCartridge                  12 gauge//c 16 gauge//c 20 gauge//c 28 gauge//c or .410 bore//nAction                     Pump-action//nEffective firing range     40m//nFeed system                4+1 to 10+1 round internal tube magazine//nSights                     Bead//c twin bead//c adjustable open sights//c or ghost ring (all iron sights). Also cantilever and receiver-mounts for scopes
gun-60000229,
gun-10000230,OBR
gun-40000230,卑しい人间//c//c
gun-50000230,Type                       Rifle //nRifle Weight: 9.5 lb. (based on 16.1” barrel version//c unloaded without optics and accessories)//nOverall System Length: 37.5“ (with A2 stock)//nBarrel: 16.1" (18" & 20" also available)//c 1/10 twist//nBarrel Life: 10//c000 (approx)//nMax Effective Range: 800 meters//nRate of Fire: Semi automatic//nMagazine Capacity: 10 or 20 rounds (accepts standard M110 magazines)//nAccuracy: Average size of a 5-shot group//c expressed in Minutes of Angle (MOA) less than 1 MOA (approx)//nTrigger: LaRue MBT
gun-60000230,
gun-10000231,M82A1
gun-40000231,Redjuice//c//c
gun-50000231,Type                       Anti-materiel rifle Sniper Rifle//nWeight                     29.7 lb (13.5 kg) (20-inch barrel)//n                           30.9 lb (14.0 kg) (29-inch barrel)//nLength                     48 in (120 cm) (20-inch barrel)//n                           57 in (140 cm) (29-inch barrel)//nBarrel length              20 in (51 cm)//n                           29 in (74 cm)//nCartridge                  .50 BMG (12.7 × 99 mm)//c//n                           .416 Barrett//nAction                     Recoil-operated//n                           rotating bolt//nMuzzle velocity            853 m/s (2//c799 ft/s)//nEffective firing range     1//c800 m (1//c969 yd)//nFeed system                10-round detachable box magazine//nSights                     Fixed front//c adjustable rear sight; MIL-STD-1913 rail provided for optics
gun-60000231,
gun-10000232,MP-448
gun-40000232,shin556//c//c
gun-50000232,Type                       Semi-automatic pistol//nWeight                     650 g (1.43 lb)//nLength                     162 mm (6.4 in)//nBarrel length              94 mm (3.7 in)//nCartridge                  9×18mm Makarov//nAction                     Blowback//cShort recoil operated//nMuzzle velocity            315 m/s //nEffective firing range     25 m//nFeed system                12-round detachable box magazine//nSights                     Fixed; front blade and rear notchgun-60000232,
gun-60000232,
gun-10000233,Px4 스톰
gun-40000233,戏言咸咸//c//c
gun-50000233,Type                       Semi-automatic pistol//nWeight                     Px4: 785 g (27.7 oz) (without magazine) //n                           Px4SC: 715 g (25.2 oz) (without magazine)//nLength                     Px4: 192 mm (7.55 in) //n                           Px4SC: 158 mm (6.2 inch)//nBarrel length              113 mm (4.4 in) (HK45)//n                           99 mm (3.9 in) (HK45 Compact)//nCartridge                  9×19mm Parabellum//n                           .45 ACP//n                           .40 S&W//nAction                     Short recoil//c locked-breech//c rotating barrel lock//nFeed system                Px4FS://n                                9 (.45 ACP [w/ flush mag])//n                                10 (.45 ACP [w/ extended basepad mag])//n                                14 (.40 S&W)//n                                15//c 17 (9×19mm)//n                                20 (9×19mm [w/ extended basepad mag]) //n                           Px4C://n                                12 (.40 S&W)//n                                15 (9×19mm)//n                           Px4SC://n                                12 (.40 S&W)//n                                15 (9×19mm)//nSights                      3-dot iron sights
gun-60000233,
gun-10000234,JS 9
gun-40000234,防弹乳牛//c//c
gun-50000234,Type                       Bullpup submachine gun//nWeight                     2 kg (4.41 lb)//nLength                     450 mm (17.7 in)//nBarrel length              250 mm (9.8 in)//nCartridge                  9×19mm Parabellum//n                           .40 S&W//n//nAction                     Blowback//c open bolt//nRate of fire               900 rounds/min//nMuzzle velocity            321 m/s//nEffective firing range     200 m//nFeed system                30-round detachable box magazine//nSights                     Open sight block//c fixed front peep sight//c flip up back sights
gun-60000234,
gun-10000235,SPR A3G
gun-40000235,ゆらん//c//c
gun-50000235,Type                       Sniper Rifle//nWeight                     5.22 kg //nLength                     1//c117.6  mm //nBarrel length              609.6//nCartridge                  7.62×51mm (.308 Winchester)//nAction                     Bolt-action//nEffective firing range     1//c500 m (1//c640 yd)//nFeed system                5-round internal box magazine//nSights                     Telescopic sight
gun-60000235,
gun-10000236,K11
gun-40000236,反骨Max//c//c
gun-50000236,Type                       Bullpup dual-barrel airburst multi-weapon//nWeight                     6.1 kg (13.45 lb) empty//nLength                     860 mm (33.86 in)//nBarrel length              310 mm (12 in) (KE)//n                           405 mm (15.9 in) (HE)//nCartridge                  5.56×45mm NATO (KE)//n                           20×30mm grenade (HE)//nAction                     Gas-operated//c rotating bolt (rifle section)//n                           Bolt action (launcher section)//nRate of fire               700 RPM (KE)//nMuzzle velocity            960 m/s (3//c100 ft/s) (KE)//n                           200 m/s (660 ft/s) (HE)//nEffective firing range     300 m (KE)//n                           500 m (HE)//nFeed system                STANAG Magazines (KE)//n                           5-round detachable box magazine(HE)//nSights                     Ballistics computer//c day (optical)/night (thermal vision) vision sight
gun-60000236,
gun-10000237,SAR-21
gun-40000237,洲川Terras//c//c
gun-50000237,Type                       Bullpup assault rifle//nWeight                     SAR 21: 3.82 kg (8.42 lb)[1]//n                           SAR 21 GL/M203: 5.3 kg (12 lb)//n                           SAR 21 P-Rail: 3.6 kg (7.9 lb)//n                           SAR 21 MMS: 3.5 kg (7.7 lb)//n                           SAR 21 Light Weight Carbine 3 kg (6.6 lb)//nLength                     805 mm (31.7 in) (SAR 21//c SAR 21 40 GL/M203//c SAR 21 P-Rail)//n                           680 mm (26.8 in) (SAR 21 MMS)//n                           640 mm (25.2 in) (SAR 21 Light Weight Carbine)//nBarrel length              508 mm (20.0 in)//nCartridge                  5.56×45mm NATO//nAction                     Gas-operated//c rotating bolt//nRate of fire               450–650 rounds/min//nMuzzle velocity            970 m/s (3//c182 ft/s) (M193)//n                           945 m/s (3//c100.4 ft/s) (SS109)//nEffective firing range     460 m (M193)//n                           800 m (SS109)//nFeed system                30-round detachable box magazine; proprietary or STANAG magazines//nSights                     1.5x or 3x optical sight; back-up iron sights
gun-60000237,
gun-10000238,88식
gun-40000238,NIN//c//c
gun-50000238,Type                       Light machine gun//nWeight                     Light mode:7.6 kg (17 lb)//n                           Heavy mode:11.8 kg (26 lb)//nLength                     Light mode:1//c151 mm (45.3 in)//n                           Heavy mode:1//c321 mm (52.0 in)//nBarrel length              600 mm (24 in)//nCartridge                  5.8 x 42 mm Heavy rounds//nAction                     gas-operated//nRate of fire               650–700 rounds/min//n                           300 rounds/min (sustained fire)//nMuzzle velocity            895 m/s (2//c940 ft/s)//nEffective firing range     800–1000 m//nFeed system                Belt//c 100 & 200 round cartridge case//nSights                     Iron sights
gun-60000238,
gun-10000239,03식
gun-40000239,迷肘//c//c
gun-50000239,Type                       Assault rifle//nWeight                     3.5 kg (7.7 lb) (unloaded)//nLength                     950 mm (37 in) with stock extended//c 725 mm (28.5 in) with stock folded//nBarrel length              440 mm（17.32in）//nCartridge                  5.8×42mm DBP87//n                           5.56×45mm NATO//nAction                     Gas operated//c rotating bolt//nRate of fire               650 rounds/min//nMuzzle velocity            930 m/s (3//c050 ft/s)//nEffective firing range     Domestic variant 400m-500m//n                           Export variant 300m//nFeed system                30-round detachable box magazine//nSights                     Fixed Type 56 style front sight//c flip-up diopter rear sight
gun-60000239,
gun-10000240,Mk46
gun-40000240,Evan揚//c//c
gun-50000240,Type                       Squad automatic weapon//nWeight                     7.5 kg (17 lb) empty//c//n                           10 kg (22 lb) loaded//nLength                     40.75 in (1//c035 mm)//nBarrel length              414 mm (16.3 in)//nCartridge                  5.56×45mm NATO//nAction                     Gas-operated//c open bolt//nRate of fire               Sustained rate of fire: 100 RPM//n                           Rapid rate of fire: 200 RPM//n                           Cyclic rate of fire: 800 RPM//nMuzzle velocity            915 m/s (3//c000 ft/s)//nEffective firing range     700 m (770 yd) (point target//c 465 mm barrel)//n                           800 m (870 yd) (point target//c 521 barrel)//n                           3//c600 m (3//c940 yd) (maximum range)//nFeed system                M27 linked belt//c STANAG magazine
gun-60000240,
gun-10000241,RT-20
gun-40000241,XQ//c//c
gun-50000241,Type                       Bullpup anti-materiel rifle//nWeight                     19.2 kg (42.33 lb) With Scope and Bipod//nLength                     1//c330 mm (52.4 in)//nBarrel length              920 mm (36.2 in)//nCartridge                  20×110mm//nAction                     Bolt Action//nMuzzle velocity            850 m/s (2//c789 ft/s)//nEffective firing range     1800 m//nFeed system                Single shot//c Manual Load//nSights                     Rear: Inbuilt Scope
gun-60000241,
gun-10000249,62식
gun-40000249,かれい//c//c
gun-50000249,Type                       General purpose machine gun//nWeight                     10.15 kg (22.38 lb)//nLength                     1//c200 mm (47.2 in) //nBarrel length              546 mm (21.5 in)//nCartridge                  7.62×51mm NATO//nAction                     Gas-operated//nRate of fire               650 RPM//nEffective firing range     1//c000 m//n                           1//c500 m (with bipod)//nFeed system                Belt-fed//nSights                     Iron sights
gun-60000249,
gun-10000228,100식
gun-40000228,かれい//cAi Kakuma//c
gun-50000228,Type                       Submachine Gun//nWeight                     3.8 kg (8.4 lb)//nLength                     890 mm (35.0 in) //nBarrel length              228 mm (9.0 in)//nCartridge                  8×22mm Nambu//nAction                     Blowback//nRate of fire               450 rounds per minute //nMuzzle velocity            335 m/s (1//c100 ft/s)//nEffective firing range     100-150 m//nFeed system                30-round detachable curved box magazine
gun-60000228,
gun-10000243,64식 소총
gun-40000243,Parsley//c//c
gun-50000243,Type                       Battle rifle//nWeight                     4.4 kg (9.70 lb)//nLength                     990 mm (39.0 in)//nBarrel length              450 mm (17.7 in)//nCartridge                  7.62×51mm NATO//nAction                     Gas-operated tilting bolt//nRate of fire               500 RPM//nMuzzle velocity            700 m/s//nEffective firing range     400 m//nFeed system                20-round detachable box magazine//nSights                     Iron sights; Telescopic sights used with Designated Marksman variant
gun-60000243,
gun-10000244,TEC-9
gun-40000244,十三天//c//c
gun-50000244,Type                       Semi-automatic pistol//nWeight                     1.23–1.4 kg depending on model//nLength                     241–317 mm depending on model//nBarrel length              76–127 mm depending on model//nCartridge                  9×19mm Parabellum//nAction                     Blowback-operated//c semi-automatic pistol//nMuzzle velocity            1//c181 ft/s (360 m/s)//nEffective firing range     50 m (160 ft)//nFeed system                10-//c 20-//c 32-//c 36- and 50-round box magazine//c 72-round drum magazine//nSights                     Iron sight
gun-60000244,
gun-10000245,P90
gun-40000245,LM7//c//c
gun-50000245,Type                       Submachine Gun//nWeight                     2.6 kg (5.7 lb)  //nLength                     500 mm (19.9 in) //nBarrel length              264 mm (10.4 in) //nCartridge                  FN 5.7×28mm//nAction                     Straight blowback//c closed bolt//nRate of fire               900 rounds per minute //nMuzzle velocity            715 m/s (2//c350 ft/s)//nEffective firing range     200 m (660 ft)//nFeed system                50-round detachable box magazine//nSights                    Tritium-illuminated reflex sight//c back-up iron sights
gun-60000245,
gun-10000247,K31
gun-40000247,AIKO//c//c
gun-50000247,Type                       Designated marksman rifle Semi-automatic rifle//nWeight                     10 lb (4.5 kg). (Fully loaded//c w/heavy barrel//c optic & 30 rounds)//nLength                     37.5 Inches//nBarrel length              18 Inches//nCartridge                  5.56×45mm NATO//nAction                     Gas-operated//c Rotating bolt//nRate of fire               Semi-automatic//nMuzzle velocity            2//c750 ± 20 ft/s (838.2 ± 6.1 m/s)//nEffective firing range     600 yards (550 m)//nFeed system                20- or 30-round STANAG magazine
gun-60000247,
gun-10000248,제리코
gun-40000248,十月十日奏//c//c
gun-50000248,Type                       Semi-automatic pistol//nCartridge                  9×19mm Parabellum//n                           .40 S&W//n                           .41 Action Express//n                           .45 ACP//nAction                     Short recoil//nEffective firing range     50 m (160 ft)//nFeed system                16 (9mm) 12 (.40 S&W) 10 (.45 ACP) round Detachable box magazine//nSights                    Fixed (Combat)//c or optional fully adjustable//c or optional illuminated night sights.
gun-60000248,
gun-10000242,P22
gun-40000242,音符//c//c
gun-50000242,Type                       Semi-automatic pistol//nWeight                     430g//nLength                     159mm//nBarrel length              87mm//nCartridge                  .22 Long Rifle//nAction                     Blowback//nEffective firing range     50m//nFeed system                10-round detachable box magazine//nSights                     Adjustable open sights
gun-60000242,
gun-10000250,HS2000
gun-40000250,水熊//c//c
gun-50000250,Type                       Semi-automatic pistol//nWeight                     700 g (25 oz) (empty)//nCartridge                  9×19mm Parabellum//n                           .357 SIG//n                           .40 S&W//n                           .45 GAP//n                           .45 ACP//nAction                     Short recoil operated//nEffective firing range     50 m//nFeed system                Detachable box magazine//nSights                     Fixed and illuminated night sights
gun-60000250,
gun-10000251,X95
gun-40000251,十月十日奏//c//c
gun-50000251,Type                       Submachine Gun//nWeight                     3.3–3.4 kg (7.3–7.5 lb)//nLength                     580–670 mm (22.8–26.4 in)//nBarrel length              330 mm (13.0 in)//n                           380 mm (15.0 in)//n                           419 mm (16.5 in)//nCartridge                  5.56×45mm NATO//n                           5.45×39mm//n                           300 AAC Blackout//nAction                     Gas-operated//c rotating bolt//nRate of fire               750–950 rounds/min//nMuzzle velocity            860 m/s (2//c821.52 ft/s)//nEffective firing range     600 m//nFeed system                30-round detachable STANAG magazine//n                           100-round detachable C-Mag drum magazine//nSights                     Meprolight Mepro-21//c//n                           ITL MARS//c//n                           Trijicon ACOG//c//n                           EOTech holographic sight
gun-60000251,
gun-10000252,KSVK
gun-40000252,Pandea_work//c//c
gun-50000252,Type                       Bullpup anti-materiel rifle//nWeight                     12 kg w/o scope//nLength                     1420 mm//nBarrel length              1000 mm//nCartridge                  12.7×108mm//nAction                     Bolt action//nRate of fire               10 s.p.m.//nMuzzle velocity            770–860 m/s//nEffective firing range     1500 m//nFeed system                5-round detachable box magazine//nSights                     Iron sights//c rails for mounting various sniper sights//n
gun-60000252,
gun-10000253,루이스
gun-40000253,STAR影法师//c//c
gun-50000253,Type                       Light machine gun//nWeight                     28 pounds (13 kg)//nLength                     50.5 inches (1//c280 mm)//nBarrel length              26.5 inches (670 mm)//nCartridge                  .303 British//n                           .30-06 Springfield//n                           7.92×57mm Mauser//nAction                     Gas-operated long stroke gas piston//c rotating bolt//nRate of fire 500–600 rounds/min//nMuzzle velocity            2//c440 feet per second (740 m/s)//nEffective firing range     880 yards (800 m)//nFeed system                47- or 97-round pan magazine//nSights                     Blade and tangent leaf
gun-60000253,
gun-10000254,UKM-2000
gun-40000254,DSマイル//c//c
gun-50000254,Type                       General-purpose machine gun//nWeight                     8.4 kg (18.52 lb) //nLength                     1//c203 mm (47.4 in)//nBarrel length              547 mm (21.5 in) //nCartridge                  7.62×51mm NATO//nAction                     Gas-operated//c open bolt//nRate of fire               700-850 rounds/min//nMuzzle velocity            840 m/s (2//c756 ft/s)//nEffective firing range     1//c500 m (1//c640 yd)//nFeed system                Belt 100 or 200 (P/D)  in ammunition boxes
gun-60000254,
gun-10000255,스카웃
gun-40000255,小叶有喜//c//c
gun-50000255,Type                       General purpose rifle//nWeight                     3 kg (6.6 lb) (unloaded//c no scope)//nLength                     98.0 cm (38.6 in)//nBarrel length              48.25 cm (19.00 in) (Standard Variants)//n                           50.8 cm (20.0 in) (Swiss Variant)//nCartridge                  5.56×45mm NATO//n                           .223 Remington//n                           .243 Winchester//n                           7mm-08 Remington//n                           7.62 NATO//n                           .308 Winchester//n                           .376 Steyr//nFeed system                5 or 10 round detachable box magazine (4 or 8 round magazine for .376 Steyr)
gun-60000255,
gun-10000256,팔콘
gun-40000256,八才//c//c
gun-50000256,Type                       Bullpup sniper rifle//nWeight                     13.4 kg//nLength                     1380 mm//nBarrel length              927 mm//nCartridge                  12.7×108mm//nAction                     Mauser Bolt action//nRate of fire               825–925 m/s//nMuzzle velocity            1//c600 m (1//c700 yd)//nFeed system                single-shot or 2-round detachable fixed magazine//nSights                     ZD 10×50 or ZN 6x passive night sight;Iron sights
gun-60000256,
gun-10000258,마갈
gun-40000258,XIN//c//c
gun-50000258,Type                       Carbine //nWeight                     3.68 kg) //nLength                     735 mm)//nBarrel length              230 mm)//nCartridge                  .30 Carbine//nAction                     Gas-operated//c rotating bolt//nRate of fire               945 rounds/min //nEffective firing range     515 m//nFeed system                15 or 27 or 30-round detachable box magazine
gun-60000258,
gun-10000259,PM-9
gun-40000259,音符//c//c
gun-50000259,Type                       Machine Pistol//nWeight                     2.8 kg / 6.2 lbs//nLength                     399 mm / 15.7"//nBarrel length              120 mm / 4.7"//nCartridge                  9×19mm Parabellum//nAction                     Blowback//nRate of fire               1100 RPM//nEffective firing range     100 m//nFeed system                25-Round Magazine//nSights                     Iron sights
gun-60000259,
gun-10000260,PA-15
gun-40000260,山药//c//c
gun-50000260,Type                       Semi-automatic pistol//nLength                     20.3 cm//nBarrel length              11.5 cm//n                           //nCartridge                  9×19mm Parabellum//nAction                     Delayed-blowback//nFeed system                15 rounds (standard-capacity magazine)//c +1 in chamber//c 20 rounds (extended magazine)//n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n
gun-60000260,
gun-10000257,M200
gun-40000257,DANGERDROP//c//c
gun-50000257,Type                       Sniper rifle//nWeight                     31 lb (14.1 kg) without scope (M200)//nLength                     53 in (1//c300 mm) (stock extended)//n                           46.75 in (1//c187 mm) (stock collapsed)//nBarrel length              29 in (740 mm) in standard//n                           26 in (660 mm) optional//nCartridge                  .408 Cheyenne Tactical//n                           .375 Cheyenne Tactical//nAction                     Bolt action//nEffective firing range     2//c500 m (2//c734 yd)+ - M200//n                           1//c800 m (1//c969 yd)+ - M310 SS//nFeed system                7-round detachable box magazine//nSights                     Day or night optics
gun-60000257,
gun-10000261,QBU-88
gun-40000261,薯子Imoko//c//c
gun-50000261,Type                       Bullpup designated marksman rifle//nMass                       4.1 kg (9.0 lb)//nLength                     920 mm (36.2 in)//nBarrel length              640 mm (25.2 in)//n                           //nCartridge                  5.8×42mm DBP87 (with non-standard loading); 5.56×45mm NATO (KBU-97A export variant)//nAction                     Gas-operated//c rotating bolt//nEffective firing range     500–1000 meters//nFeed system                10-round detachable box magazine//nSights                     3-9×40//c 6-24×44 telescopic sights//n                           //n                           //n                           //n                           //n                           //n                           //n                           //n
gun-60000261,
gun-10000262,EM-2
gun-40000262,X布//c//c
gun-50000262,Type                       Bullpup assault rifle//nMass                       3.49 kg (7.7 lb)//nLength                     889 mm (35.0 in)//nBarrel length              623 mm (24.5 in)//n                           //nCartridge                  .280 British//nAction                     Gas-operated//c Flapper Locked//nRate of fire               450–600 round/min (7.5 to 10 /s)//nMuzzle velocity            771m/s (2//c545 ft/s)//nEffective firing range     700 m (770 yd)//nFeed system                20-round detachable box magazine//nSights                     Optical//n                           //n                           //n                           //n                           //n                           //n                           //n
gun-60000262,
gun-10000263,MG36
gun-40000263,暖森//c//c
gun-50000263,Type                       Light machine gun//nWeight                     3.83 kg (8.4 lb)//nLength                     999 mm (39.3 in) stock extended //n                           758 mm (29.8 in) stock folded//nBarrel length              480 mm (18.9 in)//nCartridge                  5.56×45mm NATO//nAction                     Short-stroke piston//c rotating bolt//nRate of fire               750 rounds/min cyclic//nMuzzle velocity            920 m/s//nEffective firing range     800 metres//nFeed system                30-round detachable box magazine or 100-round C-Mag drum magazine//nSights                     Reflex sight with 1× magnification//c telescopic sight with 3× magnification (export version has a 1.5× magnified sight) and back-up fixed notch sight
gun-60000263,
gun-10000264,쇼샤
gun-40000264,花洒//c//c
gun-50000264,Type                       Automatic Rifle / Light machine gun//nMass                       9.07 kg (20.0 lb)//nLength                     1//c143 millimeters (45.0 in)//nBarrel length              470 millimeters (19 in)//n                           //nCartridge                  8×50mmR Lebel//n                           .30-06 Springfield//n                           7.92×57mm Mauser//n                           7.65×53mm Mauser//n                           6.5×54mm Greek//nAction                     Long recoil with gas assist//nRate of fire               ≈240 rounds/min//nMuzzle velocity            630 metres per second (2//c100 ft/s)//nEffective firing range     200 metres (220 yd)//nMaximum firing range       2//c000 metres (2//c200 yd)//nFeed system                20-round magazine (usually only loaded to 16-19 rounds)//nSights                     Iron sights//n
gun-60000264,
gun-10000265,HK33
gun-40000265,FKEY//c//c
gun-50000265,Type                       Assault rifle//nMass                       HK33A2: 3.9 kg (8.60 lb)//n                           HK33A3: 4.0 kg (8.8 lb)//n                           HK33KA2: 3.65 kg (8.0 lb)//n                           HK33KA3: 3.9 kg (8.6 lb)//n                           HK53: 3.05 kg (6.7 lb)//nLength                     HK33A2: 920 mm (36.2 in)//n                           HK33A3: 940 mm (37.0 in) stock extended / 735 mm (28.9 in) stock collapsed//n                           HK33KA3: 865 mm (34.1 in) stock extended / 675 mm (26.6 in) stock collapsed//n                           HK53: 755 mm (29.7 in) stock extended / 563 mm (22.2 in) stock collapsed//nBarrel length              HK33A2: 390 mm (15.4 in)//n                           HK33KA3: 332 mm (13.1 in)//n                           HK53: 211 mm (8.3 in)//n                           //nCartridge                  5.56×45mm NATO//nCaliber                    5.56mm//nAction                     Roller-delayed blowback//nRate of fire               HK33A2: 750 rounds/min//n                           HK53: 700 rounds/min//nMuzzle velocity            HK33A2: 950 m/s (3//c117 ft/s)//n                           HK33KA3: 880 m/s (2//c887.1 ft/s)//n                           HK53: 750 m/s (2//c460.6 ft/s)//nEffective firing range     100–400 m (328–1//c312 ft) sight adjustments//nFeed system                25-//c 30-//c or 40-round detachable box magazine//nSights                     Rotary rear aperture drum//c hooded foresight//n                           //n                           //n                           //n
gun-60000265,
gun-10000266,R93
gun-40000266,ASK//c//c
gun-50000266,Type                       Sniper rifle//nWeight                     .223 Rem.//c .308 Win.//c .300 Win Mag 5.4 kg (12 lb) (empty) //n                           .338 Lapua Mag. 5.8 kg (13 lb) (empty)//nLength                     .223 Rem.//c .308 Win.//c .300 Win Mag 1//c130 mm (44.4 in)//n                           .338 Lapua Mag. 1//c190 mm (46.85 in)//nBarrel length              .223 Rem.//c .308 Win.//c .300 Win Mag 627 mm (24.69 in)//n                           .338 Lapua Mag. 685 mm (26.97 in)//nCartridge                  7.62×51mm NATO//c .300 Winchester Magnum//c .338 Lapua Magnum//c 6.5×55mm//nAction                     Straight-pull bolt action//nFeed system                5-round detachable box magazine (4 for .300 Win)//c Original LRT 10-rounds//nSights                     detachable aperture-type iron sights or day or night optics
gun-60000266,
gun-10000267,MP41
gun-40000267,狂気の君//c//c
gun-50000267,Type                       Submachine gun//nMass                       3.97 kg (8.75 lb)//nLength                     833 mm (32.8 in) stock extended/630 mm (24.8 in) stock folded//nBarrel length              251 mm (9.9 in)                           //nCartridge                  9×19mm Parabellum//nAction                     Straight blowback//c open bolt//nRate of fire               500–550 rounds/min//nMuzzle velocity            400 m/s (1//c312 ft/s)//nEffective firing range     100–200 m//nMaximum firing range       250 m//nFeed system                32-round detachable box magazine//c 64-round with dual magazines//nSights                     Hooded front blade                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n
gun-60000267,
gun-10000268,T-CMS
gun-40000268,sola7764//c//c
gun-50000268,Type                       Rifle//nModel                      CMS 7//c62x51mm//nCalibre                    7//c62x51 NATO//nAction Type                Bolt Action//nMagazine Capacity          10//nBarrel Length              660mm//nOverall Length             Unfolded: 1180mm| Folded: 920mm//nHeight                     200mm//nWidth                      60mm//nWeight:                    6kg [Including Telescope & Magazine]//nAmmunition                 FMJ//c Ball//c AP//c Tracer//c Sub-sonic//nAccuracy                   Better than 1 M.O.A at 500m (Ammunition Dependant)//nEffective Range            1000m [Ammunition Dependant]
gun-60000268,
gun-10000214,ADS
gun-40000214,小吃//c//c
gun-50000214,Type                       Bullpup Amphibious assault rifle//nWeight                     4.6 kg//nLength                     685 mm//nBarrel length              418 mm//nCartridge                  5.45×39mm M74 7N6 / 7N10 / 7N22 for above-water fire//n                           5.45×39mm PSP for under-water fire//nAction                     Gas-operated//c rotating bolt//nRate of fire               700 rpm//nMuzzle velocity            900 m/s with the above-water fire cartridges//nEffective firing range     500 m//nFeed system                30-round detachable box magazine//nSights                     Iron sights//c Picatinny rail exists for mounting red dot/night/optical sights
gun-60000214,
gun-10000269,P30
gun-40000269,litsvn//c//c
gun-50000269,Type                       Semi-automatic pistol//nWeight                     647 g (22.8 oz) //nLength                     181 mm (7.1 in) //nBarrel length              98 mm (3.9 in)  //nCartridge                  9×19mm Parabellum//n                           .40 S&W//nAction                     Short recoil operated//c Browning-type tilting barrel//c locked breech//nMuzzle velocity            360 m/s (1//c181 ft/s) //nEffective firing range     50 m (55 yd)//nFeed system                Detachable box magazine; capacities://n                              15 rounds (9×19mm) P30(L)//n                              10 rounds (9×19mm) P30SK)//n                              13 rounds (.40 S&W)//nSights                     Iron sights//n
gun-60000269,
gun-10000270,4식
gun-40000270,藤ちょこ//c//c
gun-50000270,Type                       Experimental semi-automatic rifle//nWeight                     4//c097 g (9 lb 1 oz)//nLength                     1//c073 mm (3 ft 6.2 in)//nBarrel length              590 mm (1 ft 11 in)//nCartridge                  7.7×58mm Arisaka//nAction                     Gas-operated//c rotating bolt//nMuzzle velocity            840 m/s (2//c800 ft/s)//nFeed system                10-round internal box magazine loaded via two 5-round stripper clips
gun-60000270,
gun-10000271,K3
gun-40000271,DDAL//c//c
gun-50000271,Type                       Light machine gun//nMass                       6.85 kg (15.10 lb)//nLength                     1//c030 mm (41 in)//nBarrel length              533 mm (21.0 in)                           //nCartridge                  5.56×45mm NATO//n                           .223 Remington//nAction                     Gas-operated//c rotating bolt//nRate of fire               900 rounds/min//nMuzzle velocity            915 m/s (3//c002 ft/s)//nEffective firing range     800 m (K100)//n                           460 m (KM193)//nMaximum firing range       3//c600 m (K100)//n                           2//c650 m (KM193)//nFeed system                200-round disintegrating-link belt//c 70-round box magazine (rare) or 30-round NATO STANAG magazine//nSights                     Iron sights//n
gun-60000271,
gun-10000272,데저트 이글
gun-40000272,Anmi//c//c
gun-50000272,Type                       Semi-Automatic Pistol//nWeight                     1//c766 g (3.9 lb) (.357 MAGNUM)//n                           1//c897 g (4.2 lb) (.44 MAGNUM)//n                           1//c998.6 g (4.4 lb)//nLength                     910.6 in (269.2 mm) (6in barrel)//n                           10.75 in (273.1 mm) (6in barrel)//n                           14.75 in (374.6 mm) (10in barrel)//nBarrel length              6 in (152.4 mm)//n                           10 in (254.0 mm)//nCartridge                  .50 Action Express//n                           .44 Magnum//n                           .357 Magnum//n                           .440 Cor-bon//n                           .41 Magnum//n                           .357/44 Bain & Davis (IMI prototype only)//nAction                     Gas-operated//c rotating bolt//nMuzzle velocity            470 m/s(.50AE)//nEffective firing range     200 m//nFeed system                Detachable stick magazine; capacities://n                           9 rounds (.357)//n                           8 rounds (.41 and .44)//n                           7 rounds (.440 Cor-bon and .50 AE)//nSights                     Iron sights and optional optics
gun-60000272,
gun-10000273,SSG3000
gun-40000273,咩爆//c//c
gun-50000273,Type                       Sniper rifle//nWeight                     5.44 kg (11.99 lb)//nLength                     1//c180 mm (46.5 in)//nBarrel length              600 mm (23.6 in)//nCartridge                  7.62×51mm NATO//nAction                     Bolt-action//nMuzzle velocity            800 m/s (2//c625 ft/s) - 830 m/s (2//c723 ft/s)//nEffective firing range     900 m (984 yd)//nFeed system                5-round detachable internal magazine
gun-60000273,
gun-10000274,ACR
gun-40000274,saitom//c//c
gun-50000274,Type                       Semi-automatic rifle//n                           Carbine                //nMass                       7.9–9.8 lb (3.6–4.4 kg)[1]//nLength                     25.8 inch (655.32 mm) Stock folded[1]//n                           32.6 inch (828.04 mm) Stock deployed[1]//n                           35.5 inch (901.7 mm) Stock extended[1]//nBarrel length              10.5 in (267 mm)//n                           14.5 in (368 mm)//n                           16.5 in (419 mm)//n                           18 in (457 mm) (Remington ACR only)//n                           18.5 in (470 mm) (Bushmaster ACR only)//n                           //nCartridge                  5.56×45mm NATO[2]//n                           6.8mm Remington SPC[2]//n                           6.5mm Grendel(Bushmaster ACR aftermarket conversion)//n                           .300 AAC Blackout(Bushmaster ACR aftermarket conversion)//n                           7.62×39mm(Bushmaster ACR aftermarket conversion)//nAction                     Gas-piston//c rotating bolt//nRate of fire               650–700 RPM//nMuzzle velocity            2//c600–3//c250 ft/s (790–990 m/s)//nEffective firing range     500 m for point targets//n                           600 m for area target [3]//nFeed system                30-round M16-compatible STANAG magazines
gun-60000274,
gun-10000275,M1895 CB
gun-40000275,钟式机动红领巾//c//c
gun-50000275,Type                       Machine gun              //nMass                       16 kg (35.3 lb)//nLength                     1//c040 mm (41 in)//nBarrel length              711 mm (28 in)//n                           //nCartridge                  6mm Lee Navy//n                           7×57mm Mauser//n                           .30-40 Krag//n                           .30-06 Springfield//n                           .303 British//n                           7.62×54mmR//n                           6.5×52mm Carcano//nAction                     Gas-operated//c lever actuated//n                           closed bolt firing cycle//nRate of fire               400–450 rpm//nFeed system                Belt//nSights                     Iron sights
gun-60000275,
gun-10000276,Kord
gun-40000276,时辰//c//c
gun-50000276,Type                       Heavy machine gun           //nMass                       25.5 kg (56.22 lb) (6P50)//n                           32 kg (71 lb) (6P50-1)//n                           60 kg (130 lb) (6P50-2)//c 80 kg (180 lb) (6P50-3)//c 27 kg (60 lb) (6P49)//nLength                     1//c980 mm (78.0 in) (6P50-1//c 6P50-2//c 6P50-3)//n                           1//c625 mm (64.0 in) (6P49)//n                           //nCartridge                  12.7×108mm//nAction                     Gas-operated//c rotating bolt//nRate of fire               650–750 rounds/min//nMuzzle velocity            860 m/s (2//c821.5 ft/s)//nEffective firing range     2000 m//nFeed system                50-round linked belt//nSights                     Iron sights
gun-60000276,
gun-10000277,VP70
gun-40000277,原子Dan//c//c
gun-50000277,Type                       Machine pistol//nMass                       820 grams (28.9 oz) empty//nLength                     204 millimetres (8.0 in)//nBarrel length              116 millimetres (4.6 in)//nHeight                     142 millimetres (5.6 in)//n                           //nCartridge                  9×19mm Parabellum //n                           9×21mm IMI (VP70Z only)//nAction                     Blowback//nRate of fire               2200 rounds/min (3-round burst mode)//nEffective firing range     50 m//nFeed system                18-round box magazine//n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n                           //n
gun-60000277,
gun-10001017,질 스팅레이
gun-40001017,小吃//c//c
gun-50001017,
gun-60001017,
gun-10001018,세이 아사기리
gun-40001018,NIN//c//c
gun-50001018,
gun-60001018,
gun-10001019,도로시 헤이즈
gun-40001019,废人//c//c
gun-50001019,
gun-60001019,
gun-10001020,스텔라 호시이
gun-40001020,暖森//c//c
gun-50001020,
gun-60001020,
gun-10001021,알마 알머스
gun-40001021,洲川Terras//c//c
gun-50001021,
gun-60001021,
gun-10001022,다나 제인
gun-40001022,DOGALA//c//c
gun-50001022,
gun-60001022,
gun-10020002,M1911
gun-40020002,spirtie//cEriko Matsui//c
gun-50020002,Type                       Semi-automatic pistol//n//nWeight                    2.44 lb (1//c105 g) empty//c w/magazine//n//nLength                    8.25 in (210 mm)//n//nBarrel length           Government model: 5.03 in (127 mm)//n//n                              Commander model: 4.25 in (108 mm)//n//n                              Officer's ACP model: 3.5 in (89 mm)//n//nCartridge                .45 ACP (11.43 mm)//n//nAction                     Short recoil operation//n//nMuzzle velocity        825 ft/s (251 m/s)//n//nFeed system            7-round standard detachable box magazine
gun-60020002,
gun-10020051,FN-49
gun-40020051,Bison仓鼠//cMami Misaki//c
gun-50020051,Type                       Semi-Automatic Rifle//n//nWeight                     4.31 kg (9 lb 8 oz)//n//nLength                     1116 mm (43.5 in)//n//nBarrel length              590 mm (23.2 in)//n//nCartridge                  .30-06 Springfield//c//n//n                           7.92×57mm Mauser//c//n//n                           7×57mm Mauser//c//n//n                           7.62×51mm NATO//c//n//n                           7.65×53mm Argentine//n//nAction                     Gas-operated//c tilting bolt//n//nFeed system                10-round fixed box magazine//c//n//n                           20-round detachable box magazine in Argentine //n//n                           7.62 NATO conversions//n//nSights                     Iron sights
gun-60020051,
gun-10020055,M4A1
gun-40020055,ZAGALA//cHaruka Tomatsu//c
gun-50020055,Type                       Assault rifle//n//nWeight                     6.36 lb (2.88 kg) empty//n//n                           7.5 lb (3.4 kg) with 30 rounds//n//nLength                     33 in (840 mm) (stock extended)//n//n                           29.75 in (756 mm) (stock retracted)//n//nBarrel length              14.5 in (370 mm)//n//nCartridge                  5.56×45mm NATO//n//nCaliber                    5.56 mm (.223 in)//n//nBarrels                    1//n//nAction                     Gas-operated//c rotating bolt (Direct impingement)//n//nRate of fire               700–950 round/min cyclic//n//nMuzzle velocity            2//c900 ft/s (880 m/s)//n//nEffective firing range     500 m (550 yd)//n//nFeed system                30-round box magazine or other STANAG magazines.//n//n                           Other magazines with different //n//n                           capacities also available.//n//nSights                     Iron sights or various optics
gun-60020055,
gun-10020057,ST AR-15
gun-40020057,LIN+//cEmiri Katou//c
gun-50020057,Type                       Semi-automatic rifle//n//nWeight                     2.27 kg–3.9 kg (5.5–8.5 lb)//n//nLength                     991 mm (39 in)//n//nBarrel length              24 inches (610 mm)//n//n                           20 inches (510 mm) (standard)//n//n                           18 inches (460 mm)//n//n                           16 inches (410 mm) (civilian standard)//n//n                           14.5 inches (370 mm) M4 Military Standard//n//n                           11.5 inches (290 mm)//n//n                           10 inches (250 mm)//n//n                           7 inches (180 mm)//n//n                           6.5 inches (170 mm)//n//nCartridge                  5.56×45mm NATO and others//n//nAction                     Direct impingement or Gas Piston / Via a Rotating bolt//n//nRate of fire               Depends on operator's speed when pulling trigger//n//nMuzzle velocity            975 m/s (3//c200 ft/s)//n//nEffective firing range     400–600 m (avg 547 yd)//n//nFeed system                Various STANAG magazines. 5–100-round capacity//n//nSights                     Adjustable front and rear iron sights
gun-60020057,
gun-10020093,IDW
gun-40020093,Ki桑//cAsuka Ito//c
gun-50020093,Type                       Submachine Gun//n//nWeight                     1.87 kg//n//nLength                     300 mm//n//nBarrel length              164 mm//n//nCartridge                  9×19mm//n//nAction                     Straight blowback//c closed bolt//n//nRate of fire               1400 rounds per minute //n//nMuzzle velocity            715 m/s //n//nEffective firing range     50 m //n//nFeed system                20-round box magazine
gun-60020093,
gun-10020094,64식
gun-40020094,小迪//cSaya Horigome//c
gun-50020094,Type                       Submachine gun//n//nWeight                     3.4kg//n//nLength                     635mm Stock folded//n//n                           843mm Stock open//n//nBarrel length              244mm//n//nCartridge                  7.62×25mm Type 51//n//nAction                     Blowback//c closed bolt//n//nRate of fire               1000 rounds/min//n//nMuzzle velocity            290 m/s //n//nEffective firing range     150-200m//n//nFeed system                30-round box magazine//n//nSights                     Iron
gun-60020094,
gun-10020005,나강 리볼버
gun-40020005,X布//cNarumi Sinohara//c
gun-50020005,Type                       Revolver//n//nWeight                    1.8 lb (0.8 kg)//n//nLength                    10.5 in (235 mm)//n//nBarrel length           4.5 in (114 mm)//n//nCartridge                7.62×38mmR (7.62mm Nagant)//n//nCaliber                    7.62mm//n//nAction                     Double action//n//nRate of fire              14-21 rounds/min//n//nMuzzle velocity        1//c070 ft/s (327 m/s)//n//nEffective firing range50 yds (46 m) //n//nFeed system            7-round cylinder//n//nSights                     Fixed front post and rear notch
gun-60020005,
gun-10020039,모신나강
gun-40020039,防弹乳牛//cUesaka Sumire//c
gun-50020039,Type                       Boltaction rifle//n//nWeight                     4 kg (8.8 lb)//n//nLength                     1//c232 mm (48.5 in)  //n//nBarrel length              730 mm (29 in) //n//nCartridge                  7.62×54mmR//n//nAction                     Bolt action//n//nRate of fire               10 rounds per minute//n//nMuzzle velocity            Light ball//c~865 m/s //n//nEffective firing range     500 m (550 yards)//n//nFeed system                5-round non-detachable magazine//c loaded individually or//n//n                           with five-round stripper clips.//n//nSights                     Rear: ladder//c graduated from 100 m to 2//c000 m
gun-60020039,
gun-10020075,M1918
gun-40020075,水乌龟//cYuuki Aoi//c
gun-50020075,Type                       Light machine gun//n//nWeight                     7.25 kg (15.98 lb) //n//nLength                     1//c194 mm (47.0 in)//n//nBarrel length              610 mm (24.0 in) //n//nCartridge                  .30-06 Springfield (7.62x63mm)//n//n                           .303 British (7.7x56mmR)//n//n                           7.92x57mm Mauser//n//nAction                     Gas-operated//c//n//n                           rising bolt lock//n//nRate of fire               500–650 rounds/min //n//nMuzzle velocity            860 m/s (2//c822 ft/s)//n//nEffective firing range     100–1//c500 yards (91–1//c372 m) sight adjustments//n//n                           (maximum effective range)//n//nMaximum firing range       Approx. 4//c500–5//c000 yards (4//c100–4//c600 m)//n//nFeed system                20-round detachable box magazine//n//nSights                     Rear leaf//c front post784 mm (30.9 in) sight radius 
gun-60020075,
gun-10020091,MP-446
gun-40020091,XQ//cIori Nomizu//c
gun-50020091,Type                       Semi-automatic pistol//n//nWeight                     830 g (29 oz)//n//nLength                     196 mm (7.7 in)//n//nBarrel length              112.8 mm (4.4 in)//n//nCartridge                  9×19mm Parabellum//n//nAction                     Short recoil operated//c locked breech//n//nFeed system                10 or 18-round detachable box magazine//n//nSights                     Fixed iron sights//c 3-dot with notch and front blade
gun-60020091,
gun-10020001,콜트 리볼버
gun-40020001,Saru//cAimi Tanaka//c
gun-50020001,Type                       Revolver//n//nWeight                     1//c048 g (with 7½" barrel)//n//nLength                     11" (279 mm – with 5½" barrel);//n//n                           12.5" (318 mm – with 7½" barrel)//n//nCartridge                  .45 Colt//c .44-40 WCF//c .38-40 WCF//c//n//n                           .32-20 WCF//c .38 Colt and many others//c//n//n                           including .22 LR//c .38 Special//c//n//n                           .357 Magnum and .44 Special//n//nAction                     Single-action revolver//n//nFeed system                6-shot Cylinder
gun-60020001,
gun-10020044,SV-98
gun-40020044,幻象黑兔//cMamiko Hanada//c
gun-50020044,Type                       Sniper rifle//n//nWeight                     5.8 kg (12.8 lb) w/o optical sight and silencer//n//n                           7.8 kg (17.2 lb) with optical sight and suppressor//n//nLength                     1//c200 mm (47.24 in)//n//n                           1//c375 mm (54.13 in) with suppressor//n//nBarrel length              650 mm (25.59 in) (4 grooves//c right-hand twist)//n//nCartridge                  7.62×54mmR//n//n                           7.62×51mm NATO//n//nCaliber                    7.62mm//n//nAction                     Bolt action//n//nMuzzle velocity            820 m/s (2//c690 ft/s)//n//nEffective firing range     600 m (656 yd) iron sights//n//n                           1//c000 m (1//c094 yd) optical sight//n//nFeed system                10-round detachable magazine//n//nSights                     Telescopic sight and iron sights
gun-60020044,
gun-10020063,G3
gun-40020063,PHI//cKaori Yoshioka//c
gun-50020063,Type//n//n                       Battle rifle//n//nWeight//n//n                       4.1 kg (9.04 lb) //n//nLength//n//n                       1//c025 mm (40.4 in) (G3A3)//n//nBarrel length//n//n                       450 mm (17.7 in)//n//nCartridge//n//n                       7.62×51mm NATO//n//nAction//n//n                       Roller-delayed blowback//n//nRate of fire//n//n                       500–600 rounds/min//n//nMuzzle velocity//n//n                       800 m/s (2//c625 ft/s)//n//nEffective firing range//n//n                       500 metres (550 yd)//c 100–400 m sight adjustments//n//nFeed system//n//n                       20-round detachable box and 50-round drum magazine//n//nSights//n//n                       Rear: rotary diopter; front: hooded post
gun-60020063,
gun-10020089,브렌
gun-40020089,废人//cSora Amamiya//c
gun-50020089,Type                       Light machine gun//n//nWeight                     22.83 lb (10.35 kg)(25lb–11.25 kg loaded); //n//nLength                     42.9 in (1//c156 mm)//n//nBarrel length              25 in (635 mm)//n//nCrew                       2//c firer and magazine/barrel changer//n//nCartridge                  .303 British//n//n                           8×57mm IS (for China in World War II)//n//n                           7.62×51mm NATO (post-WW2)//n//nAction                     Gas-operated//c tilting bolt//n//nRate of fire               500–520 rounds/min//n//nMuzzle velocity            2440 ft/s (743.7 m/s)//n//nEffective firing range     600 yd (550 m)//n//nMaximum firing range       1//c850 yd (1//c690 m)//n//nFeed system                20-round L1A1 SLR magazine//n//n                           30-round detachable box magazine//n//n                           100-round detachable pan magazine//n//nSights                     Iron
gun-60020089,
gun-10020056,M4 SOPMODII
gun-40020056,ZAGALA//cYukari Tamura//c
gun-50020056,Type                       Assault rifle//n//nWeight                     6.36 lb (2.88 kg) empty//n//n                           7.5 lb (3.4 kg) with 30 rounds//n//nLength                     33 in (840 mm) (stock extended)//n//n                           29.75 in (756 mm) (stock retracted)//n//nBarrel length              14.5 in (370 mm)//n//nCartridge                  5.56×45mm NATO//n//nCaliber                    5.56 mm (.223 in)//n//nBarrels                    1//n//nAction                     Gas-operated//c rotating bolt (Direct impingement)//n//nRate of fire               700–950 round/min cyclic//n//nMuzzle velocity            2//c900 ft/s (880 m/s)//n//nEffective firing range     500 m (550 yd)//n//nFeed system                30-round box magazine or other STANAG magazines.//n//n                           Other magazines with different //n//n                           capacities also available.//n//nSights                     Iron sights or various optics
gun-60020056,
gun-10020103,UMP45
gun-40020103,ZAGALA//cTomomi Mineuchi//c
gun-50020103,Type                       Submachine Gun//n//nWeight                     2.5 kg (5.4 lb) (without magazine)//n//nLength                     450 mm (17.7 inches)//c stock folded//n//n                           690 mm (27.2 inches)//c stock extended//n//nBarrel length              200 mm (8 inches)//n//nCartridge                  .45 ACP //n//nAction                     Blowback//c closed bolt//n//nRate of fire               600 rounds per minute//n//nMuzzle velocity            320 m/s //n//nEffective firing range     100 m//n//nFeed system                25-round detachable box magazine
gun-60020103,
gun-10020029,스텐MkⅡ
gun-40020029,真名//cKami Daimon//c
gun-50020029,Type                       Submachine gun//n//nWeight                     3.2 kg (7.1 lb)//n//nLength                     760 mm (30 in)//n//nBarrel length              196 mm (7.7 in)//n//nCartridge                  9×19mm Parabellum//n//nAction                     Blowback-operated//c Open bolt//n//nRate of fire               version dependent; ~500-round/min//n//nMuzzle velocity //n//n                           365 m/s (1//c198 ft/s)//n//n                           305 m/s (1//c001 ft/s) (suppressed models)//n//nEffective firing range     100 m//n//nFeed system                32-round detachable box magazine//n//nSights                     fixed peep rear//c post front
gun-60020029,
gun-10020037,M14
gun-40020037,Rain Lan//cSaori Onishi//c
gun-50020037,Type                       Battle rifle//n//nWeight                     9.2 lb (4.1 kg) empty//n//n                           10.7 lb (5.2 kg) w/ loaded magazine//n//nLength                     44.3 in (1//c126 mm)//n//nBarrel length              22 in (559 mm)//n//nCartridge                  7.62×51mm NATO (.308 Winchester)//n//nAction                     Gas-operated//c rotating bolt//n//nRate of fire               700–750 rounds/min//n//nMuzzle velocity            850 m/s (2//c800 ft/s)//n//nEffective firing range     460 m (500 yd)//n//n                           800+ m (875+ yd) (with optics)//n//nFeed system                20-round detachable box magazine//n//nSights                     Aperture rear sight//c "barleycorn" front sight
gun-60020037,
gun-10020064,G36
gun-40020064,薯子Imoko//cAmi Koshimizu//c
gun-50020064,Type                       Assault rifle//n//nWeight                     3.63 kg (8.00 lb)//n//nLength                     999 mm (39.3 in) stock extracted//n//n                           758 mm (29.8 in) stock folded//n//nBarrel length              480 mm (18.9 in)//n//nCartridge                  5.56×45mm NATO//n//nAction                     Short-stroke piston//c rotating bolt//n//nRate of fire               750 rounds/min cyclic//n//nMuzzle velocity            920 m/s (3//c018 ft/s)//n//nEffective firing range     800 metres (870 yd)//c 200–600 m sight adjustment//n//nFeed system                30-round detachable box magazine or 100-round C-Mag drum magazine//n//nSights                     Reflex sight with 1× magnification//c telescopic sight with 3× magnification (export version has a 1.5× magnified sight) and back-up fixed notch sight
gun-60020064,
gun-10020081,LWMMG
gun-40020081,RFF//cHiyori Nitta//c
gun-50020081,Type                       Machine gun//n//nWeight                     24 lb (10.8 kg)  //n//nLength                     49 in (1//c244.6 mm)//n//nBarrel length              24 in (609.6 mm)//n//nCartridge                  .338 Norma Magnum//n//nAction                     Short Recoil Impulse Averaging//n//nRate of fire               500 rounds per minute//n//nMuzzle velocity            2//c650 ft/s (807.7 m/s)//n//nEffective firing range     1//c860 yards (1//c700 meters)
gun-60020081,
gun-10020032,마이크로 우지
gun-40020032,死盖//cSaori Onishi//c
gun-50020032,Type                       Submachine gun//n//nWeight                     3.5 kg (7.72 lb)//n//nLength                     445 mm (17.5 in) stockless//n//n                           470 mm (18.5 in) folding stock collapsed//n//n                           640 mm (25 in) folding stock extended//n//nBarrel length              260 mm (10.2 in)//n//nCartridge                  9×19mm Parabellum//n//n                           .22 LR//n//n                           .45 ACP//n//n                           .41 AE//n//nAction                     Blowback//c open bolt//n//nRate of fire               600 rounds/min//n//nMuzzle velocity            400 m/s (9mm)//n//nEffective firing range     200 m//n//nFeed system                10 (.22 and .41 AE)//n//n                           16 (.45 ACP)//n//n                           20//c 25//c 32//c 40//c 50 (9 mm) magazines//n//nSights                     Iron sights
gun-60020032,
gun-10020060,AS Val
gun-40020060,防弹乳牛//cUesaka Sumire//c
gun-50020060,Type                       Assault Rifle //n//nWeight                     2.5 kg (5.51 lb) empty//n//nLength                     875 mm (34.4 in) stock extended//n//n                           615 mm (24.2 in) stock folded//n//nBarrel length              200 mm (7.9 in)//n//nCartridge                  9x39mm//n//nAction                     Gas-operated//c rotating bolt//n//nRate of fire               900 rounds/min//n//nMuzzle velocity            295 m/s (968 ft/s)//n//nEffective firing range     300 m//n//nMaximum firing range       400 m//n//nFeed system                20-round detachable box magazine//n//n                           (optional 10-round magazine from the VSS or//n//n                           30-round magazine from the SR-3M)//n//nSights                     Front post//c rear sector sight;//n//n                           day or night-time optics
gun-60020060,
gun-10020061,StG44
gun-40020061,八才//cAi Kayano//c
gun-50020061,Type                       Assault rifle//n//nWeight                     4.6 kg (10 lb) unloaded with magazine//n//n                           5.13 kg (11.3 lb) loaded//n//nLength                     94 cm (37 in)//n//nBarrel length              42 cm (16.5 in)//n//nCartridge                  7.92×33mm Kurz//c(aka. 7.9mm Kurz or Pistolenpatrone 43)//n//nAction                     Gas-operated//c tilting bolt//c full auto or semi-auto//n//nRate of fire               550–600 rounds/min//n//nMuzzle velocity            685 m/s (2//c247 ft/s)//n//nEffective firing range     300 m (automatic) 600 m (semi-automatic)//n//nFeed system                30-round detachable box magazine//n//nSights                     Adjustable sights//c rear: V-notch; front: hooded post
gun-60020061,
gun-10020026,MP5
gun-40020026,Saru//cNaomi Mukaiyama//c
gun-50020026,Type                       Submachine gun//n//nWeight                     2.7 kg (6.0 lb) fixed stock ///n//n                           2.85 kg (6.3 lb) retractable stock //n//nLength                     660 mm (26.0 in) stock extended ///n//n                           490 mm (19.3 in) stock collapsed //n//nBarrel length              225 mm (8.9 in) //n//nWidth                      50 mm (2.0 in) //n//nHeight                     260 mm (10.2 in) //n//nCartridge                  9×19mm Parabellum//n//n                           10mm Auto (MP5/10)//n//n                           .40 S&W (MP5/40)//n//nAction                     Roller-delayed blowback//c closed bolt//n//nMuzzle velocity            425 m/s (1//c394 ft/s) (MP5/10)//n//n                           315 m/s (1//c033 ft/s) (MP5/40)//n//nEffective firing range     125 m (410 ft) (MP5/10)//n//n                           100 m (328 ft) (MP5/40)//n//nFeed system                15- or 30- round detachable box magazine//c //n//n                           100-round Beta C-Mag drum magazine//n//nSights                     Iron sights. Rear: rotary drum; front: hooded post 
gun-60020026,
gun-10020065,HK416
gun-40020065,NIXOO//cAi Nonaka//c
gun-50020065,Type                       Assault rifle//n//nWeight                     2.950 kg (6.50 lb)//n//nLength                     690 mm (27.2 in) stock extended //n//n                           560 mm (22.0 in) stock collapsed//n//nBarrel length              228 mm (9.0 in)//n//nWidth                      78 mm (3.1 in)//n//nHeight                     236 mm (9.3 in)//n//nCartridge                  5.56×45mm NATO//n//nAction                     Short-stroke piston//c rotating bolt//n//nRate of fire               700 – 900 rounds/min (cyclic)//n//nMuzzle velocity            Varies according to barrel length://n//n                           788 m/s (10.4 in)//n//n                           882 m/s (14.5 in)//n//n                           890 m/s (16.5 in)//n//n                           917 m/s (19.9 in)//n//nEffective firing range     300 m (11´´Model) Point Targets//n//nMaximum firing range       400m (11´´ Model) Area Targets//n//nFeed system                20//c 30-round detachable STANAG magazine//c //n//n                           100-round detachable Beta C-Mag//n//nSights                     Rear rotary diopter sight and front post//c//n//n                           Picatinny rail
gun-60020065,
gun-10020095,한양조 88식
gun-40020095,团子//cYuuka Aisaka//c
gun-50020095,Type                       Bolt-action rifle//n//nWeight                     4.06kg//n//nLength                     1250mm//n//nBarrel length              740mm//n//nCartridge                  7.92×57mm Mauser//n//nAction                     Bolt-action//n//nRate of fire               ~15 rounds/min//n//nMuzzle velocity            600m/s//n//nEffective firing range     500m//n//nMaximum firing range       1800m//n//nFeed system                5 round en-bloc clip//c external box magazine//c clip fed//n//nSights                     rear sight with a range of 2000m//c front blade sight
gun-60020095,
gun-10020101,UMP9
gun-40020101,GINGALA//cMamiko Noto//c
gun-50020101,Type                       Submachine Gun//n//nWeight                     2.3 kilograms (5.2 lb) //n//nLength                     450 mm (17.7 inches)//c stock folded//n//n                           690 mm (27.2 inches)//c stock extended//n//nBarrel length              200 mm (8 inches)//n//nCartridge                  9×19mm Parabellum //n//nAction                     Blowback//c closed bolt//n//nRate of fire               650 rounds per minute //n//nMuzzle velocity            320 m/s //n//nEffective firing range     100 m//n//nFeed system                30-round detachable box magazine
gun-60020101,
gun-10009001,키클롭스A
gun-40009001,//c//c
gun-50009001,
gun-60009001,
gun-10009002,키클롭스S
gun-40009002,//c//c
gun-50009002,
gun-60009002,
gun-10009003,케리니티스
gun-40009003,//c//c
gun-50009003,
gun-60009003,
gun-10009004,히드라
gun-40009004,//c//c
gun-50009004,
gun-60009004,
gun-10009005,이지스
gun-40009005,//c//c
gun-50009005,
gun-60009005,
gun-10009006,키클롭스A
gun-40009006,//c//c
gun-50009006,
gun-60009006,
gun-10009007,키클롭스A
gun-40009007,//c//c
gun-50009007,
gun-60009007,
gun-10009008,키클롭스S
gun-40009008,//c//c
gun-50009008,
gun-60009008,
gun-10009009,키클롭스S
gun-40009009,//c//c
gun-50009009,
gun-60009009,
gun-10009010,히드라
gun-40009010,//c//c
gun-50009010,
gun-60009010,
gun-10009011,히드라
gun-40009011,//c//c
gun-50009011,
gun-60009011,
gun-10009012,M4A1
gun-40009012,ZAGALA//cHaruka Tomatsu//c
gun-50009012,Type                       Assault rifle//n//nWeight                     6.36 lb (2.88 kg) empty//n//n                           7.5 lb (3.4 kg) with 30 rounds//n//nLength                     33 in (840 mm) (stock extended)//n//n                           29.75 in (756 mm) (stock retracted)//n//nBarrel length              14.5 in (370 mm)//n//nCartridge                  5.56×45mm NATO//n//nCaliber                    5.56 mm (.223 in)//n//nBarrels                    1//n//nAction                     Gas-operated//c rotating bolt (Direct impingement)//n//nRate of fire               700–950 round/min cyclic//n//nMuzzle velocity            2//c900 ft/s (880 m/s)//n//nEffective firing range     500 m (550 yd)//n//nFeed system                30-round box magazine or other STANAG magazines.//n//n                           Other magazines with different //n//n                           capacities also available.//n//nSights                     Iron sights or various optics
gun-60009012,
gun-10009013,M950A
gun-40009013,音符//c古贺葵//c
gun-50009013,Type                       Machine pistol//n//nWeight                     2.25 lb unloaded//n//nLength                     355 mm //n//nBarrel length              6 inches//n//nCartridge                  9×19mm Parabellum//n//nAction                     Roller-delayed blowback//n//nRate of fire               semi-automatic//n//nMuzzle velocity            1290 ft/s//n//nEffective firing range     300+ yards//n//nFeed system                50 rounds/100 rounds helical magazine//n//nSights                     Iron sights//c can have various sights mounted
gun-60009013,
gun-10009014,雷电
gun-40009014,NIN//c//c
gun-50009014,Type                       Break-action//nWeight                     5.44kg//nLength                     429.26mm//nBarrel length              335.28mm//nCartridge                  .50 BMG (12.7×99mm NATO)//nAction                     Single-action//nFeed system                Single-shot//nSights                     Various
gun-60009014,
gun-10009015,AEK999
gun-40009015,RAN//c//c
gun-50009015,Type                       General-purpose machine gun//nWeight                     8.74 kg //nLength                     1188 mm //nBarrel length              605 mm //nCartridge                  7.62×54mmR//nAction                     Gas-Operated//c open bolt//nRate of fire               650 rpm//nMuzzle velocity            825 m/s//nEffective firing range     1500 m//nFeed system                Belt-fed//nSights                     Rear leaf//c front post
gun-60009015,
gun-10009016,TMP
gun-40009016,废人//c//c
gun-50009016,Type                       Compact Sub machine gun//nWeight                     1.3 kg (2.9 lb) empty //nLength                     282 mm (11.10 in.)//nBarrel length              130 mm (5.12 in.)//nCartridge                  9×19mm Parabellum//nAction                     Short recoil//c locking rotating barrel//c delayed blowback//nRate of fire               850–900 rounds/min//nMuzzle velocity            400 m/s (1//c312 ft/s)//nEffective firing range     100 m//nFeed system                15-//c 20-//c or 30-round detachable box magazine//nSights                    Iron sights
gun-60009016,
gun-10009017,K2
gun-40009017,Anmi//c//c
gun-50009017,Type                       Assault rifle//nWeight                     3.26 kg (7.2 lb)//nLength                     980 mm (39 in) (extended)//n                           730 mm (29 in) (folded)//nBarrel length              465 mm (18.3 in)//nCartridge                  5.56×45mm NATO//nAction                     Gas operated//c Rotating bolt (long-stroke piston)//nRate of fire               750 rounds/min//nMuzzle velocity            920 m/s (3//c000 ft/s) //nEffective firing range     600 m//nFeed system                Various STANAG Magazines//nSights                     Iron sights
gun-60009017,
gun-10009018,雷电
gun-40009018,NIN//c//c
gun-50009018,Type                       Break-action//nWeight                     5.44kg//nLength                     429.26mm//nBarrel length              335.28mm//nCartridge                  .50 BMG (12.7×99mm NATO)//nAction                     Single-action//nFeed system                Single-shot//nSights                     Various
gun-60009018,
gun-10009019,AEK999
gun-40009019,RAN//c//c
gun-50009019,Type                       General-purpose machine gun//nWeight                     8.74 kg //nLength                     1188 mm //nBarrel length              605 mm //nCartridge                  7.62×54mmR//nAction                     Gas-Operated//c open bolt//nRate of fire               650 rpm//nMuzzle velocity            825 m/s//nEffective firing range     1500 m//nFeed system                Belt-fed//nSights                     Rear leaf//c front post
gun-60009019,
gun-10009020,TMP
gun-40009020,废人//c//c
gun-50009020,Type                       Compact Sub machine gun//nWeight                     1.3 kg (2.9 lb) empty //nLength                     282 mm (11.10 in.)//nBarrel length              130 mm (5.12 in.)//nCartridge                  9×19mm Parabellum//nAction                     Short recoil//c locking rotating barrel//c delayed blowback//nRate of fire               850–900 rounds/min//nMuzzle velocity            400 m/s (1//c312 ft/s)//nEffective firing range     100 m//nFeed system                15-//c 20-//c or 30-round detachable box magazine//nSights                    Iron sights
gun-60009020,
gun-10009021,K2
gun-40009021,Anmi//c//c
gun-50009021,Type                       Assault rifle//nWeight                     3.26 kg (7.2 lb)//nLength                     980 mm (39 in) (extended)//n                           730 mm (29 in) (folded)//nBarrel length              465 mm (18.3 in)//nCartridge                  5.56×45mm NATO//nAction                     Gas operated//c Rotating bolt (long-stroke piston)//nRate of fire               750 rounds/min//nMuzzle velocity            920 m/s (3//c000 ft/s) //nEffective firing range     600 m//nFeed system                Various STANAG Magazines//nSights                     Iron sights
gun-60009021,
gun-10009022,M950A
gun-40009022,音符//c古贺葵//c
gun-50009022,Type                       Machine pistol//n//nWeight                     2.25 lb unloaded//n//nLength                     355 mm //n//nBarrel length              6 inches//n//nCartridge                  9×19mm Parabellum//n//nAction                     Roller-delayed blowback//n//nRate of fire               semi-automatic//n//nMuzzle velocity            1290 ft/s//n//nEffective firing range     300+ yards//n//nFeed system                50 rounds/100 rounds helical magazine//n//nSights                     Iron sights//c can have various sights mounted
gun-60009022,
gun-10009023,雷电
gun-40009023,NIN//c//c
gun-50009023,Type                       Break-action//nWeight                     5.44kg//nLength                     429.26mm//nBarrel length              335.28mm//nCartridge                  .50 BMG (12.7×99mm NATO)//nAction                     Single-action//nFeed system                Single-shot//nSights                     Various
gun-60009023,
gun-10009024,AEK999
gun-40009024,RAN//c//c
gun-50009024,Type                       General-purpose machine gun//nWeight                     8.74 kg //nLength                     1188 mm //nBarrel length              605 mm //nCartridge                  7.62×54mmR//nAction                     Gas-Operated//c open bolt//nRate of fire               650 rpm//nMuzzle velocity            825 m/s//nEffective firing range     1500 m//nFeed system                Belt-fed//nSights                     Rear leaf//c front post
gun-60009024,
gun-10009025,K2
gun-40009025,Anmi//c//c
gun-50009025,Type                       Assault rifle//nWeight                     3.26 kg (7.2 lb)//nLength                     980 mm (39 in) (extended)//n                           730 mm (29 in) (folded)//nBarrel length              465 mm (18.3 in)//nCartridge                  5.56×45mm NATO//nAction                     Gas operated//c Rotating bolt (long-stroke piston)//nRate of fire               750 rounds/min//nMuzzle velocity            920 m/s (3//c000 ft/s) //nEffective firing range     600 m//nFeed system                Various STANAG Magazines//nSights                     Iron sights
gun-60009025,
gun-10009026,M950A
gun-40009026,音符//c古贺葵//c
gun-50009026,Type                       Machine pistol//n//nWeight                     2.25 lb unloaded//n//nLength                     355 mm //n//nBarrel length              6 inches//n//nCartridge                  9×19mm Parabellum//n//nAction                     Roller-delayed blowback//n//nRate of fire               semi-automatic//n//nMuzzle velocity            1290 ft/s//n//nEffective firing range     300+ yards//n//nFeed system                50 rounds/100 rounds helical magazine//n//nSights                     Iron sights//c can have various sights mounted
gun-60009026,
gun-10009027,雷电
gun-40009027,NIN//c//c
gun-50009027,Type                       Break-action//nWeight                     5.44kg//nLength                     429.26mm//nBarrel length              335.28mm//nCartridge                  .50 BMG (12.7×99mm NATO)//nAction                     Single-action//nFeed system                Single-shot//nSights                     Various
gun-60009027,
gun-10009028,TMP
gun-40009028,废人//c//c
gun-50009028,Type                       Compact Sub machine gun//nWeight                     1.3 kg (2.9 lb) empty //nLength                     282 mm (11.10 in.)//nBarrel length              130 mm (5.12 in.)//nCartridge                  9×19mm Parabellum//nAction                     Short recoil//c locking rotating barrel//c delayed blowback//nRate of fire               850–900 rounds/min//nMuzzle velocity            400 m/s (1//c312 ft/s)//nEffective firing range     100 m//nFeed system                15-//c 20-//c or 30-round detachable box magazine//nSights                    Iron sights
gun-60009028,
gun-10009029,K2
gun-40009029,Anmi//c//c
gun-50009029,Type                       Assault rifle//nWeight                     3.26 kg (7.2 lb)//nLength                     980 mm (39 in) (extended)//n                           730 mm (29 in) (folded)//nBarrel length              465 mm (18.3 in)//nCartridge                  5.56×45mm NATO//nAction                     Gas operated//c Rotating bolt (long-stroke piston)//nRate of fire               750 rounds/min//nMuzzle velocity            920 m/s (3//c000 ft/s) //nEffective firing range     600 m//nFeed system                Various STANAG Magazines//nSights                     Iron sights
gun-60009029,
gun-10009030,M950A
gun-40009030,音符//c古贺葵//c
gun-50009030,Type                       Machine pistol//n//nWeight                     2.25 lb unloaded//n//nLength                     355 mm //n//nBarrel length              6 inches//n//nCartridge                  9×19mm Parabellum//n//nAction                     Roller-delayed blowback//n//nRate of fire               semi-automatic//n//nMuzzle velocity            1290 ft/s//n//nEffective firing range     300+ yards//n//nFeed system                50 rounds/100 rounds helical magazine//n//nSights                     Iron sights//c can have various sights mounted
gun-60009030,
gun-10009031,AEK999
gun-40009031,RAN//c//c
gun-50009031,Type                       General-purpose machine gun//nWeight                     8.74 kg //nLength                     1188 mm //nBarrel length              605 mm //nCartridge                  7.62×54mmR//nAction                     Gas-Operated//c open bolt//nRate of fire               650 rpm//nMuzzle velocity            825 m/s//nEffective firing range     1500 m//nFeed system                Belt-fed//nSights                     Rear leaf//c front post
gun-60009031,
gun-10009032,TMP
gun-40009032,废人//c//c
gun-50009032,Type                       Compact Sub machine gun//nWeight                     1.3 kg (2.9 lb) empty //nLength                     282 mm (11.10 in.)//nBarrel length              130 mm (5.12 in.)//nCartridge                  9×19mm Parabellum//nAction                     Short recoil//c locking rotating barrel//c delayed blowback//nRate of fire               850–900 rounds/min//nMuzzle velocity            400 m/s (1//c312 ft/s)//nEffective firing range     100 m//nFeed system                15-//c 20-//c or 30-round detachable box magazine//nSights                    Iron sights
gun-60009032,
gun-10009034,AK-12
gun-40009034,多元菌//c//c
gun-50009034,Type                       Assault rifle//nWeight                     3.3 kg (7.28 lb)//nLength                     945 mm (37.2 in) (725 mm stock folded)//nBarrel length              415 mm (16.3 in)//nCartridge                  5.45×39mm//nAction                     Gas-operated//c long stroke gas piston//c rotating bolt//nRate of fire               700 RPM//nMuzzle velocity            880–900 m/s (2//c887–2//c953 ft/s)//nEffective firing range     500–600 m (547–656 yd)//nFeed system                30-round detachable box magazine//n                           60-round detachable casket magazine//n                           96-round detachable drum magazine from the RPK-16//n                           Detachable magazines from the AK-74 and RPK-74//nSights                     Back-up iron sights and integrated Picatinny rail for various optics
gun-60009034,
gun-10009035,AN-94
gun-40009035,多元菌//c//c
gun-50009035,Type                       Assault rifle//nWeight                     3.85 kg (8.49 lb)//nLength                     943 mm (37.1 in) stock extended//n                           728 mm (28.7 in) stock folded//nBarrel length              405 mm (15.9 in)//nCartridge                  5.45×39mm//nAction                     Gas-operated//nRate of fire               1800 (2 round burst) or 600 (full auto) rounds/min//nMuzzle velocity            900 m/s (2//c953 ft/s)//nEffective firing range     700 m//nFeed system                30//c 45 round AK-74 compatible box magazines//n                           60-round Casket magazines//nSights                     Iron sights//n                           700 mm (27.6 in) sight radius//c optional optics
gun-60009035,
gun-10009036,M4A1_Motor
gun-40009036,海猫络合物//cHaruka Tomatsu//c
gun-50009036,Type                       Assault rifle//n//nWeight                     6.36 lb (2.88 kg) empty//n//n                           7.5 lb (3.4 kg) with 30 rounds//n//nLength                     33 in (840 mm) (stock extended)//n//n                           29.75 in (756 mm) (stock retracted)//n//nBarrel length              14.5 in (370 mm)//n//nCartridge                  5.56×45mm NATO//n//nCaliber                    5.56 mm (.223 in)//n//nBarrels                    1//n//nAction                     Gas-operated//c rotating bolt (Direct impingement)//n//nRate of fire               700–950 round/min cyclic//n//nMuzzle velocity            2//c900 ft/s (880 m/s)//n//nEffective firing range     500 m (550 yd)//n//nFeed system                30-round box magazine or other STANAG magazines.//n//n                           Other magazines with different //n//n                           capacities also available.//n//nSights                     Iron sights or various optics
gun-60009036,
gun-10009037,AR15_Motor
gun-40009037,LIN+//cEmiri Katou//c
gun-50009037,Type                       Semi-automatic rifle//n//nWeight                     2.27 kg–3.9 kg (5.5–8.5 lb)//n//nLength                     991 mm (39 in)//n//nBarrel length              24 inches (610 mm)//n//n                           20 inches (510 mm) (standard)//n//n                           18 inches (460 mm)//n//n                           16 inches (410 mm) (civilian standard)//n//n                           14.5 inches (370 mm) M4 Military Standard//n//n                           11.5 inches (290 mm)//n//n                           10 inches (250 mm)//n//n                           7 inches (180 mm)//n//n                           6.5 inches (170 mm)//n//nCartridge                  5.56×45mm NATO and others//n//nAction                     Direct impingement or Gas Piston / Via a Rotating bolt//n//nRate of fire               Depends on operator's speed when pulling trigger//n//nMuzzle velocity            975 m/s (3//c200 ft/s)//n//nEffective firing range     400–600 m (avg 547 yd)//n//nFeed system                Various STANAG magazines. 5–100-round capacity//n//nSights                     Adjustable front and rear iron sights
gun-60009037,
gun-10009038,AK12_Motor
gun-40009038,多元菌//cAzumi Waki//c
gun-50009038,Type                       Assault rifle//nWeight                     3.3 kg (7.28 lb)//nLength                     945 mm (37.2 in) (725 mm stock folded)//nBarrel length              415 mm (16.3 in)//nCartridge                  5.45×39mm//nAction                     Gas-operated//c long stroke gas piston//c rotating bolt//nRate of fire               700 RPM//nMuzzle velocity            880–900 m/s (2//c887–2//c953 ft/s)//nEffective firing range     500–600 m (547–656 yd)//nFeed system                30-round detachable box magazine//n                           60-round detachable casket magazine//n                           96-round detachable drum magazine from the RPK-16//n                           Detachable magazines from the AK-74 and RPK-74//nSights                     Back-up iron sights and integrated Picatinny rail for various optics
gun-60009038,
gun-10009039,AN94_Motor
gun-40009039,多元菌//cManami Numakura//c
gun-50009039,Type                       Assault rifle//nWeight                     3.85 kg (8.49 lb)//nLength                     943 mm (37.1 in) stock extended//n                           728 mm (28.7 in) stock folded//nBarrel length              405 mm (15.9 in)//nCartridge                  5.45×39mm//nAction                     Gas-operated//nRate of fire               1800 (2 round burst) or 600 (full auto) rounds/min//nMuzzle velocity            900 m/s (2//c953 ft/s)//nEffective firing range     700 m//nFeed system                30//c 45 round AK-74 compatible box magazines//n                           60-round Casket magazines//nSights                     Iron sights//n                           700 mm (27.6 in) sight radius//c optional optics
gun-60009039,
gun-10009040,M4A1
gun-40009040,
gun-50009040,
gun-60009040,
gun-10009041,M4A1
gun-40009041,
gun-50009041,
gun-60009041,
gun-10009042,M4A1
gun-40009042,
gun-50009042,
gun-60009042,
gun-10009043,M4A1
gun-40009043,
gun-50009043,
gun-60009043,
gun-10009044,M16_BOSS
gun-40009044,
gun-50009044,
gun-60009044,
gun-10009048,M4A1
gun-40009048,海猫络合物//cHaruka Tomatsu//c
gun-50009048,Type                       Assault rifle//n//nWeight                     6.36 lb (2.88 kg) empty//n//n                           7.5 lb (3.4 kg) with 30 rounds//n//nLength                     33 in (840 mm) (stock extended)//n//n                           29.75 in (756 mm) (stock retracted)//n//nBarrel length              14.5 in (370 mm)//n//nCartridge                  5.56×45mm NATO//n//nCaliber                    5.56 mm (.223 in)//n//nBarrels                    1//n//nAction                     Gas-operated//c rotating bolt (Direct impingement)//n//nRate of fire               700–950 round/min cyclic//n//nMuzzle velocity            2//c900 ft/s (880 m/s)//n//nEffective firing range     500 m (550 yd)//n//nFeed system                30-round box magazine or other STANAG magazines.//n//n                           Other magazines with different //n//n                           capacities also available.//n//nSights                     Iron sights or various optics
gun-60009048,